<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ICP2017F/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ICP2017F/" />
<updated>2017-09-27T08:47:08-05:00</updated>
<id>http:/ICP2017F/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ICP2017F/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Lecture 6: MATLAB - operators, branching, and control statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/6-matlab-operators-branching"/>
  <id>http:/ICP2017F/lecture/6-matlab-operators-branching</id>
  <published>2017-09-29T00:00:00-05:00</published>
  <updated>2017-09-29T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains some of the most widely used operators, as well as branching statements in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;matlab-operators&quot;&gt;MATLAB operators&lt;/h2&gt;

&lt;p&gt;A complete list of MALTAB operators can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Corresponding to each operator, there is also MATLAB function that does the exact same thing for you.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Arithmetic operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Addition                                      &lt;/td&gt;&lt;td&gt;&lt;code&gt;plus()      &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary plus                                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;uplus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Subtraction                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;minus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary minus                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;uminus()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .* &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise multiplication                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;times()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; *  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix multiplication                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mtimes()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ./ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise right division                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;rdivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; /  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix right division                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mrdivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .\ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise left division                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;ldivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; \  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix left divison (also known as backslash) &lt;/td&gt;&lt;td&gt;&lt;code&gt;mldivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .^ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise power                            &lt;/td&gt;&lt;td&gt;&lt;code&gt;power()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ^  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix power                                  &lt;/td&gt;&lt;td&gt;&lt;code&gt;mpower()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .' &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Transpose                                     &lt;/td&gt;&lt;td&gt;&lt;code&gt;transpose() &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; '  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Complex conjugate transpose                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;ctranspose()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/arithop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Arithmetic operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Rational operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; == &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;eq()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Not equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ne()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than&lt;/td&gt;&lt;td&gt;&lt;code&gt;gt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ge()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than&lt;/td&gt;&lt;td&gt;&lt;code&gt;lt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;le()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/rationalop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Rational operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Logical operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND&lt;/td&gt;&lt;td&gt;&lt;code&gt;and()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; |  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR&lt;/td&gt;&lt;td&gt;&lt;code&gt;or()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;&amp;amp; &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; || &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical NOT&lt;/td&gt;&lt;td&gt;&lt;code&gt;not()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/logicop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Logical operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;

### Logical operator short-circuit in MATLAB

Note that there are two types of logical operators, one of which is called [short-circuit](http:/ICP2017F/lecture/6/shortCircuit.mp4){:target=&quot;_blank&quot;}. More information about them and their meanings can be found [here](https://www.mathworks.com/help/matlab/ref/logicaloperatorsshortcircuit.html#bt_0nai-1){:target=&quot;_blank&quot;}.

&lt;!--
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;video width=&quot;100%&quot; src=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;
--&gt;

&lt;h3 id=&quot;special-characters-in-matlab&quot;&gt;Special characters in MATLAB&lt;/h3&gt;

&lt;p&gt;There are also a set of characters that have special role in MATLAb, some of which we have already discussed in the past lectures. You can learn about them &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html#bvg3oy_-5&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implicit-type-casting-and-operator-overloading&quot;&gt;Implicit type casting and operator overloading&lt;/h2&gt;

&lt;p&gt;MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot; target=&quot;_blank&quot;&gt;loosely or weakly-typed language&lt;/a&gt;, which has a number of real-world implications. The first, and probably most notable, difference between MATLAB and a strongly-typed language is that you don’t have to explicitly declare the types of the variables you use. For example, the declarations x=5; x=’foo’ immediately following one another are perfectly acceptable; the first declaration causes x to be treated as a number, the second changes its treatment to a string.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;main benefit&lt;/strong&gt; of using a weakly-typed language is the &lt;strong&gt;ability to do rapid prototyping&lt;/strong&gt;. The number of lines of code required to declare and use a dynamically allocated array in C (and properly clean up after its use) are much greater than the number of lines required for the same process in MATLAB. Weak typing is also good for code-reuse. You can code a scalar algorithm in MATLAB and with relatively little effort modify it to work on arrays as well as scalars. The fact that MATLAB is a scripted instead of a compiled language also contributes to rapid prototyping.&lt;/p&gt;

&lt;p&gt;Weak typing is not without its pitfalls, though. For example, weak typing combined with unexpected user input can sometimes lead to erroneous results,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=5;
&amp;gt;&amp;gt; y=4;
&amp;gt;&amp;gt; x/y
ans =
    1.2500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt; whereas the same code in strongly-typed compiled languages, such as C and Fortran would have given &lt;em&gt;integer&lt;/em&gt; value &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Weak typing, combined with intrinsic MATLAB &lt;a href=&quot;https://www.google.com/search?q=operator+overloading&amp;amp;spell=1&amp;amp;sa=X&amp;amp;ved=0ahUKEwix2e-x1-vVAhUF-lQKHXZxCZYQvwUIIygA&amp;amp;biw=1344&amp;amp;bih=744&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;operator overloading&lt;/strong&gt;&lt;/a&gt; can also can lead to unexpected results when operations between mixed types are done. Consider what happens when you add &lt;code&gt;1+'1'&lt;/code&gt;, that is, the scalar 1 and the character ‘1’. The surprising result is 50. MATLAB automatically converts the character &lt;code&gt;'1'&lt;/code&gt; to its ASCII representation value, which is 49 (You can get the ASCII code for any character using the &lt;code&gt;abs()&lt;/code&gt; function). After this implicit conversion, MATLAB adds the scalar value of &lt;code&gt;1&lt;/code&gt; to return &lt;code&gt;50&lt;/code&gt;. (Note: While this example is somewhat contrived it can easily arise, especially when passing a function argument where the type is undetermined. To write completely safe weakly-typed code, user input should always be checked before performing operations on it.)&lt;/p&gt;

&lt;p&gt;The situation can be more complicated when you deal with strings rather than single characters. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=10;
&amp;gt;&amp;gt; y='10';
&amp;gt;&amp;gt; x+y
ans =
    59    58
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Basically, what happened above is that &lt;code&gt;'10'&lt;/code&gt; is considered as a vector of characters, therefore, when you add it to &lt;code&gt;10&lt;/code&gt;, Matlab automatically converts this string to a vector of corresponding ASCII values and adds the value &lt;code&gt;10&lt;/code&gt; to each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 'Hello' + 'World'
ans =
    159 212 222 216 211
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explicit-type-conversion&quot;&gt;Explicit type conversion&lt;/h2&gt;

&lt;p&gt;Unlike implicit type casting which is done by MATLAB under the hood as described above, which can also be dangerous, you can also explicitly request MATLAB to convert the type of a variable to some other type, using MATLAB’s built-in functions like &lt;code&gt;cast&lt;/code&gt;, or one of the &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-type-conversion.html&quot; target=&quot;_blank&quot;&gt;many other functions&lt;/a&gt; that MATLAB has for this purpose.&lt;/p&gt;

&lt;h3 id=&quot;array-vs-matrix-operations&quot;&gt;Array vs. Matrix Operations&lt;/h3&gt;

&lt;p&gt;We have already learned that arrays and matrices are not the same in MATLAB. As a result, the operators that can act on them are also not identical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matrix operations&lt;/strong&gt; follow the rules of linear algebra and are not compatible with multidimensional arrays. The required size and shape of the inputs in relation to one another depends on the operation. For non-scalar inputs, the matrix operators generally calculate different answers than their array operator counterparts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array operations&lt;/strong&gt; execute element by element operations on corresponding elements of vectors, matrices, and multidimensional arrays. If the operands have the same size, then each element in the first operand gets matched up with the element in the same location in the second operand. If the operands have compatible sizes, then each input is implicitly expanded as needed to match the size of the other.&lt;/p&gt;

&lt;p&gt;You can learn more about them in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;operator-precedence-in-matlab&quot;&gt;Operator precedence in MATLAB&lt;/h3&gt;

&lt;p&gt;You can build expressions that use any combination of arithmetic, relational, and logical operators. Precedence levels determine the order in which MATLAB® evaluates an expression. Within each precedence level, operators have equal precedence and are evaluated from left to right. The precedence rules for MATLAB operators are shown in this list, ordered from highest precedence level to lowest precedence level:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parentheses &lt;code&gt;()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Transpose &lt;code&gt;.'&lt;/code&gt;, power &lt;code&gt;.^&lt;/code&gt;, complex conjugate transpose &lt;code&gt;'&lt;/code&gt;, matrix power &lt;code&gt;^&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Power with unary minus &lt;code&gt;.^-&lt;/code&gt;, unary plus &lt;code&gt;.^+&lt;/code&gt;, or logical negation &lt;code&gt;.^~&lt;/code&gt; as well as matrix power with unary minus &lt;code&gt;^-&lt;/code&gt;, unary plus &lt;code&gt;^+&lt;/code&gt;, or logical negation &lt;code&gt;^~&lt;/code&gt;. (Note:   Although most operators work from left to right, the operators &lt;code&gt;^-&lt;/code&gt;, &lt;code&gt;.^-&lt;/code&gt;, &lt;code&gt;^+&lt;/code&gt;, &lt;code&gt;.^+&lt;/code&gt;, &lt;code&gt;^~&lt;/code&gt;, and &lt;code&gt;.^~&lt;/code&gt; work from second from the right to left. It is recommended that you use parentheses to explicitly specify the intended precedence of statements containing these operator combinations.)&lt;/li&gt;
  &lt;li&gt;Unary plus &lt;code&gt;+&lt;/code&gt;, unary minus &lt;code&gt;-&lt;/code&gt;, logical negation &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Multiplication &lt;code&gt;.*&lt;/code&gt;, right division &lt;code&gt;./&lt;/code&gt;, left division &lt;code&gt;.\&lt;/code&gt;, matrix multiplication &lt;code&gt;*&lt;/code&gt;, matrix right division &lt;code&gt;/&lt;/code&gt;, matrix left division &lt;code&gt;\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Colon operator &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Less than &lt;code&gt;&amp;lt;&lt;/code&gt;, less than or equal to &lt;code&gt;&amp;lt;=&lt;/code&gt;, greater than &lt;code&gt;&amp;gt;&lt;/code&gt;, greater than or equal to &lt;code&gt;&amp;gt;=&lt;/code&gt;, equal to &lt;code&gt;==&lt;/code&gt;, not equal to &lt;code&gt;~=&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise AND &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise OR &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; OR &lt;code&gt;||&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can learn more about operator precedence in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/operator-precedence.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;branching-in-python&quot;&gt;Branching in Python&lt;/h2&gt;

&lt;p&gt;The normal flow of control in procedural programming paradigm is in general, &lt;em&gt;sequential&lt;/em&gt;. So is the flow of control in MATLAB.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/normalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Normal sequential control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/conditionalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conditional control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In MATLAB, you can achieve conditional flow control, using either &lt;strong&gt;if-block&lt;/strong&gt; or &lt;strong&gt;switch-case&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-if-blocks&quot;&gt;MATLAB if-blocks&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = input('Enter a number:');
if (a &amp;gt;= 0)
    root = sqrt(a);
    disp(['Square root = ' num2str(root)]);
elseif (a &amp;lt; 0)
    disp(['The input number is negative, there is no square root.']);
else
    disp(['Please enter a real number!']);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a number:13
Square root = 3.6056

Enter a number:-11
The input number is negative, there is no square root

Enter a number:i
Square root = 0.70711+0.70711i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note in the above example, how MATLAB treats complex variables. More information on operators that can be used to construct or combine logical conditions for if-statements can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/logical-operations.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-switch-case&quot;&gt;MATLAB switch-case&lt;/h3&gt;

&lt;p&gt;Sometimes we may have many if statements which all use conditions based on the same variable. It is not incorrect to use if statements in such cases, but it can lead to a large number of consecutive if statements in our code, making it harder to read and more prone to errors. In this case, it is preferable to use a switch statement. The switch statement offers an easy way of writing code where the same variable needs to be checked against a number of different values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case 1
        day_name = 'Monday';
    case 2
        day_name = 'Tuesday';
    case 3
        day_name = 'Wednesday';
    case 4
        day_name = 'Thursday';
    case 5
        day_name = 'Friday';
    case 6
        day_name = 'Saturday';
    case 7
        day_name = 'Sunday';
    otherwise
        day_name = 'Unknown';
end
disp(['The corresponding weekday is ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:4
The corresponding weekday is Thursday.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MATLAB will compare the switch expression (in this case, &lt;code&gt;day&lt;/code&gt;) with each case expression in turn (the numbers 1–7). When a comparison evaluates to &lt;code&gt;true&lt;/code&gt;, MATLAB executes the corresponding statements and then exits the switch statement, i.e. control flow passes to after the &lt;code&gt;end&lt;/code&gt; statement. The &lt;code&gt;otherwise&lt;/code&gt; block is optional and executes only when no comparison evaluates to    &lt;code&gt;true&lt;/code&gt;. Note that the &lt;code&gt;switch&lt;/code&gt; statement is used only for equality tests – we cannot use it for other types of comparison (e.g. &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement may also take an array as one of its cases,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case {1,2,3,4,5}
        day_name = 'Weekday';
    case {6,7}
        day_name = 'Weekend';
    otherwise
        day_name = 'Unknown';
end
disp(['The input day number corresponds to ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:6
The input day number corresponds to Weekend.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;non-boolean-conditions-in-if-statements&quot;&gt;Non-boolean conditions in if-statements&lt;/h3&gt;
&lt;p&gt;There is a rather interesting feature of conditions for if-statements in MATLAB (also in Python language), that allows the programmer to use a non-boolean variable or non-boolean value type directly in place of the condition in if-statement. What really happens here is that, MATLAB interpreter converts the non-boolean type to a boolean value, when it occurs in place of an if-statement condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 5.6
    disp('The condition in this if statement is automatically converted from float to boolean')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The condition in this if statement is automatically converted from float to boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.000000000000000000000000000000000000000000000000000000000000000000001
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-323
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value smaller than the computer precision will be set to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 12
    disp('The same rules also hold for integers.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for integers.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty string is converted to boolean false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if []
    disp('An empty vector is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But note that conversion from cell to logical is not possible in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if {}
    disp('An empty cell cannot be converted to boolean value, because MATLAB wants it that way!')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Conversion to logical from cell is not possible. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ['amir']
    disp('An non-empty vector is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An non-empty vector is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ' '
    disp('A non-empty string is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty string is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;matlabs-built-in-is-functions&quot;&gt;MATLAB’s built-in &lt;strong&gt;is&lt;/strong&gt; functions&lt;/h3&gt;

&lt;p&gt;MATLAB has a wide range of functions whose names begins with &lt;code&gt;is&lt;/code&gt;, and their output is a logical value type, which can be used in if-blocks. These functions are extremely useful in MATLAB coding, and you will encounter them frequently in your computational life. Here is a rather comprehensive list of them,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's &lt;i&gt;is-functions&lt;/i&gt; and description of their functionality.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isa()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect object of given MATLAB class or Java® class&lt;/td&gt;&lt;/tr&gt;  
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isappdata()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if object has specific application-defined data&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isbetween()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Array elements occurring within date and time interval&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscalendarduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategorical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategory()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Test for categorical array categories&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscell()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscellstr()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array of strings&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ischar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is character array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscolumn()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is column vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscom()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdatetime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is datetime array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdir()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is folder&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdst()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during daylight saving time&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isempty()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is empty array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequaln()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal, treating NaNs as equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isevent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object event&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfield()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array field&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfinite()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect finite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfloat()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is floating-point array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishandle()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect valid graphics object handles&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishold()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if graphics hold state is on&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinf()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect infinite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinteger()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is integer array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinterface()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) interface&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isjava()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Java object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iskeyword()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB keyword&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isletter()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements that are alphabetic letters&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;islogical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is logical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismac()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for Macintosh OS X platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismatrix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is matrix&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismember()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect members of specific set&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismethod()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object method&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismissing()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find table elements with missing values&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnan()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements of array that are not a number (NaN)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnumeric()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is numeric array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isobject()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isordinal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is ordinal categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ispc()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for PC (Windows®) platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect prime elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object property&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprotected()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether categories of categorical array are protected&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isreal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are real numbers&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isrow()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is row vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isscalar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is scalar&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issorted()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if set elements are in sorted order&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isspace()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect space characters in array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issparse()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is sparse array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstrprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if string is of specified category&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstruct()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstudent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if Student Version of MATLAB&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;istable()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is table&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isundefined()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find undefined elements in categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isunix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for UNIX®[a] platform.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvarname()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is valid variable name&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvector()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isweekend()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during weekend&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For more information on each individual function, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/is.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s use manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;write a MATLAB script that takes two matrices as input and determines whether they have equal size.&lt;br /&gt;
&lt;strong&gt;answer&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if isequal(size(A),size(B))
C = [A; B];
else
disp('A and B are not the same size.')
C = [];
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a script that checks if your script exists!&lt;br /&gt;
&lt;strong&gt;answer&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if exist('myfunction.m','file')
 disp('Your file exists! Did you expect otherwise?')
else
 disp('Your file does not exist! Then perhaps you don''t exist either??')
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a script that takes an input number and calculates the following function,&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation*}
y =
\begin{cases}
    x &amp; \text{for}~~~-1&lt;=x&lt;=1 \\
    x^2 &amp; \text{otherwise} \\
\end{cases}
\end{equation*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = input('input the value of x: ')
if x &amp;gt;= -1 &amp;amp;&amp;amp; x &amp;lt;= 1
    y = x
else
    y = x^2
end
disp(['y(x=',num2str(x),') = ',num2str(y)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6-matlab-operators-branching&quot;&gt;Lecture 6: MATLAB - operators, branching, and control statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 29, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 5: MATLAB - values, variables, types - II]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/5-matlab-values-variables-types-II"/>
  <id>http:/ICP2017F/lecture/5-matlab-values-variables-types-II</id>
  <published>2017-09-27T00:00:00-05:00</published>
  <updated>2017-09-27T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains values and variables in MATLAB, as well as common MATLAB operators.&lt;/p&gt;

&lt;p&gt;For general information on MATLAB Data Types, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-types_data-types.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;variables-in-matlab&quot;&gt;Variables in MATLAB&lt;/h2&gt;

&lt;p&gt;A variable is simply a name that we assign to a specific value, in order to avoid repeating the same value frequently in the code, thus writing a cleaner, less error-prone script/code. We discussed in previous lecture, the main values types (classes) in MATLAB. The same also holds for variables, because they are simply names assigned to each value or a set of values. In order to define a variable, the varable name must always appear on the left of an equality, like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; a = 1 % assign value 1 to a
a =
     1
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; 1 = b % this is wrong
 1 = b
   ↑
Error: The expression to the left of the equals sign is not a valid target for an assignment.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get to each of these below. But before that, here are some official and unofficial tips on the variable naming conventions in MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;variable-naming-convention-in-matlab&quot;&gt;Variable naming convention in MATLAB&lt;/h3&gt;

&lt;p&gt;A MATLAB variable can only begin with letter followed by underscore &lt;code&gt;_&lt;/code&gt; and numbers inside or at the end of the variable name. MATLAB is case sensitive, so &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are not the same variable. Other symbols are syntactically invalid anywhere in a variable name. Examples of valid names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;x6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lastValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n_factorial&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Invalid names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;6x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n!&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;end&lt;/code&gt; (see below for the reason)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; new_var$
 new_var$
        ↑
Error: The input character is not valid in MATLAB statements or expressions.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; amir = 'teacher';
disp(['Amir is a', amir])
Amir is ateacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; life_expectancy = 120; disp( ['The life expectancy for the millennials is projected to be ',life_expectancy,' years! (But don''t believe it...)'] )
The life expectancy for the millennials is projected to be x years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;matlab-reserved-names-keywords&quot;&gt;MATLAB reserved names (keywords)&lt;/h4&gt;
&lt;p&gt;There are some limitation as to what names you can choose for your variables, even if they completely obey MATLAB syntax standard. Variable names in MATLAB cannot be the same as &lt;strong&gt;MATLAB keywords&lt;/strong&gt;, which are simply names that reserved for a specific purpose in MATLAB programming.  They are used to define the syntax and structure of the MATLAB language. Note that &lt;strong&gt;MATLAB keywords are case-sensitive&lt;/strong&gt;.  You &lt;strong&gt;cannot&lt;/strong&gt; define variables with the exact same names as &lt;strong&gt;MATLAB keywords&lt;/strong&gt;, such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt;. For a complete list of MATLAB keyword, run the &lt;code&gt;iskeyword&lt;/code&gt; command,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; iskeyword
ans = 
    'break'
    'case'
    'catch'
    'classdef'
    'continue'
    'else'
    'elseif'
    'end'
    'for'
    'function'
    'global'
    'if'
    'otherwise'
    'parfor'
    'persistent'
    'return'
    'spmd'
    'switch'
    'try'
    'while'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;predefined-variables-in-matlab&quot;&gt;Predefined variables in MATLAB&lt;/h4&gt;

&lt;p&gt;Note that there are some predefined variables in MATLAB, that are not considered as keywords. Therefore you can change their values and use them for your own purposes. But, &lt;strong&gt;be very careful with predefined variables and in general&lt;/strong&gt;, it is better to not mess with them, as they can lead to confusion and catastrophe. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true % true is a predefined MATLAB logical variable
ans =
     1
&amp;gt;&amp;gt; class(true)
ans =
logical
&amp;gt;&amp;gt; true = 0 % but I have redefined it as double
true =
     0
&amp;gt;&amp;gt; class(true)
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; class(nan)
ans =
double
&amp;gt;&amp;gt; nan = true
nan =
     0
&amp;gt;&amp;gt; nan = false % redefine nan
nan =
     0
&amp;gt;&amp;gt; class(nan)
ans =
logical
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  nan              true             

&amp;gt;&amp;gt; whos
  Name                 Size            Bytes  Class      Attributes

  life_expectancy      1x1                 8  double               
  nan                  1x1                 1  logical              
  true                 1x1                 8  double               

&amp;gt;&amp;gt; clear nan
&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  true             

&amp;gt;&amp;gt; clear all
&amp;gt;&amp;gt; whos
&amp;gt;&amp;gt; who
&amp;gt;&amp;gt; pi
ans =
    3.1416
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; inf
ans =
   Inf
&amp;gt;&amp;gt; i
ans =
   0.0000 + 1.0000i
&amp;gt;&amp;gt; j
ans =
   0.0000 + 1.0000i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is a list of som eof the most important predefined variables in MATLAB.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. A list of predefined values and variables in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;pi   &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The number $\pi$ up to 15 significant digits.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;i, j &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The complex number $\sqrt{-1}$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;inf  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Represents the mathematical Infinity concept, for example, a result of division by zero.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;NaN  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for Not-A-Number. Represents the result of a meaningless mathematical function, like $0/0$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;clock&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains the current date and time in the form of a 6-element row vector: year,month,day,hour,minute,second.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;date &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains a string representing today's date.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;eps  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for &lt;b&gt;epsilon&lt;/b&gt;. It represents the smallest number that can be represented by your MATLAB software.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;ans  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A special variable that MATLAB uses to store the result of MATLAB's command line.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;numeric-variables&quot;&gt;Numeric variables&lt;/h3&gt;

&lt;p&gt;We have already extensively discussed number values in the previous lecture. Basically, everything that we have said about number values, holds also for variables of type number.&lt;/p&gt;

&lt;h3 id=&quot;vector-and-matrix-variables&quot;&gt;Vector and matrix variables&lt;/h3&gt;

&lt;p&gt;Again, similar to vector and matrix values, everything holds for the same type variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = [1,2,3,4]
a =
     1     2     3     4
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; a = [1;2;3;4]
a =
     1
     2
     3
     4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-colon-operator-&quot;&gt;The colon operator &lt;code&gt;:&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;MATLAB has a special character shortcut notation for occasions when you want to create a numeric vector of a specific range with predefined fixed spacing between the values of the vector. This shortcut has the following form,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;begin:increment:end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = 0:10:100
x =
     0    10    20    30    40    50    60    70    80    90   100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-transpose-operator-&quot;&gt;The transpose operator &lt;code&gt;'&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Now as you may have noticed, MATLAB by default creates row-wise vectors, just as &lt;code&gt;x&lt;/code&gt; was generated above. If you want to initialize &lt;code&gt;x&lt;/code&gt; as a column-wise vector, all you need to do is to add the transpose operator &lt;code&gt;'&lt;/code&gt; at the end of the vector or the variable name (but now, you would also need the vector constructor &lt;code&gt;[]&lt;/code&gt;),&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = [0:10:100]'
x =
     0
    10
    20
    30
    40
    50
    60
    70
    80
    90
   100
&amp;gt;&amp;gt; whos x
  Name       Size            Bytes  Class     Attributes

  x         11x1                88  double
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, pay attention to the size of the vector &lt;code&gt;x&lt;/code&gt;. What does it mean when it says &lt;code&gt;88 Bytes&lt;/code&gt;?&lt;/p&gt;

&lt;h4 id=&quot;creating-matrices&quot;&gt;Creating matrices&lt;/h4&gt;

&lt;p&gt;There are a number of functions in MATLAB that can help you build predefined matrices or vectors.&lt;/p&gt;

&lt;h5 id=&quot;zeros&quot;&gt;zeros&lt;/h5&gt;

&lt;p&gt;Creates array of all zeros (with optionally given &lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot; target=&quot;_blank&quot;&gt;fixed-point&lt;/a&gt; properties. For more information, see &lt;a href=&quot;https://www.mathworks.com/help/fixedpoint/ref/zeros.html#inputarg_p&quot; target=&quot;_blank&quot;&gt;MATLAB’s manual&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; zeros(2,2)
ans =
     0     0
     0     0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = zeros(1,3)
a =
     0     0     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;ones&quot;&gt;ones&lt;/h5&gt;

&lt;p&gt;Creates array of all ones with fixed-point properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = ones(1,3)
a =
     1     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;eye&quot;&gt;eye&lt;/h5&gt;

&lt;p&gt;Creates identity matrix with fixed-point properties&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; I = eye(3,3)
I =
     1     0     0
     0     1     0
     0     0     1
&amp;gt;&amp;gt; I = eye(3,4)
I =
     1     0     0     0
     0     1     0     0
     0     0     1     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;diag&quot;&gt;diag&lt;/h5&gt;

&lt;p&gt;Creates a diagonal matrix from a given input vector,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;v = [2 1 -1 -2 -5];
&amp;gt;&amp;gt; D = diag(v)
D =
     2     0     0     0     0
     0     1     0     0     0
     0     0    -1     0     0
     0     0     0    -2     0
     0     0     0     0    -5
&amp;gt;&amp;gt; D = diag(v,2)
D =
     0     0     2     0     0     0     0
     0     0     0     1     0     0     0
     0     0     0     0    -1     0     0
     0     0     0     0     0    -2     0
     0     0     0     0     0     0    -5
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
&amp;gt;&amp;gt; D = diag(v,-2)
D =
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
     2     0     0     0     0     0     0
     0     1     0     0     0     0     0
     0     0    -1     0     0     0     0
     0     0     0    -2     0     0     0
     0     0     0     0    -5     0     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;code&gt;diag&lt;/code&gt; can also get diagonal elements of an input matrix, if it already exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = eye(3,5)
a =
     1     0     0     0     0
     0     1     0     0     0
     0     0     1     0     0
&amp;gt;&amp;gt; diag(a)
ans =
     1
     1
     1
&amp;gt;&amp;gt; diag(a,-1)
ans =
     0
     0
&amp;gt;&amp;gt; diag(a,1)
ans =
     0
     0
     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;ndgrid&quot;&gt;ndgrid&lt;/h5&gt;

&lt;p&gt;Creates rectangular grid in N-D space.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [X,Y] = ndgrid(1:2:19,2:2:12)
X =
     1     1     1     1     1     1
     3     3     3     3     3     3
     5     5     5     5     5     5
     7     7     7     7     7     7
     9     9     9     9     9     9
    11    11    11    11    11    11
    13    13    13    13    13    13
    15    15    15    15    15    15
    17    17    17    17    17    17
    19    19    19    19    19    19
Y =
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Later on, we will see how this function can be used to generate fancy looking graphs like the following,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/5/2dgrid.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;matrix-concatenation-functions&quot;&gt;Matrix concatenation functions&lt;/h4&gt;

&lt;p&gt;The following functions combine existing matrices to form a new matrix.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;: Concatenate matrices along the specified dimension&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;horzcat&lt;/strong&gt;: Horizontally concatenate matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;vertcat&lt;/strong&gt;: Vertically concatenate matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repmat&lt;/strong&gt;: Create a new matrix by replicating and tiling existing matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;blkdiag&lt;/strong&gt;: Create a block diagonal matrix from existing matrices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cell-variables&quot;&gt;Cell variables&lt;/h3&gt;

&lt;p&gt;When we want to define a variable whose elements are not all of the same type, we need an entity that goes beyond the capabilities of matrices, which can only contain numeric values. Just as with cell values in the previous lecture, a cell array is a data type with indexed data containers called cells. Each cell can contain any type of data. Cell arrays commonly contain &lt;strong&gt;pieces of text (string)&lt;/strong&gt;, &lt;strong&gt;combinations of text and numbers&lt;/strong&gt; from spreadsheets or text files, or they can contain arrays of numeric arrays of different sizes.&lt;/p&gt;

&lt;p&gt;There are two ways to refer to the elements of a cell array. Enclose indices in smooth parentheses, (), to refer to sets of cells — for example, to define a subset of the array. Enclose indices in curly braces, {}, to refer to the text, numbers, or other data within individual cells.&lt;/p&gt;

&lt;h4 id=&quot;creating-cell-arrays&quot;&gt;Creating cell arrays&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C = {} % empty cell array
C = 
     {}
&amp;gt;&amp;gt; class(C)
ans =
cell
&amp;gt;&amp;gt; size(C)
ans =
     0     0
&amp;gt;&amp;gt; length(C)
ans =
     0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; emptyCell = cell(3,4)
emptyCell = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
&amp;gt;&amp;gt; emptyCell = cell(3,4,2)
emptyCell(:,:,1) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
emptyCell(:,:,2) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = {'Hi', ' ', 'World!'} % a cell array of strings
a = 
    'Hi'    ' '    'World!'
&amp;gt;&amp;gt; class(a)
ans =
cell
&amp;gt;&amp;gt; size(a) % the length of a, in all directions (dimension)
ans =
     1     3
&amp;gt;&amp;gt; length(a) % the length of a, along the longest dimension
ans =
     3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To call a specific element, use &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; names = {'Bloggs', 'San', 'Andersen'};
&amp;gt;&amp;gt; first_cell = names(1);
&amp;gt;&amp;gt; rest_of_cells = names(2:3);
&amp;gt;&amp;gt; third_string = names{3};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see what the type of each element is by using &lt;code&gt;who&lt;/code&gt; and &lt;code&gt;whos&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; whos
  Name               Size            Bytes  Class     Attributes

  a                  1x3               354  cell                
  ans                1x1                 8  double              
  chr                1x12               24  char                
  first_cell         1x1               124  cell                
  names              1x3               370  cell                
  rest_of_cells      1x2               246  cell                
  third_string       1x8                16  char     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that &lt;code&gt;who&lt;/code&gt; only gives you the names of the variables,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; who

Your variables are:

a              ans            chr            first_cell     names          rest_of_cells  third_string  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cell-array-concatenation-functions&quot;&gt;Cell array concatenation functions&lt;/h4&gt;

&lt;p&gt;There are a wide range of MATLAB functions that act on cells, which can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/cell-arrays.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;string-char-variables&quot;&gt;String (char) variables&lt;/h3&gt;

&lt;p&gt;Just as explained in the last lecture,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; class(newChr)
ans =
char
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;creating-string-arrays&quot;&gt;Creating string arrays&lt;/h4&gt;

&lt;p&gt;Creating string arrays is rather complex and confusing in MATLAB. Here is &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/creating-character-arrays.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s own manual for creating string arrays&lt;/a&gt;. Note that a string is a vector by itself. So you can fetch its characters as elements,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; newChr(1)
ans =
Y
&amp;gt;&amp;gt; newChr(1:4)
ans =
You'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;structure-variables&quot;&gt;Structure variables&lt;/h3&gt;

&lt;p&gt;Structures are arrays with &lt;strong&gt;named fields&lt;/strong&gt; that can contain data of varying types and sizes. A structure array is a data type that groups related data using data containers called fields. Each field can contain any type of data. You can access data in a structure using &lt;strong&gt;dot notation&lt;/strong&gt; of the form &lt;code&gt;structName.fieldName&lt;/code&gt;. Here is &lt;a href=&quot;https://www.mathworks.com/videos/introducing-structures-and-cell-arrays-101508.html&quot; target=&quot;_blank&quot;&gt;MATLAB video&lt;/a&gt; about cell and structure arrays. To create a structure, you have to use function &lt;code&gt;struct&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; field = 'f';
value = {'some text';
         [10, 20, 30];
         magic(5)};
s = struct(field,value)
s = 
3x1 struct array with fields:
    f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create empty structure (which can be manipulated later),&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = struct()
s = 
struct with no fields.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is a along list of functions that can manipulate structures. A list of them is available on MATLAB website &lt;a href=&quot;https://www.mathworks.com/help/matlab/structures.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-tables&quot;&gt;MATLAB tables&lt;/h3&gt;

&lt;p&gt;Tables are arrays in tabular form whose named columns can have different types. A table is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size &lt;strong&gt;with the one restriction&lt;/strong&gt; that &lt;strong&gt;each variable must have the same number of rows&lt;/strong&gt;. For more information, see &lt;a href=&quot;http://www.mathworks.com/videos/tables-and-categorical-arrays-in-release-2013b-101607.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s educational video on Tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a table, you can use the function &lt;code&gt;table&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; LastName = {'Smith';'Johnson';'Williams';'Jones';'Brown'};
&amp;gt;&amp;gt; Age = [38;43;38;40;49];
&amp;gt;&amp;gt; Height = [71;69;64;67;64];
&amp;gt;&amp;gt; Weight = [176;163;131;133;119];
&amp;gt;&amp;gt; BloodPressure = [124 93; 109 77; 125 83; 117 75; 122 80];
&amp;gt;&amp;gt; T = table(Age,Height,Weight,BloodPressure,'RowNames',LastName)
T = 
                Age    Height    Weight    BloodPressure
                ___    ______    ______    _____________
    Smith       38     71        176       124     93   
    Johnson     43     69        163       109     77   
    Williams    38     64        131       125     83   
    Jones       40     67        133       117     75   
    Brown       49     64        119       122     80   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a long list of functions that act on tables, a summary of which is available &lt;a href=&quot;https://www.mathworks.com/help/matlab/tables.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-different-kinds-of-brackets-recap&quot;&gt;The Different Kinds of Brackets: Recap&lt;/h2&gt;

&lt;p&gt;To recap, perhaps the two most two basic operations relating to arrays are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating the array.&lt;/li&gt;
  &lt;li&gt;Accessing elements in the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on whether we have a cell array or a standard array of a basic data type (e.g. char), we can distinguish the different behavior of each of the types of brackets: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-an-array&quot;&gt;Creating an Array&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Square brackets &lt;code&gt;[ ]&lt;/code&gt;&lt;/strong&gt;: Creates an array where all entries have the same type, e.g. double or char. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;numArray = [5, 62.7, 3];
charArray = ['a', 'b', 'c'];
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Curly brackets &lt;code&gt;{ }&lt;/code&gt;&lt;/strong&gt;: Creates a cell array. Its cells can contain any type. They can contain items of the same type or a mixture of types. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;sameTypeCells = {'Once', 'upon', 'a', 'time'}
diffTypeCells = {'Number', 17}
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that in order to create a vector, you don’t necessarily need ‘,’ between the elements. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1 4]
  ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              

&amp;gt;&amp;gt; [1,4]
ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The same is also true for cell arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; sameTypeCells = {'Once'  'upon'  'a'  'time'}
sameTypeCells = 
    'Once'    'upon'    'a'    'time'
&amp;gt;&amp;gt; whos sameTypeCells
  Name               Size            Bytes  Class    Attributes

  sameTypeCells      1x4               474  cell               
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;accessing-elements&quot;&gt;Accessing Elements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Round brackets &lt;code&gt;( )&lt;/code&gt;&lt;/strong&gt;: These can be used to access one or more elements from any type of array. The elements returned always have the same type as the array, i.e. for an array of doubles the round bracket will return doubles, for an array of cells they will return cells. For example, using the arrays created above:
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; numArray(2:3) % Second and third elements.
  ans =
 62.7000    3.0000
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; y = sameTypeCells([1, 3]) % first and third
  y = 
  'Once'    'a'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Curly brackets &lt;code&gt;{ }&lt;/code&gt;&lt;/strong&gt;: When used for accessing elements, curly brackets are specific to cell arrays. They can be used to obtain the content of a cell in its native data type, i.e. not in the form of a cell. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; sameTypeCells{2}
  ans =
  upon
  &amp;gt;&amp;gt; class(sameTypeCells{2})
  ans =
  char
  &amp;gt;&amp;gt; sameTypeCells(2)
  ans = 
  'upon'
  &amp;gt;&amp;gt; class(sameTypeCells(2))
  ans =
  cell
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;array-slicing-indexing&quot;&gt;Array slicing (indexing)&lt;/h3&gt;

&lt;p&gt;Like Fortran and R, MATLAB has powerful built-in array manipulation capabilities. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test = [ 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 ]
test =
     1     2     3     4
     1     2     4     5
     3     5     6     7
&amp;gt;&amp;gt; test(:,:)
ans =
     1     2     3     4
     1     2     4     5
     3     5     6     7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The symbol &lt;code&gt;:&lt;/code&gt; means all the elements. But, you could also specify a range to only get a slice of the array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(1:2,2:3)
ans =
     2     3
     2     4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, suppose you only wanted to get the first and the last column of the array, and the rows two and three. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(2:3,[1 4])
ans =
     1     5
     3     7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Amazing, isn’t it? You can also slice cell arrays in a similar way. However, note that you can only slice the elements of a cell array in this way, &lt;strong&gt;not the contents of the elements of a cell array&lt;/strong&gt;. To explain this further, consider the following cell array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test = { 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 }
test = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, note that slicing this cell, would give you a cell slice, not a matrix of the values, and note that to do this, you have to access the elements using &lt;code&gt;()&lt;/code&gt; instead of &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(:,:)
ans = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
&amp;gt;&amp;gt; test(2:3,[1 4])
ans = 
    [1]    [5]
    [3]    [7]
&amp;gt;&amp;gt; class(test(2:3,[1 4]))
ans =
cell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you try slicing the cell  array using &lt;code&gt;{}&lt;/code&gt;, you won’t get a slice anymore, but a MATLAB &lt;a href=&quot;http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&quot; target=&quot;_blank&quot;&gt;comma-separated list&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test{2:3,[1 4]}
ans =
     1
ans =
     3
ans =
     5
ans =
     7
&amp;gt;&amp;gt; class(test{2:3,[1 4]})
Error using class
The CLASS function must be called from a class constructor. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since slicing the cell array by &lt;code&gt;{}&lt;/code&gt; returns a comma-separated list, MATLAB’s &lt;code&gt;class()&lt;/code&gt; function gives an error, since it cannot take as input, a list of values.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/5-matlab-values-variables-types-II&quot;&gt;Lecture 5: MATLAB - values, variables, types - II&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: MATLAB - values, variables, types - I]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/4-matlab-values-variables-types-I"/>
  <id>http:/ICP2017F/lecture/4-matlab-values-variables-types-I</id>
  <published>2017-09-22T00:00:00-05:00</published>
  <updated>2017-09-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at teaching you the how to of programming, difference between programming languages and the natural languages, the type of programming errors and the meaning code debugging how to perform simple arithmetic operations on the MATLAB command line.&lt;/p&gt;

&lt;p&gt;For general information on MATLAB Data Types, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-types_data-types.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful. For this lecture, video 4.0 was currupt, and could not be uploaded here.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/1KQrVbFvP4c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;the-content-of-a-computer-program&quot;&gt;The content of a computer program&lt;/h2&gt;

&lt;p&gt;Although different programming languages look different in their syntax standards, virtually all programming languages are comprised of the following major components (instructions):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br /&gt;
  Virtually every program starts with some input data by the user, or the input data that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_coding&quot; target=&quot;_blank&quot;&gt;hard-coded&lt;/a&gt; in the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mathematical/logical operations&lt;/strong&gt;&lt;br /&gt;
  Virtually all programs involve some sort of mathematical or logical operations on the input data to the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br /&gt;
  In order to perform the above operations on data, most often (but not always) there is a need to chack if some conditions are met in the program, and then perform specific programming instructions corresponding to each of the conditions.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repetition / looping&lt;/strong&gt;&lt;br /&gt;
  Frequently it is needed to perform a specific set of operations repeatedly in the program to achieve the program’s goal.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br /&gt;
  At the end of the program, it is always needed to output the program result, either to computer screen, or to a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h2&gt;

&lt;p&gt;As it is obvious from its name, a &lt;strong&gt;bug&lt;/strong&gt; in a computer program is annoying programming error that needs fixing in order for the program to become executable &lt;strong&gt;or&lt;/strong&gt; to give out the correct answer. The process of removing program bugs is called debugging. There are basically three types of programming bugs (errors):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
A program, weather interpreted or compiled, can be successfully run only if it is &lt;em&gt;syntactically correct&lt;/em&gt;. Syntax errors are related to the structure and standard of the language, and the order by which the language &lt;strong&gt;tokens&lt;/strong&gt; are allowed to appear in the code. For example, when you write your first MATLAB &lt;strong&gt;Hello World&lt;/strong&gt; script, you would write,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp('Hello World!')
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp 'Hello World!';
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, if you type a wrong statement, MATLAB will give you a syntax error, like the following,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp(*Hello World!*)
 disp(*Hello World!*)
   ↑
Error: Unexpected MATLAB operator.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
Runtime errors or sometimes also named &lt;strong&gt;exceptions&lt;/strong&gt; are a class of programming errors that can be detected only at the time of running the code, that is, they are not syntax errors. Examples include:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;memory leaks (very common error in beginner C and C++ codes)&lt;/li&gt;
      &lt;li&gt;uninitialized memory&lt;/li&gt;
      &lt;li&gt;access request to illegal memory address of the computer&lt;/li&gt;
      &lt;li&gt;security attack vulnerabilities&lt;/li&gt;
      &lt;li&gt;buffer overflow
&lt;br /&gt;
These errors can be sometimes tricky to identify.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;semantic error&lt;/strong&gt;
&lt;br /&gt;
Unlike syntax errors that comprise of something the compiler/interpreter does not understand, semantic errors do not cause any compiler/interpreter error messages. However, the resulting compiled/interpreted code will NOT do what it is intended to do. Semantic errors are the most dangerous types of programming errors, as they do not raise any error flag by the compiler/interpreter, yet the program will not do what it is intended to do, although the code may look perfectly fine on its face. Semantic error is almost synonymous with &lt;strong&gt;logical error&lt;/strong&gt;. Dividing two integers using the regular division operator &lt;code&gt;/&lt;/code&gt; in MATLAB while expecting the result to be integer, would be a semantic error. This is because in MATLAB (unlike Fortran, for example), the regular division operator always outputs the result as real (float).&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/7

ans =

    0.2857

&amp;gt;&amp;gt; class(ans)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;methods-of-running-a-matlab-program&quot;&gt;Methods of running a MATLAB program&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Writing MATLAB script on the MATLAB interpreter’s command prompt:&lt;/strong&gt;&lt;br /&gt;
Now, as you may have noticed, in the above example, I used MATLAB command line to code my first simple MATLAB script. This is one of the simplest and quickest method of MATLAB scripting and is actually very useful for testing small simple MATLAB ideas and code snippets on-the-fly.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code written in a MATLAB &lt;code&gt;.m&lt;/code&gt; file from MATLAB command prompt:&lt;/strong&gt;&lt;br /&gt;
As the program size grows, it wiser to put all of your MATLAB script into a single &lt;code&gt;.m&lt;/code&gt; file, and then let the MATLAB interpreter run (i.e., interpret) your entire file all at once. To save the above simple “Hello World” MATLAB code in a file and run it, open a new m-file in MATLAB editor, then paste the code in the file and save it in MATLAB’s current working directory as &lt;code&gt;hello.m&lt;/code&gt;. Then you can either call your program on the command line as the following,
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or, simply press &lt;code&gt;F5&lt;/code&gt; button on your keyboard to run it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running your MATLAB script file from the Bash/cmd command line&lt;/strong&gt;: You can also run your codes directly from the Windows cmd or Linux Bash command lines by simply calling MATLAB, followed by a list of optional flags, followed by the name and path to your MATLAB script. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;matlab -nodisplay -nodesktop -r &quot;run /home/amir/matlab/hello.m&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code as an standalone application by compiling it&lt;/strong&gt;: You can also compile your MATLAB script into a binary file (machine language), which is then standalone and executable independently of MATLAB. This is however out of the scope of our course, but you can read more about it &lt;a href=&quot;https://www.mathworks.com/videos/getting-started-standalone-applications-using-matlab-compiler-100088.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;matlab-interpreter-as-a-simple-calculator&quot;&gt;MATLAB interpreter as a simple calculator&lt;/h2&gt;

&lt;p&gt;One of the greatest advantages of MATLAB is that it can be used as a simple calculator and program interpreter on-the-fly, just like Python, Mathematica, R, and other scripting languages. In the following, you will see why and how.&lt;/p&gt;

&lt;h3 id=&quot;values-and-their-types-in-matlab&quot;&gt;Values and their types in MATLAB&lt;/h3&gt;

&lt;p&gt;Values are one of the most fundamental entities in programming. Like any other language, a value in MATLAB can be of  different types, most importantly &lt;strong&gt;Numeric&lt;/strong&gt; (plain integer, long integer, float (real number), complex), &lt;strong&gt;Boolean&lt;/strong&gt; (logical) which is a subtype of Numeric, or &lt;strong&gt;char&lt;/strong&gt; (string), and many more. Each value type in MATLAB is a class. We will get to what classes are, at the end of the semester. For now, all you need to know is that there 6 main data types (in addition to &lt;a href=&quot;https://www.mathworks.com/help/matlab/function-handles.html&quot; target=&quot;_blank&quot;&gt;function handles&lt;/a&gt;).&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/4/fundamental_classes.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Main MATLAB value types (classes).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;numeric-and-logical-values-in-matlab&quot;&gt;Numeric and logical values in MATLAB&lt;/h4&gt;

&lt;p&gt;The following are a few example arithmetic operations with values in MATLAB. You can perform very simple arithmetic on the MATLAB command line, and the result immediately by pressing &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 + 5 % Just typing some comment on the MATLAB command line. Anything after % is a comment and will be ignored.

ans =

     7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 - 7 % difference

ans =

    -5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 * 7 % product

ans =

    14
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true % logical true value

ans =

     1

&amp;gt;&amp;gt; false % logical false value

ans =

     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;obtaining-the-type-ie-class-of-a-value&quot;&gt;Obtaining the type (i.e. class) of a value&lt;/h4&gt;

&lt;p&gt;You can use the MATLAB’s built-in function &lt;code&gt;class&lt;/code&gt; to get the type of a value in MATLAB (Of course, this is somewhat obvious and redundant for a value as we already readily know the type of a value).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(2*7) % class function gives you the type of the input object to function &quot;class&quot;

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class('This is a MATLAB string (char)') % a char value in MATLAB

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
 class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
       ↑
Error: The input character is not valid in MATLAB statements or expressions.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(class(1))

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(true)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(false)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vector-and-matrix-values&quot;&gt;vector and matrix values&lt;/h4&gt;

&lt;p&gt;Vectors and matrices are used to represent sets of values, all of which have the same type. A matrix can be visualized as a table of values. The dimensions of a matrix are $rows \times cols$, where $rows$ is the number of rows and $cols$ is the number of columns of the matrix. A &lt;strong&gt;vector&lt;/strong&gt; in MATLAB is equivalent to a one-dimensional array or matrix.&lt;/p&gt;

&lt;h5 id=&quot;creating-row-wise-and-column-wise-vectors&quot;&gt;Creating row-wise and column-wise vectors&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;,&lt;/code&gt; or space to separate the elements of a row-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1 2 3 4] % a space-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1 2 3 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1, 2, 3, 4] % a comma-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1, 2, 3, 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate the elements of a column-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1; 2; 3; 4] % a column vector

ans =

     1
     2
     3
     4

&amp;gt;&amp;gt; class([1; 2; 3; 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;creating-matrix-values&quot;&gt;Creating matrix values&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate a row of matrix from the next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1,2,3,4;5,6,7,8;9,10,11,12] % a 3 by 4 matrix

ans =

     1     2     3     4
     5     6     7     8
     9    10    11    12
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cells-and-tables&quot;&gt;Cells and tables&lt;/h4&gt;

&lt;p&gt;Matrices and vectors can only store numbers in MATLAB. If one needs a more general array representation for a list of strings for example, then one has to use cells or tables.&lt;/p&gt;

&lt;h5 id=&quot;cell-array-values&quot;&gt;Cell array values&lt;/h5&gt;

&lt;p&gt;Cell arrays, are array entities that can contain data of varying types and sizes. A &lt;strong&gt;cell array&lt;/strong&gt; is a data type with indexed data containers called &lt;strong&gt;cells&lt;/strong&gt;, where each cell can contain any type of data. Cell arrays commonly contain either lists of text strings, combinations of text and numbers, or numeric arrays of different sizes. Refer to sets of cells by enclosing indices in smooth parentheses, &lt;code&gt;()&lt;/code&gt;. Access the contents of cells by indexing with curly braces, &lt;code&gt;{}&lt;/code&gt;. Also, to define a cell, use &lt;code&gt;{}&lt;/code&gt; like the following notation,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', ' ', 'World!'} % a cell array of strings

ans = 

    'Hi'    ' '    'World!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class({'Hi', ' ', 'World!'})

ans =

cell
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', 1, true, 'World!'}

ans = 

    'Hi'    [1]    [1]    'World!'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;table-values&quot;&gt;Table values&lt;/h5&gt;

&lt;p&gt;MATLAB tables are arrays in tabular form whose named columns can have different types. Table is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size with the one restriction that each variable must have the same number of rows.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/4/table.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example MATLAB table.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Later on, we learn more about Tables and Cells in MATLAB, once we introduce MATLAB variables.&lt;/p&gt;

&lt;h4 id=&quot;value-coercion-in-matlab&quot;&gt;Value coercion in MATLAB&lt;/h4&gt;

&lt;p&gt;Value coercion is the &lt;strong&gt;implicit&lt;/strong&gt; process by which the MATLAB interpreter/compiler automatically converts a value of one type into a value of another type when that second type is required by the surrounding context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(int32(1.0)) % int32 gives a 32-bit (4-byte) integer.
ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(2.0) * int32(1.0) % Note that the product of two integers, is integer.

ans =

           2

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) * 2.5 % Note that the product of float and integer, is coerced into an integer!

ans =

           3

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) / 2.5 % Note that the division of float and integer, is coerced into an integer.

ans =

           0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2.0 / 7 % floating point division with float result

ans =

    0.2857
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + 1 % logical and double are coerced into double

ans =

     2

&amp;gt;&amp;gt; class(true + 1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But note that,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + int32(1) % you cannot combine logical with integer
Error using  + 
Integers can only be combined with integers of the same class, or scalar doubles.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + false

ans =

     1

&amp;gt;&amp;gt; true * false

ans =

     0

&amp;gt;&amp;gt; true / false
Undefined operator '/' for input arguments of type 'logical'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    As you saw above, unlike other languages, such as Python, integer value has precedence over float, that is, the result of the calculation is coerced into an integer.
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    I recommend you to always explicitly write the type of each value in your calculations or your MATLAB scripts. For example, denote all floats by adding a decimal point &lt;code&gt;.&lt;/code&gt; to each float (real) value.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;some-further-useful-matlab-commands&quot;&gt;Some further useful MATLAB commands&lt;/h4&gt;

&lt;p&gt;MATLAB has a built-in function called &lt;code&gt;format&lt;/code&gt; that can modify the output style of MATLAB on the command line. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/5

ans =

    0.4000

&amp;gt;&amp;gt; format long
&amp;gt;&amp;gt; 2/5

ans =

   0.400000000000000

&amp;gt;&amp;gt; format short
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; 2/5
ans =
    0.4000
&amp;gt;&amp;gt; format loose
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here is a complete list of options that format can take,&lt;/p&gt;
&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 2. A list of MATLAB &lt;code&gt;format&lt;/code&gt; options.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Style&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Result&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Example&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;short (default)&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;long&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short scientific notation with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long scientific notation with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format or scientific notation, whichever is more compact, with a total of 5 digits.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format or scientific notation, whichever is more compact, with a total of 15 digits for double values, and 7 digits for singlevalues.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short engineering notation (exponent is a multiple of 3) with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long engineering notation (exponent is a multiple of 3) with 15 significant digits.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;+&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Positive/Negative format with +, -, and blank characters displayed for positive, negative, and zero elements.&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;bank&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Currency format with 2 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Hexadecimal representation of a binary double-precision number.&lt;/td&gt;&lt;td&gt;400921fb54442d18&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;rat&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Ratio of small integers.&lt;/td&gt;&lt;td&gt;355/113&lt;/td&gt;&lt;/tr&gt;


&lt;br /&gt;&lt;br /&gt;

    
&lt;/tbody&gt;&lt;/table&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/4-matlab-values-variables-types-I&quot;&gt;Lecture 4: MATLAB - values, variables, types - I&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: MATLAB for beginners]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/3-matlab-for-beginners"/>
  <id>http:/ICP2017F/lecture/3-matlab-for-beginners</id>
  <published>2017-09-20T00:00:00-05:00</published>
  <updated>2017-09-20T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Goals: This lecture aims at providing an introduction to MATLAB programming for beginners, how to install it, different components of the Graphical Unit Interface of MATLAB, as well as how to perform simple arithmetic operations in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/IrEdypnsCyY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;matlab-a-brief-history&quot;&gt;MATLAB: a brief history&lt;/h2&gt;

&lt;p&gt;MATLAB was developed in the mid 1980’, by the collaborative works of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cleve_Moler&quot; target=&quot;_blank&quot;&gt;Cleve Moler&lt;/a&gt;, a PhD graduate of Stanford University, and &lt;a href=&quot;https://en.wikipedia.org/wiki/John_N._Little&quot; target=&quot;_blank&quot;&gt;John Little&lt;/a&gt;, a graudate of MIT. Together they co-founded a private company named &lt;a href=&quot;https://en.wikipedia.org/wiki/MathWorks&quot; target=&quot;_blank&quot;&gt;MathWorks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The name of the language and software they developed, &lt;a href=&quot;https://en.wikipedia.org/wiki/MATLAB&quot; target=&quot;_blank&quot;&gt;MATLAB&lt;/a&gt; is an attribution to the original purpose of the software, that is, to serve as a &lt;strong&gt;mat&lt;/strong&gt;rix &lt;strong&gt;lab&lt;/strong&gt;oratory. Cleve Moler was among the developers of the popular Fortran libraries &lt;a href=&quot;https://en.wikipedia.org/wiki/EISPACK&quot; target=&quot;_blank&quot;&gt;EISPACK&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/LINPACK&quot; target=&quot;_blank&quot;&gt;LINPACK&lt;/a&gt;. He wanted to provide his students with a higher-level environment, so that they could use these high-performance Fortran libraries without the need to learn Fortran.&lt;/p&gt;

&lt;p&gt;Since MATLAB was developed by a scientist for scientists, its structure and syntax has more resemblance to the popular programming language of scientists, Fortran, than to any other language. You will soon notice this similarity when we get to learn modern Fortran later on in this course.&lt;/p&gt;

&lt;p&gt;An informative historical review of MATLAB by its own inventor is &lt;a href=&quot;https://www.mathworks.com/videos/evolution-of-matlab-93125.html&quot; target=&quot;_blank&quot;&gt;available to watch on MathWork website&lt;/a&gt;. A lower quality of the same video can be accessed on youtube, which I embed here for you:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fa-sUaKv56A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;matlab-why-do-you-need-to-learn-it&quot;&gt;MATLAB: Why do you need to learn it?&lt;/h2&gt;

&lt;p&gt;For the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It targets engineers as well as natural and medical scientists as its main audience, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has excellent &lt;em&gt;native&lt;/em&gt; array/matrix representation and manipulation tools, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has extensive sets of high-level commands for numerical computing, like Fortran.&lt;/li&gt;
  &lt;li&gt;It is an interpreted language that makes it really easy to use anytime, unlike C, C++, Fortran which are compiled languages.&lt;/li&gt;
  &lt;li&gt;It has excellent set of graphical tools for 2D and 3D plotting (in fact other languages like Python have tried to copy from and reverse-engineer the graphical tools and commands available in MATLAB).&lt;/li&gt;
  &lt;li&gt;It has one of the largest user-base (over 2,000,000 users) in all scientific communities.&lt;/li&gt;
  &lt;li&gt;There is an extensive list of numerical libraries written in MATLAB over the past decades by all those science/engineering -oriented users.&lt;/li&gt;
  &lt;li&gt;It has excellent manual, and user guide, with extensive illustrative examples. Basically, you might not even need to take a MATLAB class, if you could closely and carefully follow MATLAB’s user guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-caveats&quot;&gt;MATLAB caveats&lt;/h2&gt;

&lt;p&gt;Here is a personal list of MATLAB caveats that I can think of, at the moment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is not free.&lt;/li&gt;
  &lt;li&gt;It is slow compared to compiled programming languages. See for example, the following performance comparisons and tests in &lt;a href=&quot;https://modelingguru.nasa.gov/docs/DOC-1762&quot; target=&quot;_blank&quot;&gt;NASA modeling guru web page&lt;/a&gt;. As you can see there, the &lt;strong&gt;performance of MATLAB script can be significantly lower than compiled languages such as Fortran and C&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you have already coded in a fully object-oriented programming (OOP) language, in particular Python, you will find some oddities in MATLAB’s OOP implementation. You may feel this when, for example, you are working with &lt;a href=&quot;xx&quot; target=&quot;_blank&quot;&gt;cell arrays&lt;/a&gt; in MATLAB. We will see later on, what cell arrays are.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-features&quot;&gt;MATLAB features&lt;/h2&gt;

&lt;p&gt;MATLAB has the following features and attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a fourth-generation, high-level programming language.&lt;/strong&gt; Remember from our &lt;a href=&quot;http:/ICP2017F/lecture/2-programming-history&quot; target=&quot;_blank&quot;&gt;second lecture&lt;/a&gt;, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C++, and C are considered high, medium, and low -level programming languages respectively.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an array-based programming language&lt;/strong&gt;, meaning that it is designed to be with the goal of facilitating array manipulation for scientists and engineers.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a multi-paradigm programming language&lt;/strong&gt;. MATLAB allows the programmer to use the following major programming paradigms in their codes:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   Later on, we will get to each of these programming paradigms in MATLAB.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an interpreted language&lt;/strong&gt;. A programming language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.&lt;br /&gt;
&lt;br /&gt;MATLAB is an interpreted language, meaning that, as soon as you type a MATLAB command on the MATLAB’s command-line and press enter, the MATLAB interpreter executes the statement.  MATLAB programs can also be compiled using &lt;a href=&quot;https://www.mathworks.com/products/compiler.html&quot; target=&quot;_blank&quot;&gt;MATLAB Compiler&lt;/a&gt;, to create standalone applications to be executed later when desired.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The extension for human-readable MATLAB source code file is &lt;code&gt;.m&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-useful-resources-for-matlab&quot;&gt;Some useful resources for MATLAB&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/matlabcentral/&quot; target=&quot;_blank&quot;&gt;MATLAB Central&lt;/a&gt;: A repository of many codes, libraries written in MATLAB, as well as many MATLAB related questions with answers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mathworks.com/matlabcentral/newsreader/&quot; target=&quot;_blank&quot;&gt;comp.soft-sys.matlab&lt;/a&gt;: MATLAB’s newsletter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mathworks.com/moler&quot; target=&quot;_blank&quot;&gt;http://www.mathworks.com/moler&lt;/a&gt;: The original MATLAB developer’s page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/videos/search.html?q=&amp;amp;page=1&quot; target=&quot;_blank&quot;&gt;MATLAB educational videos&lt;/a&gt;: A long search-able list of educational MATLAB videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-installation&quot;&gt;MATLAB installation&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, you can download and install a specific version of MATLAB for your personal computer. MATLAB is available to all students enrolled at UT Austin for free. It can be downloaded from &lt;a href=&quot;http://www.engr.utexas.edu/itg/products/8017-matlab&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-replicas-of-matlab&quot;&gt;Alternative replicas of MATLAB&lt;/h3&gt;

&lt;p&gt;Since MATLAB is not free, the GNU organization has started a project called &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Octave&quot; target=&quot;_blank&quot;&gt;GNU Octave&lt;/a&gt; which is a reverse-engineering of MATLAB language and environment, hence mostly compatible with it, but &lt;strong&gt;at no cost&lt;/strong&gt;!. You can download it from &lt;a href=&quot;https://www.gnu.org/software/octave/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. GNU Octave is a free open source software (FOSS) package which is &lt;em&gt;mostly compatible&lt;/em&gt; with MATLAB. It provides a very similar command line interpreter interface, and implements most of the functionality as the commercial MATLAB product. Nevertheless, there are subtle differences which anyone attempting to switch to GNU Octave or to write MATLAB/GNU Octave-compatible scripts must appreciate. Octave was conceived in 1988 and has been under development since 1992, and over the years has made a great deal of progress, especially in the area of graphics and plotting.&lt;/p&gt;

&lt;h3 id=&quot;matlab-script-editors&quot;&gt;MATLAB script editors&lt;/h3&gt;

&lt;p&gt;I highly recommend you to use MATLAB’s own IDE for MATLAB scripting since it has fantastic features such as automatic debugging, indentation and syntax highlight. However, once you become proficient in MATLAB scripting, you may realize that the text-editing capabilities of MATLAB IDE are not that great compared to highly popular general-purpose text editors. In that case, I recommend you to use,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot;&gt;Sublime&lt;/a&gt;  (available Windows, OS X, Linux)&lt;br /&gt;
Sublime is a sophisticated text editor for codes in many different languages, including MATLAB, C, C++, Fortran, etc. It has many advanced tools for code editing and syntax highlighting.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notepad-plus-plus.org/&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt;  (available only on Windows)&lt;br /&gt;
Notepad++ is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code syntax accordingly. However, you should keep in mind that it is not specifically designed for MATLAB. If you are professional multi-language programmer, you will soon find the hidden gems in Notepad++, that are not available in any other editor, including MATLAB’s own editor.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;which-matlab-version-should-i-use&quot;&gt;Which MATLAB version should I use?&lt;/h3&gt;

&lt;p&gt;Always try to use the latest version if possible, since new features are added to MATLAB every year.&lt;/p&gt;

&lt;h3 id=&quot;using-matlab-online-in-your-web-browser&quot;&gt;Using MATLAB online, in your web browser&lt;/h3&gt;

&lt;p&gt;Since as a UT student, you have a campus-wide MATLAB licence, you can login to your account to use MATLAB in your browser, on a remote server. For instructions on how to use MATLAB on-line, click &lt;a href=&quot;https://www.mathworks.com/products/matlab-online.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;matlab-environment&quot;&gt;MATLAB environment&lt;/h2&gt;

&lt;p&gt;As soon as you open MATLAB, you will likely encounter a environment like the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/3/matlab.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A snapshot of MATLAB environment.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main compartments in MATLAB environment are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;command window&lt;/strong&gt;: where you can type single or multiple line commands.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;script editor&lt;/strong&gt;: which is where you can create new or open/edit existing MATLAB files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;address bar&lt;/strong&gt;: indicating the &lt;strong&gt;current working directory&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;folder tree window&lt;/strong&gt;: showing all files in the current working directory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;workspace window&lt;/strong&gt;: which shows all the global variables currently defined in MATLAB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;useful-matlab-commands&quot;&gt;Useful MATLAB commands&lt;/h2&gt;

&lt;p&gt;The following are some useful MATLAB commands  that allow you to get help on the command-line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;demo&lt;/code&gt; will load MATLAB examples in the Help Browser, illustrating some features of MATLAB.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help &amp;lt;keyword&amp;gt;&lt;/code&gt; will explain any function. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help sin
sin    Sine of argument in radians.
 sin(X) is the sine of the elements of X.

 See also asin, sind.

 Reference page for sin
 Other functions named sin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help help&lt;/code&gt;  will explain how MATLAB help works.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lookfor &amp;lt;keyword&amp;gt;&lt;/code&gt; searches through MATLAB help for a specific word or phrase. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; lookfor gaussian
hwv                            - Create a Hull-White/Vasicek mean-reverting Gaussian diffusion model
xreggpr                        - xreggpm Gaussian Process model constructor
gmdistribution                 - Gaussian mixture distribution class.
awgn                           - Add white Gaussian noise to a signal.
bigaussianir                   - Bi-Gaussian Doppler filter impulse response.
gaussianir                     - Gaussian Doppler filter impulse response.
intfiltgaussian_intfactor      - Support function used by @channel package for
wgn                            - Generate white Gaussian noise.
commblkgaussfilt               - Gaussian filter block helper function.
commblkgaussiansrc2            - Mask function for Gaussian Noise Generator block
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;doc &amp;lt;keyword&amp;gt;&lt;/code&gt; will bring up a documentation page in the Help Browser for the given keyword.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dir &amp;lt;path&amp;gt;&lt;/code&gt; lists the contents of the given path.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dir
.                lcdata.xml       m3iregistry      mcc.bat          mexext.bat       mw_mpiexec.bat   win64            
..               lcdata.xsd       matlab.exe       mex.bat          mexsetup.pm      registry         worker.bat       
deploytool.bat   lcdata_utf8.xml  mbuild.bat       mex.pl           mexutils.pm      util             
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; outputs the current working directory.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; pwd
ans =
C:\Program Files\MATLAB\R2016a\bin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;quit&lt;/code&gt; quits MATLAB by closing the application.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;diary('filename')&lt;/code&gt; (or &lt;code&gt;diary filename&lt;/code&gt;) saves  all subsequent keyboard interactions with MATLAB Command Window to the file &lt;code&gt;filename&lt;/code&gt;. &lt;code&gt;diary off&lt;/code&gt; suspends the diary. &lt;code&gt;diary on&lt;/code&gt; resumes diary mode using the current filename, or the default filename diary if none has yet been specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments-in-matlab-scripts&quot;&gt;Comments in MATLAB scripts&lt;/h2&gt;

&lt;p&gt;Comment lines in MATLAB begin with percent character &lt;code&gt;%&lt;/code&gt;. Anything after &lt;code&gt;%&lt;/code&gt; is ignored by MATLAB interpreter. The &lt;code&gt;%&lt;/code&gt; character itself only tells the interpreter to ignore the remainder of the same line. In the MATLAB Editor, &lt;font color=&quot;#00e600&quot;&gt;commented areas are printed in green by default&lt;/font&gt;. There are two useful keyboard shortcuts for adding and removing chunks of comments. Select the code you wish to comment or uncomment, and then press &lt;code&gt;Ctrl-R&lt;/code&gt; to place one &lt;code&gt;%&lt;/code&gt; symbol at the beginning of each line and `Ctrl-T to do the opposite.&lt;/p&gt;

&lt;p&gt;MATLAB also supports multi-line comments, akin to &lt;code&gt;/* ... */&lt;/code&gt; in languages like C or C++, via the &lt;code&gt;%{ %}&lt;/code&gt; delimiters. But there is a small and important difference. In MATLAB, the &lt;strong&gt;lines containing &lt;code&gt;%{&lt;/code&gt; or &lt;code&gt;%}&lt;/code&gt; should not contain any other text (except white spaces)&lt;/strong&gt;. Otherwise the multi-line comment would not work as you wish. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{ x = 1;
y=2;%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You notice that in the above, &lt;code&gt;y=2;&lt;/code&gt; is not commented. The correct syntax is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{
x = 1;
y=2;
%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Comments are useful for explaining what function a certain piece of code performs especially if the code relies on implicit or subtle assumptions or otherwise perform subtle actions. Doing this is a good idea both for yourself and for others who try to read your code. It is highly recommended to include a block of comments at the beginning of your codes explaining what the your MATLAB script or function does does and how to use it. MATLAB will output the leading comments that appear at the beginning of an &lt;code&gt;.m&lt;/code&gt; file, when you type,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help &amp;lt;my function name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
All of MATLAB’s built-in functions written in MATLAB are documented this way.&lt;/p&gt;

&lt;h2 id=&quot;matlabs-search-path&quot;&gt;MATLAB’s search path&lt;/h2&gt;

&lt;p&gt;MATLAB has a search path and strategy that is used to find variables, and MATLAB scripts. MATLAB’s current &lt;strong&gt;working directory&lt;/strong&gt; is always displayed in the MATLAB address bar. When you enter a name in MATLAB’s command prompt, the MATLAB interpreter attemps to find an entity with that name in the following order:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First, it looks for a variable of the same name in MATLAB’s workspace and if it exists, MATLAB displays the value of the variable.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB, looks for a M-file (a MATLAB script) in the working directory of MATLAB.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB looks for an M-file in MATLAB’s list of directories (the search path) to find the file. If no entity exists with the given name, then MATLAB gives an error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/3-matlab-for-beginners&quot;&gt;Lecture 3: MATLAB for beginners&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 20, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Solutions - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/1-solutions-version-control-system"/>
  <id>http:/ICP2017F/quiz/1-solutions-version-control-system</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-version-control-system.html&quot; target=&quot;_blank&quot;&gt;Quiz 1: Problems - Version control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;

&lt;!--
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz2.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer: B, C&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help -a
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/1-solutions-version-control-system&quot;&gt;Quiz 1: Solutions - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Problems - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/1-problems-version-control-system"/>
  <id>http:/ICP2017F/quiz/1-problems-version-control-system</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Git version control system. Don’t forget to push your answers to your remote repository by the end of quiz time.&lt;br /&gt;
Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add --u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/1-problems-version-control-system&quot;&gt;Quiz 1: Problems - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: Programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/2-programming-history"/>
  <id>http:/ICP2017F/lecture/2-programming-history</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief history of the development of computers and computer programming languages and their mutual interaction with rapid developments in natural sciences in the 20th century.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/oA0VoFGBlwU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h3&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-rise-of-the-machines&quot;&gt;The rise of the machines&lt;/h3&gt;

&lt;p&gt;Immediately after the first world-war and during the second world-war, many fields of science and engineering witnessed rapid growth. In particular, two fields of mathematical and physical sciences, &lt;strong&gt;mathematical programming&lt;/strong&gt; (a terminology used commonly in place of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot;&gt;mathematical optimization&lt;/a&gt;) (not to be confused with computer programming!) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo methods&lt;/a&gt; witnessed rapid exponential growth in both theory and practical applications. Parallel to progresses in natural sciences, a new field of science and technology, &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_computer_science&quot; target=&quot;_blank&quot;&gt;computer science&lt;/a&gt;, began to rise during the years of world-war-II, partly in response to the needs of war, but mostly in response to the exponential growth of natural sciences and engineering in the post-world-war-II era.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/wordFreq.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A word-usage relative frequency plot, illustrating the exponential growth of computer technology in the mid 20th century, as well as developments in the fields of deterministic and stochastic optimization techniques, which ultimately led to the emergence of &lt;a href=&quot;https://www.nibib.nih.gov/science-education/science-topics/computational-modeling&quot; target=&quot;_blank&quot;&gt;computational modeling&lt;/a&gt; as the third pillar of science. Advances in the computational methods and technology also led to the gradual popularity of Bayesian techniques in mathematical modeling toward the end of the 20th century, and the emergence of an important of subfield of computational modeling, now known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_quantification&quot; target=&quot;_blank&quot;&gt;Uncertainty Quantification&lt;/a&gt;. Note that the positive-slope linear behavior on this semi-logarithmic plot indicates a exponential growth. (Data is adopted from &lt;a href=&quot;https://books.google.com/ngrams&quot; target=&quot;_blank&quot;&gt;Google Ngrams&lt;/a&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The history of computer programming probably begins with the development of the first computer, &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt; (&lt;em&gt;Electronic Numerical Integrator And Computer&lt;/em&gt;), one of the earliest electronic general-purpose computers made.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/computer.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A diagram representing the basic underlying structure of every digital device, most importantly, desktop computers.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;how-to-express-algorithms-in-machine-language&quot;&gt;How to express algorithms in machine language?&lt;/h3&gt;

&lt;p&gt;To answer this question, we have to first understand that all human knowledge can be divided into two classes: declarative and imperative (procedural). As implicitly described by their names, &lt;strong&gt;declarative knowledge&lt;/strong&gt; involves statements of fact. For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J is the tenth letter of the alphabet, or,&lt;/li&gt;
  &lt;li&gt;Washington is the capital of USA, or,&lt;/li&gt;
  &lt;li&gt;$x$ is square-root of $y$ only and only if $x*x=y$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;are all declarative statements. By contrast, &lt;strong&gt;imperative knowledge&lt;/strong&gt; is about how to accomplish something, or basically, is a recipe on how to do something, known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithm&quot; target=&quot;_blank&quot;&gt;algorithm&lt;/a&gt; in scientific terminology. In order for a computer to achieve a specific computational goal, it needs to be given a set of tasks, collectively called algorithm. For example, most calculators contain a rather complex &lt;a href=&quot;https://www.sistenix.com/sqrt.html&quot; target=&quot;_blank&quot;&gt;algorithm for calculating the square root of a given input number&lt;/a&gt;, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/sqrt.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As seen, the algorithm has a &lt;strong&gt;start&lt;/strong&gt;, a &lt;strong&gt;flow control&lt;/strong&gt;, and a &lt;strong&gt;stop&lt;/strong&gt;. These are the basic elements of any algorithm. In the early 20th century, the algorithms had to be physically and mechanically implemented in computers. Therefore, the earliest computing machines were often called &lt;strong&gt;fixed-program computers&lt;/strong&gt;. This means that they could only perform the algorithms for which they had been physically wired and built. An example of such machines is &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt;. &lt;strong&gt;Reprogramming&lt;/strong&gt; such computers, when possible at all, is a laborious process, starting with flowcharts and paper notes, followed by detailed engineering designs, and then the often-arduous process of physically rewiring and rebuilding the machine. For example, it could take almost a month to set up a program on ENIAC and get it working.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/eniac.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        Portraits of The three giants behind the first US-made computer ENIAC and first computer simulations in history.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Even nowadays, some very simple computers still use this design, either for simplicity or training purposes. For example, a desk calculator (in principle) is a fixed program computer. It can do basic mathematics, but it cannot be used as a word processor or a gaming console. Changing the program of a fixed-program machine requires rewiring, restructuring, or redesigning the machine. The earliest computers were not so much “programmed” as they were “designed”.&lt;/p&gt;

&lt;p&gt;It took a while, until the early computer scientists noticed that they could design computers in such a way that the algorithm itself could be treated as part of the input data to the computer. In other words, one could build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_machine&quot; target=&quot;_blank&quot;&gt;general-purpose machine&lt;/a&gt;, that could take any computer algorithm as input and given its own basic set of operations (basically, if-conditional, goto, and memory access) could perform the algorithm. Such machines, which are nowadays in everyday use, are called &lt;strong&gt;stored-program computers&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;programming-language-generations&quot;&gt;Programming language generations&lt;/h3&gt;

&lt;p&gt;Initially computers had to be programmed by what is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine language&lt;/a&gt;, a set of instructions for the Central Processing Unit (CPU)  of the computer, comprising a long sequence of binary digital zeros and ones. Any interaction with computer hardware, even nowadays, has to be first converted to machine code in order to become comprehensible by the computer hardware. The coding in this language is however, very tedious and time consuming, and non-portable. As a result, immediately after the development of the first generation of computers, the first generation of programming languages also came to exist, most notably, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly language&lt;/a&gt; in the late 1940s. Many more programming languages have been since developed that provide higher and higher levels of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot; target=&quot;_blank&quot;&gt;programming abstraction&lt;/a&gt; by hiding more complexities of the machine code interaction with machine hardware from the front-end computer software and users.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/proglang.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/proglang.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;&lt;!--
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A flowchart illustrating .
    &lt;/figcaption&gt;--&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Depending on their levels of abstraction, programming languages are classified into different generations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/First-generation_programming_language&quot; target=&quot;_blank&quot;&gt;First generation&lt;/a&gt; languages, or machine languages, are the lowest-level computer programming languages, which provide no abstraction in their interactions with computer hardware. These languages directly interact with computer hardware, and so there is no need for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret these languages for the hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-generation_programming_language&quot; target=&quot;_blank&quot;&gt;second generation&lt;/a&gt; languages, are at a higher level of abstraction from the machine hardware, meaning that they require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret the code for the computer hardware. The most prominent and, to my understanding, the sole language of this generation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly&lt;/a&gt;, which is the closest-possible compiled programming language to computer hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Third-generation_programming_language&quot; target=&quot;_blank&quot;&gt;third generation&lt;/a&gt; languages, or &lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_programming_language&quot; target=&quot;_blank&quot;&gt;high-level&lt;/a&gt; programming languages provide an even higher abstraction level than the second-generation languages. Third-generation languages make programming almost platform-independent, meaning that the content of the code does not depend directly on the current hardware being used. This helps the programmer to focus more on the problem of interest, rather than spending time to understand details of the specific computer and hardware being currently used. Examples of third-generation programming languages are: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/ALGOL&quot; target=&quot;_blank&quot;&gt;ALGOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/BASIC&quot; target=&quot;_blank&quot;&gt;BASIC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal_(programming_language)&quot; target=&quot;_blank&quot;&gt;Pascal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth generation:&lt;/strong&gt; The definition for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourth-generation_programming_language&quot; target=&quot;_blank&quot;&gt;fourth generation&lt;/a&gt; and beyond is not very clear, however, it is generally as the set of languages that provide an even higher level of abstraction from the hardware and proximity to the user (programmer). Some prominent examples of this category include &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; target=&quot;_blank&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)&quot; target=&quot;_blank&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/IDL_(programming_language)&quot; target=&quot;_blank&quot;&gt;IDL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/R_programming_language&quot; target=&quot;_blank&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_(programming_language)&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/PLchart.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/PLchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A diagram tracing the history of computer languages throughout the history of computer science.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-paradigms&quot;&gt;Programming language paradigms&lt;/h3&gt;

&lt;p&gt;Programming paradigms are a way to classify programming languages based on their features. There are several programming paradigms such as,
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot;&gt;structured programming&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt; (allows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt; (disallows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt; (groups code into functions and subroutines),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt; (groups code together with the data on which the code works).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/progEvol.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/progEvol.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the evolution of programming techniques.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Among all however, the last two programming paradigms are the most important and more widely used than the others. Historically all programming languages were &lt;strong&gt;imperative (or, procedural)&lt;/strong&gt; since this paradigm is more intuitive to human mind, and indeed, what the computer hardware does. These languages are basically human-readable abstractions of the machine code.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/imperative.gif&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/imperative.gif&quot; width=&quot;500&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the structure of imperative (procedural) programming.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Imperative programs have a structure like the figure above, with the following components and rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a main procedure that determines the control flow for the program,&lt;/li&gt;
  &lt;li&gt;a set of functions that are called to perform certain tasks during program execution,&lt;/li&gt;
  &lt;li&gt;the main and sub-main procedures as a hierarchical structure,&lt;/li&gt;
  &lt;li&gt;the source code for each procedure is compiled and linked with compilation of other source codes to produce a complete executable program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few decades after the first imperative programming languages were developed, computer scientists came up with an alternative programming paradigm that resulted in higher levels of abstraction from the machine code, however, could also significantly reduce the cost of code development and increase the amount of code re-usability, from one program to the next. This programming paradigm is called &lt;strong&gt;object-oriented programming (OOP)&lt;/strong&gt;, since it looks at everything in the code, as an &lt;strong&gt;object&lt;/strong&gt;. Each object then, has a &lt;strong&gt;type&lt;/strong&gt;, or, &lt;strong&gt;class&lt;/strong&gt;, to which it belongs. For example, one can define a class describing a car in general, which has some &lt;strong&gt;attributes&lt;/strong&gt; that specify its model, make, year, owner, … , as well as some &lt;em&gt;*methods&lt;/em&gt; that can act on these attributes and make the car do something,&lt;/p&gt;

&lt;figure&gt;
	&lt;!--
    &lt;a href=&quot;http:/ICP2017F/lecture/2/oop_car.png&quot; target=&quot;_blank&quot;&gt;
    &lt;/a&gt;
    --&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/oop_car.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A example of a OOP class describing a car, with its attributes and methods.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-purpose&quot;&gt;Programming language purpose&lt;/h3&gt;

&lt;p&gt;Some programming languages have been designed to target a specific market. For example, in the mid 20th century, there were two prominent languages &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt; for numerical and scientific computation, and &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt; for business problems. In the field of scientific computation, Fortran (FORmula TRANslation), first released in 1956, is undoubtedly the most influential programming language of all human history and the oldest high-level programming language that is still in active everyday use. Among all programming languages, Fortran is the only one that specifically targets scientists and engineers as its audience. Here is a history of Fortran by its original developers:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/KohboWwrsXg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And there is of course, not doubt about the importance of general-purpose programming language &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt; and its descendant &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;. Specifically, C++ grew out of interest is developing a language that is universal, that is, can be used for any purpose (business, OS development, scientific computation), that could also reduce the cost of code maintenance and software development. In the beginning, C++ codes were rather slow and inefficient, but more recently the language has significantly caught up with the two high-performance computing (HPC) languages C and Fortran. Here is a short video describing the origin of C++ by its own inventor:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JBjjnqG0BP8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Both C and C++, as well as Fortran are still widely used everyday. These three languages (even Fortran) are anonymously present in the lives of virtually all humans every day. For example, all climate and weather prediction software as of today, rely on HPC kernels that have been written and are still written in Fortran. Similarly, almost every operating system that you use on your electronic devices, has some connection to C or C++.&lt;/p&gt;

&lt;h3 id=&quot;a-final-personal-remark&quot;&gt;A final, personal remark&lt;/h3&gt;

&lt;p&gt;Sometimes science acts like humans: it finds a matching partner (a programming language), then they flourish together, make a love story and occasionally decline together as well, with the only difference that polygamy is allowed in science, like Fortran’s marriage with Aerospace and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plasma_(physics)&quot; target=&quot;_blank&quot;&gt;Plasma physics&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=fortran%2Cplasma%2Caerospace&amp;amp;case_insensitive=on&amp;amp;year_start=1920&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cfortran%3B%2Cc0%3B%2Cs0%3B%3BFORTRAN%3B%2Cc0%3B%3BFortran%3B%2Cc0%3B.t4%3B%2Cplasma%3B%2Cc0%3B%2Cs0%3B%3Bplasma%3B%2Cc0%3B%3BPlasma%3B%2Cc0%3B%3BPLASMA%3B%2Cc0%3B.t4%3B%2Caerospace%3B%2Cc0%3B%2Cs0%3B%3BAerospace%3B%2Cc0%3B%3Baerospace%3B%2Cc0%3B%3BAEROSPACE%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/plasma-aerospace-fortran.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution of two of the most challenging computationally-intensive fields of science (Aerospace and Plasma Physics) with the most popular high-performance scientific programming language in human history as of today. The vertical axis represents the relative word-usage frequency of the three keywords (Plasma, Aerospace, and Fortran) in all digital corpus, and the horizontal axis represents the year. Note that the downward slope of the curves in later times does NOT imply the decline of these fields of science or the decline of Fortran. It merely means that they have reached their exponential peak growth in the mid-1980s, and are now expanding steadily (linearly), whereas other newer fields (such as bioinformatics) are being more and more frequently referenced than the above three keywords every year in all digital corpus.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Many times throughout the recent history, some specific fields of science have boosted and popularized some computer programming languages and vice versa, in a positive feedback loop. A younger just-married couple seems to be Bioinformatics-Python, both of which, as of today seem to be thriving:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/bioinformatics-python.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution and thriving of the field of bioinformatics with the popular programming language, Python. The vertical axis represents the relative word-usage frequency of the two keywords (Bioinformatics and Python) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes, a programming language couples with a specific field of science and thrives for a few years, only to be soon replaced with a younger, more attractive, programming language. This is probably what happened to the co-evolution of Perl with bioinformatics, a language which was gradually replaced with Python in the beginning of the new millennium, at least in the field of bioinformatics.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics%2Cperl&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0%3B.t4%3B%2Cperl%3B%2Cc0%3B%2Cs0%3B%3BPerl%3B%2Cc0%3B%3Bperl%3B%2Cc0%3B%3BPERL%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/bioinformatics-python-perl.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the evolution and steady expansion of the Perl programming language and its gradual replacement with Python, in the field of bioinformatics. The vertical axis represents the relative word-usage frequency of the three keywords (Bioinformatics, Python, and Perl) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/2-programming-history&quot;&gt;Lecture 2: Programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Problems - Variables, Values, and Types]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/2-problems-variables-values-types"/>
  <id>http:/ICP2017F/homework/2-problems-variables-values-types</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 2, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB variables.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Type the following in the command window and submit the results. Briefy explain what each assignment does.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt; b = 'x'
&amp;gt;&amp;gt; c = true
&amp;gt;&amp;gt; whos a b c
&amp;gt;&amp;gt; a == c
&amp;gt;&amp;gt; a + c
&amp;gt;&amp;gt; d = [1 2 3 4]
&amp;gt;&amp;gt; e = ['a' 'b' 'c' 'd']
&amp;gt;&amp;gt; f = ['abcd']
&amp;gt;&amp;gt; g = {‘a’ ‘b’ ‘c’ ‘d’}
&amp;gt;&amp;gt; h = { a b c d}
&amp;gt;&amp;gt; whos d e f g h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; What would happen if you go beyond the range for a particular type? For example, the largest integer that can be stored in &lt;strong&gt;int8&lt;/strong&gt; is 127, and the smallest integer is -128, so what would happen if we type cast a larger integer to the type &lt;strong&gt;int8&lt;/strong&gt;? Smaller integer? Use the built-in functions intwine and intmax to find the largest and smallest integers that can be stored in &lt;strong&gt;int16&lt;/strong&gt; and &lt;strong&gt;int32&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Think about what the results would be for the following expressions, and then type them in to the terminal to verify your answers. Briefly explain the results for each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2 
&amp;gt;&amp;gt; 1/2
&amp;gt;&amp;gt; int8(1/2)
&amp;gt;&amp;gt; int8(1/3)
&amp;gt;&amp;gt; -5^2 
&amp;gt;&amp;gt; (-5) ^ 2 
&amp;gt;&amp;gt; 10-6/2 
&amp;gt;&amp;gt; 5*4/2*3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(a) &lt;/strong&gt; Define the following variables:
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     1     0
     2     1
&amp;gt;&amp;gt; b
b =
    -1     2
     0     1
&amp;gt;&amp;gt; c
c =
     3
     2
&amp;gt;&amp;gt; d
d =
     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(b) &lt;/strong&gt; What is the result of each of the following expressions? Briefly explain what MATLAB is doing for each operation.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * d&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Provide three different methods of generating the matrix &lt;strong&gt;a&lt;/strong&gt;, one method should use the &lt;code&gt;diag()&lt;/code&gt; function, one should use the &lt;strong&gt;eye&lt;/strong&gt; function, and one should use the &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Download this &lt;a href=&quot;../homework/2-problems/script_full_of_errors.m&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_fixed.m&lt;/code&gt; in your folder for this HW. Explain in front of each corrected MATLAB statement, why the error occurred. Modify the last two variables so that they display,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Persian
Persian =
Persian is a human language
&amp;gt;&amp;gt; Spanish
Spanish = 
    'Spanish '    'is '    ' another'    'language'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Modify the last line such that for the last line the code displays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Persian is not the same as Spanish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain these results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Use MATLAB help to find out how you can create a new directory named &lt;code&gt;mynewdir&lt;/code&gt; from MATLAB command line. Then change the working directory the newly created directory. Then create a MATLAB script in this directory named &lt;code&gt;myscript.m&lt;/code&gt; with the following code in it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% First create an array from -2*pi to 2:pi
x = -2*pi:pi/20:2*pi;

% Calculate |sin(x)|
y = abs(sin(x));

plot(x,y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now on MATLAB command line, run the script by calling its name. What do you get? Save the output as a figure and submit it with your homework.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Now change your working directory to the original directory before you created &lt;code&gt;mynewdir&lt;/code&gt; directory. Try to run the script &lt;code&gt;myscript&lt;/code&gt; you had created again, from MATLAB command line. What do you get? and why?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/2-problems-variables-values-types&quot;&gt;Homework 2: Problems - Variables, Values, and Types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Solutions - Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/1-solutions-version-control-using-git-github"/>
  <id>http:/ICP2017F/homework/1-solutions-version-control-using-git-github</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-version-control-using-git-github.html&quot; target=&quot;_blank&quot;&gt;Homework 1: Problems - Version Control Using Git and Github&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this homework.  
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus question, is 100.&lt;br&gt;
        Maximum possible points, including bonus question, is 200.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Sep 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;icp2017f---introduction-to-computer-programming-fall-2017&quot;&gt;ICP2017F - Introduction to Computer Programming (Fall 2017)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UT EID:&lt;/strong&gt; &amp;lt;your UT EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;http://www.ae.utexas.edu/&quot;&gt;Department of Aerospace Engineering and Engineering Mechanics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; Undergraduate - &amp;lt;Freshman(1st year) / Sophomore(2nd year) / Junior(3rd year) / Senior(4th year)&amp;gt;&lt;br /&gt;
&lt;strong&gt;ICP Class Position:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;http://www.shahmoradi.orghttp:/ICP2017F/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/ICP2017F/images/amir.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;ICP2017F class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Use the following Markdown code in your &lt;code&gt;readme.md&lt;/code&gt; file to get the exact same behavior as requested above:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;#### ICP2017F - Introduction to Computer Programming (Fall 2017)
&amp;lt;br&amp;gt;
**Name:** \&amp;lt;first name&amp;gt; \&amp;lt;last name&amp;gt;  
**UT EID:** \&amp;lt;your UT EID&amp;gt;  
**Email:** \&amp;lt;your email&amp;gt;  
**Department:** [Department of Aerospace Engineering and Engineering Mechanics](http://www.ae.utexas.edu/)  
**University:** [The University of Texas at Austin](http://www.utexas.edu/)  
**Level:** Undergraduate - \&amp;lt;Freshman(1st year) / Sophomore(2nd year) / Junior(3rd year) / Senior(4th year)&amp;gt;  
**ICP Class Position:** Student  
**Course Webpage:** &amp;lt;http://www.shahmoradi.orghttp:/ICP2017F/&amp;gt;  
**Photo:**  

![Amir Shahmoradi](../../images/amir.png)  

#### Description of the project's content
&amp;lt;br&amp;gt; This repository contains my homework, quizzes, and virtually every effort that I have made for [ICP2017F class](http://www.shahmoradi.orghttp:/ICP2017F/). The structure of the project is the following:

* **[homework](#homework):** (the homework hyperlink should take the reader to the homework folder)  
    This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.  
    &amp;lt;br&amp;gt;
* **[quiz](#quiz):** (the quiz hyperlink should take the reader to the quizzes folder)  
    This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.  
    &amp;lt;br&amp;gt;
* **[exam](#exam):** (the exam hyperlink should take the reader to the exams folder)  
    This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.  
    &amp;lt;br&amp;gt;

For questions and troubleshooting, please contact:  

\&amp;lt;your name&amp;gt;  
\&amp;lt;your email&amp;gt;  
\&amp;lt;any other contact or signature information that you would like to add&amp;gt;

&amp;gt;I have not failed. I've just found 10,000 ways that won't work.  
&amp;gt;[Thomas A. Edison](https://en.wikipedia.org/wiki/Thomas_Edison){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note that you will have to change the relevant information and hyper-references in the above Mardown code to those that match your own information in your own repository (including your own photo).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master

$ git branch test1

$ git branch test2

$ git branch
* master
  test1
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
Switched to branch 'test1'

$ git status
On branch test1
nothing to commit, working tree clean

$ ls
readme.md

$ touch test.txt

$ ls
readme.md  test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;vim test.txt&lt;/code&gt; to open &lt;em&gt;vim&lt;/em&gt; editor. Press &lt;code&gt;shift + I&lt;/code&gt; to switch to &lt;em&gt;vim insert mode&lt;/em&gt;. write &lt;em&gt;This is some example text for branch test1&lt;/em&gt; in &lt;code&gt;test.txt&lt;/code&gt; file. Now, Press &lt;code&gt;ESC&lt;/code&gt; key and write &lt;code&gt;:wq&lt;/code&gt; on the &lt;em&gt;vim&lt;/em&gt; command line to save the file and quit &lt;em&gt;vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test1
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commiting the test.txt file in test1 branch&quot;
[test1 715ca59] commiting the test.txt file in test1 branch
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test1
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ ls
readme.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;test.txt&lt;/code&gt; files is not in the project’s working directory, since I just chaecked out a new branch &lt;em&gt;test2&lt;/em&gt; that does not contain any files that were generated and committed in &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch test.txt

$ vim test.txt

$ git status
On branch test2
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The procedure for adding content to the file is very similar to that in part (C) of the problem, explained above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
error: The following untracked working tree files would be overwritten by checkout:
        test.txt
Please move or remove them before you switch branches.
Aborting

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commtting the test2 branch changes&quot;
[test2 fce6a94] commtting the test2 branch changes
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test2
nothing to commit, working tree clean

$ git checkout test1
Switched to branch 'test1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ ls
readme.md

$ git status
On branch master
nothing to commit, working tree clean

$ git merge test1
Updating a661e87..715ca59
Fast-forward
 test.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls
readme.md  test.txt

$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge test2
Auto-merging test.txt
CONFLICT (add/add): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
test.txt: needs merge
error: you need to resolve your current index first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Basically, by running &lt;code&gt;git merge test2&lt;/code&gt; command, we attempted to merge test.txt file of &lt;em&gt;test2&lt;/em&gt; branch with the existing &lt;code&gt;test.txt&lt;/code&gt; file of &lt;em&gt;master&lt;/em&gt; branch. But the content of the two is different.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vim test.txt

$ cat test.txt
This is some example text from both test1 and test2 branches combined.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;cat&lt;/code&gt; shows the content of &lt;code&gt;text.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both added:      test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add test.txt

$ git commit -m&quot;adding the test.txt resolution file&quot;
[master 4c74098] adding the test.txt resolution file

$ git status
On branch master
nothing to commit, working tree clean

$ git checkout test2
Switched to branch 'test2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test1
error: The branch 'test1' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test1'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch
* master
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The difference arises, because whichever branch you are in, Git assumes that the content of any other branch should be first merged for the current branch before deteting the other branch. Therefore, in the first case, Git warns that there is unmerged data between &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt; branches. But the delete command from &lt;em&gt;master&lt;/em&gt; branch gives no error, since the content of &lt;em&gt;test1&lt;/em&gt; branch has been previously appropriately merged with &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ git branch -d test2
error: Cannot delete branch 'test2' checked out at '~/test'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch -d test2
Deleted branch test2 (was fce6a94).

$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all

$ git commit
On branch master
nothing to commit, working tree clean

$ git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class to teach you how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a &lt;em&gt;gh-pages&lt;/em&gt; branch for your project from master branch, such that your project is accessible through its web address based on the content of &lt;em&gt;gh-pages&lt;/em&gt; branch, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class and I will explain how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/1-solutions-version-control-using-git-github&quot;&gt;Homework 1: Solutions - Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 1: Advanced Git concepts]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/1-advanced-git"/>
  <id>http:/ICP2017F/lecture/1-advanced-git</id>
  <published>2017-09-08T00:00:00-05:00</published>
  <updated>2017-09-08T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of some advanced topics in Git Version Control System which are essential for effective management of large collaborative projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A useful Git-cheatsheet link for future reference:&lt;/strong&gt;   &lt;a href=&quot;http://ndpsoftware.com/git-cheatsheet.html&quot; target=&quot;_blank&quot;&gt;Advanced Git cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/K62e2y-zM24&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Mv_C3trCAus&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-help-for-git-commands&quot;&gt;Getting help for Git commands&lt;/h2&gt;

&lt;p&gt;There are basically three ways to request information about Git commands on the Git-bash command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help &amp;lt;command name&amp;gt;
$ git &amp;lt;command name&amp;gt; --help
$ man git-&amp;lt;command name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last command &lt;code&gt;man&lt;/code&gt; is not a Git command. All Git commands begin with the word &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;viewing-the-git-commit-history&quot;&gt;Viewing the Git commit history&lt;/h2&gt;

&lt;p&gt;You can check the history of project commits to the repository using the Git command &lt;code&gt;git log&lt;/code&gt;.
For example, here is a snippet from the output  of &lt;code&gt;git log&lt;/code&gt; on laptop screen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ git log
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit

commit b6f4fb69d97a396bde7159c78424100704328634
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:03:28 2017 -0600

    *.txt files removed

commit 961ff2d4ac68081a21864b2f1b067b43424d3342
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:02:00 2017 -0600

    update

commit 8fd3c49e90d96f4bcef2302c7b227f06ad7a5250
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:36:45 2017 -0600

    minor

commit cd0ed7def385ba29ea134bcc18a4ad0873d9f5ee
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:32:51 2017 -0600

    minor

commit 8096668868ef64189f788669d5f1838cd944f9b6
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:28:22 2017 -0600

    minor

commit c52ba6adea474625cce1493896ecaac40cb976af
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:24:23 2017 -0600

    minor

commit ab5a17f9e913e55cae0f971fd9b485a0a6e8dec3
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:16:27 2017 -0600

    minor

commit ce5c2421db6e76a338a0e6922acead9100a7c4c4
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:10:19 2017 -0600

    minor

commit 4a7d27d81260c2e2a29b6259e6c97befc065c069
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:05:14 2017 -0600

:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is a long list of options that can be used with &lt;code&gt;git log&lt;/code&gt; command to display exactly what you need on bash screen.
Some of the most useful are discussed below.&lt;br /&gt;
To lists the differences of the files between different commits use &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To lists only a limited number of most recent commits use &lt;code&gt;-&amp;lt;number of commits to display&amp;gt;&lt;/code&gt; flag. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -2
$ git log -2
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To list the statistics of the commits, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --stat -1
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

 README.md                |   1 +
 results/tables/README.md |   8 ++-
 results/tables/tgm.mat   | Bin 0 -&amp;gt; 2550889 bytes
 src/defineProject.m      |   3 +-
 src/main.m               |  82 +++++++++------------------
 src/writeTables.m        |  75 ++++++++++++++++++++++++
 9 files changed, 140 insertions(+), 56 deletions(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The log data can be even represented formatted via the flag &lt;code&gt;--pretty=format:&quot;&amp;lt;the desired format&amp;gt;&quot;&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -3 --pretty=format:&quot;%h - %an, %ar : %s&quot;
264043e - Amir Shahmoradi, 7 days ago : data tables for 1D model added.
b45ddd7 - Amir Shahmoradi, 7 days ago : minor edit
b6f4fb6 - Amir Shahmoradi, 3 weeks ago : *.txt files removed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A list of available format options is provided below.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful options for &lt;code&gt;git log --pretty=format:&quot;&amp;lt;options&amp;gt;&quot;&lt;/code&gt;. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description of Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date (format respects the --date=option)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; is given in the table below.&lt;/p&gt;

&lt;table id=&quot;log_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 2: Common flags for &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot; /&gt;
&lt;col style=&quot;width: 80%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the patch introduced with each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show statistics for files modified in each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display only the changed/insertions/deletions line from the --stat command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files modified after the commit information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files affected with added/modified/deleted information as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the first few characters of the SHA-1 checksum instead of all 40.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display an ASCII graph of the branch and merge history beside the log output.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; commands that can change the format of the output, is given in the table below.&lt;/p&gt;

&lt;table id=&quot;limit_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 3. Flags limiting the output of &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 66.6667%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the last n commits  (e.g., -2, -3, ...). &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made after the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt;, &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made before the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the author entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the committer entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits with a commit message containing the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits adding or removing code matching the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For example, to list the commit history since a specific time in the past, use &lt;code&gt;--since&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=2.weeks
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or, with the following date format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=&quot;2017-01-15&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;undoing-amending-and-tagging&quot;&gt;Undoing, amending, and tagging&lt;/h2&gt;

&lt;p&gt;Suppose you want to undo the latest addition of files to the stage area. The command to use in order to clean the stage area is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is basically the opposite of &lt;code&gt;git add&lt;/code&gt;. There are a lot of options that can accompany this Git command, details of which can be found in &lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
However, &lt;strong&gt;be careful when using this command&lt;/strong&gt;, especially with flag &lt;code&gt;--hard&lt;/code&gt;, which can result in changes in your working directory as well, thus leading to involuntary loss of latest uncommitted files.&lt;/p&gt;

&lt;p&gt;Another useful command is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which is used when you forget to add some files to your latest commit and now, you would like to add the latest content of your project’s staging area to the last commit, by &lt;em&gt;amending&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;The Git command &lt;code&gt;git tag&lt;/code&gt; allows you to tag specific important commits in your commit history, for example a final release of your project/software. If you just type &lt;code&gt;git tag&lt;/code&gt; on Git bash command line, it will list all tags in the project, &lt;strong&gt;in alphabetical order&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git tag
v1.0
v1.1
v2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can create a tag for the latest commit to your repository by using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -a v3.0 -m &quot;new version of project&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will add a new tag pointing to the latest commit in the project with name &lt;code&gt;v3.0&lt;/code&gt; and the message &lt;em&gt;new version of project&lt;/em&gt;.
Now if you want to display the information about a specific tag, use &lt;code&gt;git show&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git show v1.0
tag v1.0
Tagger: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 1 18:08:00 2017 -0600

first tag

commit 25129a074aece69d234838764e7df63ed1fb3023
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Fri Dec 27 17:12:08 2016 -0600

    Update README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create a &lt;strong&gt;lightweight&lt;/strong&gt; tag by avoiding &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-m&lt;/code&gt; flags in you tag command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag v4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Annotated tags (created with &lt;code&gt;-a&lt;/code&gt; flag) are meant for very important project versions, such as a software release, while lightweight tags are meant for private or temporary object labels.&lt;br /&gt;
For more information about &lt;code&gt;git tag&lt;/code&gt;, see &lt;a href=&quot;https://git-scm.com/docs/git-tag&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-remote-repositories&quot;&gt;Working with remote Repositories&lt;/h2&gt;

&lt;p&gt;In order to see which remote servers you have configured for your project, you can run the following Git command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the output above, &lt;code&gt;origin&lt;/code&gt; is the default name that Git gives to the server you cloned your project from. If you also specify &lt;code&gt;-v&lt;/code&gt; flag, Git will show you the URLs that Git has stored for the remote shortname (e.g., origin) to be used when reading and writing to that remote repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote -v
origin  git@github.com:shahmoradi/foo.git (fetch)
origin  git@github.com:shahmoradi/foo.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to see more information about a particular remote repository in your project, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote show origin
* remote origin
  Fetch URL: git@github.com:shahmoradi/foo.git
  Push  URL: git@github.com:shahmoradi/foo.git
  HEAD branch: master
  Remote branches:
    development tracked
    master      tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above information indicates that the current HEAD branch of the project is on &lt;em&gt;master&lt;/em&gt; branch, and the remote branches on the remote repository are &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about &lt;code&gt;git remote&lt;/code&gt; command in &lt;a href=&quot;https://git-scm.com/docs/git-remote&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-branching&quot;&gt;Git branching&lt;/h2&gt;

&lt;p&gt;Branching is powerful idea in Version Control Systems, which significantly facilitates collaboration or parallel development of a project. Suppose you have already a project which has reached its first release version, meaning that it works all fine. Now, you like to add a new feature to your project. To do this and to avoid further commits to your original project, you can create a new &lt;strong&gt;branch&lt;/strong&gt; of the project which is specifically devoted to adding the new feature. See the following figure, for an example of Git branching.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/1/branch-flowchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example illustration of Git branching for a project with three branches: master, development, topic.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you create a Git project, the default single branch in your project is &lt;strong&gt;master&lt;/strong&gt;. So, for example if you search for your project branches, you’d see,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you already have created other branches in your project, for example &lt;strong&gt;development&lt;/strong&gt;, then you may see a Git message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* development
  master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;*&lt;/strong&gt; behind the branch name indicates that the project HEAD (i.e., your working directory) points to that branch, that is, all commits will be made to that branch that is highlighted with &lt;strong&gt;*&lt;/strong&gt;. In the example above, the working directory points to &lt;em&gt;development&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;In order to &lt;strong&gt;create a new branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create a new branch, Git creates an exact duplicate of the current branch that you are in, but with the requested name for the new branch. In order to &lt;strong&gt;switch to a specific Git branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout development
Switched to branch 'development'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A shortcut for &lt;strong&gt;both creating a new branch from the current branch, and switching to the new branch automatically&lt;/strong&gt; is to use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b test
Switched to a new branch 'test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose, you have made some significant progress on your project &lt;strong&gt;development&lt;/strong&gt; branch, and now you want to add the newly developed feature to your &lt;strong&gt;master&lt;/strong&gt; branch. All you need to do, is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
$ git merge development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
By doing this, you first switch to master branch, then request Git, to &lt;strong&gt;merge&lt;/strong&gt; all changes made to the project on the &lt;em&gt;development&lt;/em&gt; branch to be copied and transferred to the &lt;em&gt;master&lt;/em&gt; branch. For example, if I have added a single &lt;code&gt;test.txt&lt;/code&gt; file, and committed the change to the development branch, then upon mergin with master, Git will display something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Updating 25129a0..57ed7c2
Fast-forward
 test.txt | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose there was no change in the development branch, since branching it from master. Then upon merging, you would get a message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Occasionally, conflicts may arise between branches upon merging. This happens when a common file between the two branches, has been modified on both branches in parallel. In such cases, you will need to resolve the conflict by choosing one of the file edits in one of the branches and discard the other. The following is an example merge conflict message by Git.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if you use &lt;code&gt;git status&lt;/code&gt; command, the following is the typical message that will be displayed,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both modified:   test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To resolve the conflict, open the conflicting file. There you will see the segments of the file from both versions which are the cause of the conflict. Edit the file as you wish. and then perform the normal &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; on the file, to resolve the conflict and complete the merge process.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;git merge&lt;/code&gt;, there is another more elegant and powerful Git command, &lt;code&gt;git rebase&lt;/code&gt; for integrating changes in different branches into a single branch. But, the subject goes beyond the goals of this class, and the interested reader is referred to &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for this command and &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot; target=&quot;_blank&quot;&gt;this pedagogical Git page&lt;/a&gt; for &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deleting-a-branch&quot;&gt;Deleting a branch&lt;/h3&gt;
&lt;p&gt;Normally, when a branch merge is done, the development branch is not needed anymore, so it is always wise and cleaner to delete the unwanted branches, using the command &lt;code&gt;git branch -d &amp;lt;branch name&amp;gt;&lt;/code&gt;. To do this, on the same branch that you just performed &lt;code&gt;git merge&lt;/code&gt; use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Switched to branch 'master'
$ git branch -d test
Deleted branch hotfix (3a0874c).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you cannot delete a branch while you are on it (i.e., while it is checked out). For example, Git will give you the following error message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;You cannot delete a branch from another branch with which you have not performed the merging either&lt;/strong&gt;. In this case, Git will give the following error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: The branch 'test' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Advice for good project management&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Your &lt;i&gt;master&lt;/i&gt; branch should always contain the latest clean version of your project, that is, the complete and working version/release. You should always make your new developments in a separate branch, and once it works and the new feature/development is complete, you merge the new development into the master branch.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;fn1&quot;&gt;1. See &lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for more details and updates. &lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 1 in the text.&quot;&gt;↩&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/1-advanced-git&quot;&gt;Lecture 1: Advanced Git concepts&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 0: A professional programmer uses Version Control System (VCS)]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/0-version-control-system"/>
  <id>http:/ICP2017F/lecture/0-version-control-system</id>
  <published>2017-09-01T00:00:00-05:00</published>
  <updated>2017-09-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of Version Control Systems, why they are needed, how they work, and the most prominent and popular version control software that are available today for professional collaborative programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some useful links for future reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0/linuxRef.pdf&quot; target=&quot;_blank&quot;&gt;Linux commands cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0/progit.en.pdf&quot; target=&quot;_blank&quot;&gt;Git reference manual (2009)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0/github-git-cheat-sheet.pdf&quot; target=&quot;_blank&quot;&gt;Github’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0/atlassian_git_cheatsheet.pdf&quot; target=&quot;_blank&quot;&gt;Atlassian’s Git cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
#### Table of Content
- [Motivation](#Motivation)
- [What is Version Control System (VCS)?](#VCS)
- [Git/Mercurial version control system](#GM-VCS)
  - [Git/Mercurial project indexing method](#GM-indexingMethod)
  - [Remote repository options for your Git/Mercurial projects](#remRepos)
- [Setting up your first Git project on Github](#gitProjectSetup)
  - [Setting up your Git identity](#gitID)
  - [Two methods of project initialization](#gitInit)
  - [Local device and remote repository SSH connection](#lorcalRemoteConnection)
  - [Main Git commands](#mainGitCommands)  
    - [`git status`](#git-status)
    - [`git add`](#git-add)
    - [`git commit`](#git-commit)
    - [`git push`](#git-push)
    - [`git pull`](#git-pull)
    - [Git commands summary](#git-summary)
--&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/kCCQZpao3wM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;Motivation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Back in the early years of my graduate studies when I started scientific research and programming, the directory containing my first project looked something like the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/0/badCodingHabit.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        An example of bad coding habit and project maintenance. The figure shows part of the content of a directory dedicated to a research project. Each folder contains one version of the project and its corresponding codes and results at a given time (i.e., one &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt;). Obviously, tracking minor development stages of the project leading to each of the deliverables would be a very difficult task with such project management method.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Clearly, there are many disadvantages and caveats with maintaining the structure of your project and codes similar to the content of the above figure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Data redundancy and storage inefficiency&lt;/strong&gt;&lt;br /&gt;
 Every time you want to develop your existing project and take it to the next level, you have to make a whole duplicate of the last version of your project to start the new development (i.e., the next version of your project). Obviously, your the new version of your project will have a lot in common with the previous version. But, each one has its own dedicated separate folder, there is &lt;em&gt;a lot of code and data redundancy&lt;/em&gt; in using such method for just keeping track of your project version history.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;High risk of errors and irreversible mistakes&lt;/strong&gt;&lt;br /&gt;
Using this method, it is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to.
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Difficulty in tracking minor developments in the project&lt;/strong&gt;&lt;br /&gt;
 Every version of the project is supposed to correspond to one working version of the project, that is, in professional terminology, each stage of the project should correspond to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Deliverable&quot; target=&quot;_blank&quot;&gt;deliverable&lt;/a&gt;. Therefore, if all minor developments of the project are to be documented, then each minor development has to be recorded as a new version of the project, with its own dedicated directory. However, since this is practically impossible, the programmer (researcher) has to either skip documenting all minor improvements, and therefore lose track of every detailed development in the code, or exacerbate the first caveat mentioned above, by generating more and more redundant copies of the same codes and data for the sake of keeping track of all minor stages of the development.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ambiguity in version differences&lt;/strong&gt;&lt;br /&gt;
 With this primitive method of project version control, it is not clear what the main differences between different versions of the project are, unless a very detailed documentation is provided along with each version detailing the differences between the current, its ancestor (i.e., the previous version of the project) and its descendant (i.e., the next version of the project), or parallel independent versions of the project (i.e., the project &lt;a href=&quot;https://en.wikipedia.org/wiki/Branching_(version_control)&quot; target=&quot;_blank&quot;&gt;branches&lt;/a&gt;).
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharing and collaboration difficulties&lt;/strong&gt;&lt;br /&gt;
 Since the entire project is locally stored and accessible to one programmer or researcher, any collaborative effort will be extremely difficult, and require manual duplication and syncing of the project with other developers.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potential risk of complete data loss:&lt;/strong&gt;&lt;br /&gt;
 As a result of the local storage of the project on a single computer or storage device, there is always a high risk of losing the entire project due to hardware failure, or other unpredicted events.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fortunately, several smart powerful solutions and software have been developed, collectively known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot; target=&quot;_blank&quot;&gt;Version Control System (VCS)&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_configuration_management&quot; target=&quot;_blank&quot;&gt;project management&lt;/a&gt;, in particular, since the turn of the millennium.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-version-control-system-vcs&quot;&gt;What is Version Control System (VCS)?&lt;/h2&gt;

&lt;p&gt;Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Depending on how the project is maintained and shared with others, VCS are classified into three categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Local VCS&lt;/strong&gt;&lt;br /&gt;
 The simplest form of project version control, and probably the oldest method is &lt;em&gt;local VCS&lt;/em&gt; where the VCS software keeps track of details of evolution of files in the project only on a local storage device or computer. A prime example of such version control software is the GNU &lt;a href=&quot;https://www.gnu.org/software/rcs/&quot; target=&quot;_blank&quot;&gt;Revision Control System (RCS)&lt;/a&gt;. Such VCS are able to avoid problems 1-4 mentioned above. The following figure illustrates the inner working of a local VCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/localVCS.png&quot; alt=&quot;Local Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;No easy way of collaboration and synchronization between team members.&lt;/li&gt;
      &lt;li&gt;Potential risk of complete data loss.&lt;br /&gt;
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Centralized VCS (CVCS)&lt;/strong&gt;&lt;br /&gt;
 Since collaborative effort is at the heart of almost every large-scale project, a new generation of VCS has been developed that go beyond the capabilities of local VCS. These VCS have a central repository that is accessible by all members of the project’s team. This central repository contains all the project’s information and its development history and clients (team members) can check out and work on individual files of the project. For many years this VCS has been the dominant method version control. Prime examples include &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_Versions_System&quot; target=&quot;_blank&quot;&gt;Concurrent Versions System (CVS)&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perforce_Helix&quot; target=&quot;_blank&quot;&gt;Perforce Helix&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Subversion&quot; target=&quot;_blank&quot;&gt;Apache Subversion(SVN)&lt;/a&gt;. The following figure illustrates the inner working of a CVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/centralizedVCS.png&quot; alt=&quot;Centralized Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;
 &lt;strong&gt;Major Caveats:&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Since the main database of the project is centralized, and team members have only snapshots of a specific version of the project, any failure in the central database would halt the individual and collaborative works of all team members, since no further developments can be submitted to the central database.&lt;/li&gt;
      &lt;li&gt;Also, if the central database is completely corrupted with no backups, then the entire history of the project is lost.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distributed VCS (DVCS)&lt;/strong&gt;&lt;br /&gt;
 In order to resolve the caveats of the aforementioned VCS, several new VCS known as &lt;em&gt;distributed VCS&lt;/em&gt; have been developed within the first decade of the new millennium. With these VCS, each client has an entire copy of the central database at his own local storage device. Thus, every &lt;strong&gt;clone&lt;/strong&gt; of the central repository that is with each client, is a full backup of all the project data.  Consequently, if the central server/repository fails for any reason, the local repository of the team member that has the most recent clone of the project database, can be used to restore the central repository. *This VCS paradigm is currently the most popular class of VCS and we will be using a major implementation of it known as &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; throughout this course. Other major DVCS implementations include &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;http://bazaar.canonical.com/en/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bazaar&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;http://darcs.net/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Darcs&lt;/strong&gt;&lt;/a&gt;. The following figure illustrates the inner working of a DVCS.&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;1/distributedVCS.png&quot; alt=&quot;Distributed Version Control&quot; /&gt;&lt;br /&gt;
 &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A rather complete list of all major VCS software implementations can be found &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_version_control_software&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;GM-VCS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitmercurial-version-control-system&quot;&gt;Git/Mercurial version control system&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is a DVCS that grew out of frustration between the Linux kernel developing community and a proprietary VCS software company that maintained and indexed Linux kernel development. Similar to the other major DVCS implementation &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Mercurial&lt;/strong&gt;&lt;/a&gt;, Git is designed with the following goals in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speed.&lt;/li&gt;
  &lt;li&gt;Simple design.&lt;/li&gt;
  &lt;li&gt;Strong support for non-linear development (thousands of parallel branches).&lt;/li&gt;
  &lt;li&gt;Fully distributed.&lt;/li&gt;
  &lt;li&gt;Able to handle large projects like the Linux kernel efficiently (speed and data size).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;GM-indexingMethod&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitmercurial-project-indexing-method&quot;&gt;Git/Mercurial project indexing method&lt;/h3&gt;

&lt;p&gt;VCS software, such as SVN and and Bazaar, index the new developments in the projects by tracking the changes in individual files of the projects, similar to the diagram below.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/0/deltas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;File-based&lt;/b&gt; project indexing method that is common to some VCS software such as CVS, Subversion, Perforce, Bazaar. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;By contrast, both Git and Mercurial work by generating a complete snapshot of the project at any moment the project is committed to the local repository for version control. Even if some files have not changed in the new version of the project, they will still exist in the newly generated version of the project. However, both Git and Mercurial have been designed smart enough to realize if any changes has occurred to each individual file and store the files effectively and without redundancy.  The complete history of the project is constructed by the series of snapshots generated, a flow similar to the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/0/snapshots.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        &lt;b&gt;Snapshot-based&lt;/b&gt; project indexing method that is used in Git and Mercurial VCS software. &lt;br /&gt;(&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;gitAreas&quot;&gt;&lt;/a&gt;
Each project file in Git/Mercurial indexing process can have one of the three possible states:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;modified, but not staged:&lt;/strong&gt;
 This is when a project file is modified by the user, but Git/Mercurial has no track of the file changes at the moment. If the file is lost or removed unexpectedly, then Git cannot recover the file.
 &lt;br /&gt;&lt;br /&gt;
 &lt;a name=&quot;stagingArea&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;staged for commit to the repository:&lt;/strong&gt;
 When a file is modified it can be added to the Git staging area to be later &lt;em&gt;committed&lt;/em&gt; permanently to the repository. The staging area is a file, generally contained in the project’s repository (&lt;code&gt;.git&lt;/code&gt; directory), that stores information about what will go into the next &lt;em&gt;commit&lt;/em&gt; to the repository. The staging area is also sometimes referred to as the &lt;strong&gt;index&lt;/strong&gt;.
 &lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;committed to the repository:&lt;/strong&gt; Once the staged files are &lt;em&gt;committed&lt;/em&gt; to the repository, they become a permanent part of it, and can be later extracted (checked out) for review or further development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three file states comprise an important integral part of Git and Mercurial. The following figure provides an illustration of the three file states.
&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/0/gitAreas.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption&gt;
        A diagram illustrating the project-indexing process of Git and Mercurial VCS software. Each project file can reside in three different states: working directory, staging area, or in the local repository. (&lt;i&gt;Diagram is adopted from &lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;&lt;/i&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&quot;remRepos&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;remote-repository-options-for-your-gitmercurial-projects&quot;&gt;Remote repository options for your Git/Mercurial projects&lt;/h3&gt;

&lt;p&gt;Git can be downloaded and installed from &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or Linux systems. The installation guide is available &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Mercurial can be downloaded and installed from &lt;a href=&quot;https://www.mercurial-scm.org/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for Windows, Mac, or other operating systems. For collaborative projects, you will need a central (remote) project repository to which all team members submit their latest developments. &lt;em&gt;Even if you are working on a project alone, it is always a good idea to submit all your project developments to a remote repository for the sake of avoiding unpredicted data loss and also publicly showcasing your work.&lt;/em&gt; Two popular online repositories for version-controlled projects are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;, which is also an Internet hosting service works and works exclusively for projects that are indexed using Git. As of today, all public projects (visible to everyone on the web) are free-of-charge. For private projects you will have to pay a monthly fee. However, &lt;a href=&quot;https://github.com/blog/1900-the-best-developer-tools-now-free-for-students&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; offers a micro-account specially for students with five private repositories free-of-charge (normally $7/month) while you’re a student.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/a&gt;, which used to exclusively host Mercurial-indexed projects, but as of 2011 can also host Git-indexed projects. As of today, all projects, public or private (up to 5 users), can be stored on Bitbucket free-of-charge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is a concise comparison between the general features and services of Github and Bitbucket.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Supported VCS&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Mercurial, Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Git&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Public repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free, unlimited&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Private repos&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Free up to 5 users&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;Starts at $7/month for unlimited users&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Popular projects hosted&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Adium, Mailchimp, Opera, Python, Django&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Bootstrap, Node.js, jQuery, Rails, Homebrew&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td&gt;
    &lt;strong&gt;Notable Extra features&lt;/strong&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;External authentication via Github, Twitter, Facebook, Google&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;em&gt;&lt;span class=&quot;s1&quot;&gt;Two-factor authentication, Github Pages, Github Gists&lt;/span&gt;&lt;/em&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitProjectSetup&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-your-first-git-project-on-github&quot;&gt;Setting up your first Git project on Github&lt;/h2&gt;

&lt;p&gt;For this course, we will use Git as our version control software, and Github as central (remote) repository. Follow the following guidelines to create your first Git project on Github.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://education.github.com/&quot; target=&quot;_blank&quot;&gt;Github Student&lt;/a&gt; and create your student account.&lt;/li&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt; on your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;gitID&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-up-your-git-identity&quot;&gt;Setting up your Git identity&lt;/h3&gt;

&lt;p&gt;The first thing you should do when you install Git is to set your user-name and email address. This is important because every Git commit uses this information, and this information is permanently baked into the &lt;em&gt;commits&lt;/em&gt; you start making to your projects’ repositories. To set your name and email globally for all Git projects &lt;em&gt;once and for all&lt;/em&gt; on your computer, use the following Git commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git config --global user.name &quot;&amp;lt;your name, e.g., Amir Shahmoradi&amp;gt;&quot;
$ git config --global user.email &amp;lt;your email, e.g., amir@ices.utexas.edu&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You need to do this only once if you pass the &lt;code&gt;--global&lt;/code&gt; option, because then Git will always use the provided information for anything you do with Git on your system. If you want to override this information with a different name or email address later on for some specific projects, you can run the above same Git commands, but &lt;em&gt;without the &lt;code&gt;--global&lt;/code&gt; optional flag when you are in your specific project’s directory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;gitInit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;two-methods-of-project-initialization&quot;&gt;Two methods of project initialization&lt;/h3&gt;

&lt;p&gt;Now at this point, there are two ways for project initialization. We will go through both here. A good detailed tutorial can be found &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;1-remote-project-initialization-on-github&quot;&gt;&lt;strong&gt;1. Remote project initialization (on Github)&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;With this method you first initialize an empty project on Github, and then clone the project from the remote (Github) repository to your local device, using the &lt;code&gt;git clone&lt;/code&gt; command, discussed later below. To create a remote repository on Github, login to your Github account and follow the instructions on &lt;a href=&quot;https://help.github.com/articles/create-a-repo/&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;2-local-project-initialization&quot;&gt;&lt;strong&gt;2. Local project initialization&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Local project initialization is done by the following git command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command will initialize an empty repository in the current directory. If you check the repository, you will notice that a &lt;code&gt;.git&lt;/code&gt; (hidden) folder has been added to the directory. This folder will contain all history of your new project, and anything in the current directory in which &lt;code&gt;.git&lt;/code&gt; folder exists will be indexed as part of the project.&lt;br /&gt;
In order to generate the project’s repository in different directory, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git init &amp;lt;directory name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Even if the requested directory does not exist, git will first automatically create the requested directory and initialize the empty project inside it. That’s it! Now all you need to do is to start adding or developing your project files inside the project folder.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lorcalRemoteConnection&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;local-device-and-remote-repository-ssh-connection&quot;&gt;Local device and remote repository SSH connection&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Why is SSH needed?&lt;/strong&gt;&lt;br /&gt;
Now every time may you want to &lt;strong&gt;clone&lt;/strong&gt; your remote private repository to your local device or &lt;strong&gt;push&lt;/strong&gt; your local repository to a remote server (your Github account), or basically do any communication between the local and remote repositories, Git will ask you to authenticate your connection by supplying your Github username and password. Note that this security behavior is necessary, since you don’t want just anyone to be able to push to your personal projects or mess with them without your prior permission.
However, this rather annoying user/pass request by Git can be resolved by setting up an &lt;strong&gt;SSH&lt;/strong&gt; secure connection between your local device and the remote repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;br /&gt;
Think of your local device as a person who has a set of keys, now if your remote repository is a home with an entrance key hole that matches one of the person’s (local device’s) keys, then the person (your device) can gain access to the interior of the home (your remote repository).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is it set up?&lt;/strong&gt;&lt;br /&gt;
You can generate keys for your local device by following the instructions given &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Once you have generated the key and the key hole, you can add a copy of the key hole to your Github account by following the instructions given &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example educational video, explaining the SSH key setup process:&lt;/p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/H5qNpRGB7Qw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;mainGitCommands&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;main-git-commands&quot;&gt;Main Git commands&lt;/h3&gt;

&lt;p&gt;As of today, Git has more than 150 commands. For a complete list, you can type on your &lt;em&gt;Git bash&lt;/em&gt; command window,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to see a list of all Git commands. Note that every Git command begins with &lt;code&gt;git&lt;/code&gt;. Despite the long list of Git commands, you will likely use only five of them on an everyday basis. Not that the rest are unimportant, but with these five basic commands you will be at least able to develop and index your project, and communicate with remote repository and colleagues. In order to understand these five, we will have to recall the three states of a project’s files, described earlier &lt;a href=&quot;#gitAreas&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-status&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-check-the-status-of-the-project&quot;&gt;1. Check the status of the project&lt;/h4&gt;

&lt;p&gt;First of all, you can check the status of your git project at any time by typing the following command in the git-bash prompt window, assuming the command line is already on the project’s directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-add&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-add-files-to-the-staging-area&quot;&gt;2. Add files to the staging area&lt;/h4&gt;

&lt;p&gt;In order to add any of the modified or new files to the &lt;a href=&quot;#stagingArea&quot;&gt;staging area&lt;/a&gt;, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add &amp;lt;file name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To add all modified files (including file removals as well as changes) to the staging area, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add -A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is equivalent to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add .
$ git add -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The first command stages new and modified files, but not the deleted files. The second command, stages modified and deleted files, without the newly created files.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git add&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-add&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-commit&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-commit-the-staged-files-to-the-local-repository&quot;&gt;3. Commit the staged files to the local repository&lt;/h4&gt;

&lt;p&gt;The stages files can be committed (i.e., submitted permanently) to the local repository by&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
once this command is entered, a new page for &lt;em&gt;log message&lt;/em&gt; will open on the command line, which contains the list of all files to be committed, and a place at the top of the page to add comments regarding this version of the files that is being committed to the repository. To add a comment, press &lt;code&gt;i&lt;/code&gt; to enter the &lt;em&gt;insert&lt;/em&gt; mode of the &lt;strong&gt;vim&lt;/strong&gt; text-editor. Once comment is added, press &lt;code&gt;ESC&lt;/code&gt; button to exit the insert mode, and write &lt;code&gt;:wq&lt;/code&gt; on the command-line to &lt;strong&gt;w&lt;/strong&gt;rite the comment file (i.e., save it) and &lt;strong&gt;q&lt;/strong&gt;uit &lt;em&gt;vim&lt;/em&gt; text-editor.&lt;/p&gt;

&lt;p&gt;If you use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Both commands act as a shortcut to first automatically &lt;strong&gt;stage files&lt;/strong&gt; that have been &lt;strong&gt;modified and deleted&lt;/strong&gt; and then &lt;strong&gt;commit&lt;/strong&gt; them to the repository, but &lt;strong&gt;not the new files&lt;/strong&gt; that you have not yet told Git about. Another useful flag is &lt;code&gt;-m&lt;/code&gt; with which you can enter a short message on the command line as the log message of the commit, and therefore no new page will open up for entering log message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -m &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; flags can be combined to automatically stage and commit the files together,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit -am &quot;This is a test commit!&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;em&gt;But, keep in mind that with this method of staging, the &lt;strong&gt;new files&lt;/strong&gt; will neither be staged nor committed to the repository.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git commit&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-commit&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-push&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-push-the-changes-in-local-repository-to-the-remote-repository&quot;&gt;4. Push the changes in local repository to the remote repository&lt;/h4&gt;

&lt;p&gt;Now, in order to &lt;em&gt;push&lt;/em&gt; all your commits from the local repository to the remote repository, in order to place permanently there and be able to share it with others, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
We have not yet talked about &lt;strong&gt;git branches&lt;/strong&gt;, but what the above command basically does is that it orders Git to &lt;strong&gt;push all project branches&lt;/strong&gt; to the remote repository. Later on, we will talk more about different flags that can follow &lt;code&gt;git push&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git push&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-push&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-pull&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-pull-the-latest-project-revision-from-the-remote-to-the-local-repository&quot;&gt;5. Pull the latest project revision from the remote to the local repository&lt;/h4&gt;

&lt;p&gt;Now, in order to &lt;em&gt;pull&lt;/em&gt; the latest revision of the project – a result of other people’s work that is not available in your local repository – from the remote to the your local repository, use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There are some important details about &lt;code&gt;git pull&lt;/code&gt; which we will delve into later on in the following lectures.&lt;/p&gt;

&lt;p&gt;The full documentation for &lt;code&gt;git push&lt;/code&gt; can be found &lt;a href=&quot;https://git-scm.com/docs/git-pull&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;git-summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-commands-summary&quot;&gt;Git commands summary&lt;/h4&gt;
&lt;p&gt;All in all, the most trivial, but also the most useful git commands are the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
$ git add --all
$ git commit
$ git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for submitting your changes to the local and remote repositories, and&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
for syncing your local with the remote repository. Remember that you have to use these commands, in the above forms, inside the directory of the project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;

&lt;!--
[^2]: &lt;span style=&quot;font-size:0.7em&quot;&gt;For a short history of Git see [Git history](https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git){:target=&quot;_blank&quot;}.&lt;/span&gt;
--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;span style=&quot;font-size:0.7em&quot;&gt;For a thorough review of VCS and particularly Git, see the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.&lt;/span&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/0-version-control-system&quot;&gt;Lecture 0: A professional programmer uses Version Control System (VCS)&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Problems - Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/1-problems-version-control-using-git-github"/>
  <id>http:/ICP2017F/homework/1-problems-version-control-using-git-github</id>
  <published>2017-09-01T00:00:00-05:00</published>
  <updated>2017-09-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Sep 18, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;icp2017f---introduction-to-computer-programming-fall-2017&quot;&gt;ICP2017F - Introduction to Computer Programming (Fall 2017)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UT EID:&lt;/strong&gt; &amp;lt;your UT EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;http://www.ae.utexas.edu/&quot;&gt;Department of Aerospace Engineering and Engineering Mechanics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; Undergraduate - &amp;lt;Freshman(1st year) / Sophomore(2nd year) / Junior(3rd year) / Senior(4th year)&amp;gt;&lt;br /&gt;
&lt;strong&gt;ICP Class Position:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;http://www.shahmoradi.orghttp:/ICP2017F/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/ICP2017F/images/amir.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;ICP2017F class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a &lt;em&gt;gh-pages&lt;/em&gt; branch for your project from master branch, such that your project is accessible through its web address based on the content of &lt;em&gt;gh-pages&lt;/em&gt; branch, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/1-problems-version-control-using-git-github&quot;&gt;Homework 1: Problems - Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 1: Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/1-assessing-your-programming-knowledge-and-interests"/>
  <id>http:/ICP2017F/announcement/1-assessing-your-programming-knowledge-and-interests</id>
  <published>2017-08-30T00:00:00-05:00</published>
  <updated>2017-08-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language of the class. Please fill out the following two survey questions, and submit them within 3 minutes.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,n,o){var s,c,m;t.SMCX=t.SMCX||[],e.getElementById(o)||(s=e.getElementsByTagName(n),c=s[s.length-1],m=e.createElement(n),m.type=&quot;text/javascript&quot;,m.async=!0,m.id=o,m.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/QVXTt9vEvYQmf6aZ6twhmx2kjfwCpdDvCImFnfDvD786R0JIq8qIpbqa6o0Atm0h.js&quot;].join(&quot;&quot;),c.parentNode.insertBefore(m,c))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-results&quot;&gt;Survey results&lt;/h2&gt;

&lt;p&gt;The following are the results of the two questions of the survey. The total respondents for both questions were 96. It appears that at least half of the class, knows at least one programming language at some elementary level. Also it appears that almost everyone in this class is in love with Python!&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/1/Q2.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/1/Q3.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/1/Q4.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/1/Q5.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/1-assessing-your-programming-knowledge-and-interests&quot;&gt;Announcement 1: Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on August 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/0-student-professor-connection-day"/>
  <id>http:/ICP2017F/announcement/0-student-professor-connection-day</id>
  <published>2017-08-30T00:00:00-05:00</published>
  <updated>2017-08-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;I have ordered cookies to be delivered to our first ICP class. We will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will give you links to two surveys that will assess your programming knowledge and will determine the favorite programming language which the majority of class wish to learn.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, currently at &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/&quot;&gt;Institute for Computational Engineering and Sciences&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;. I am a member of the &lt;a target=&quot;_blank&quot; href=&quot;http://cco.ices.utexas.edu/&quot;&gt;Center for Computational Oncology&lt;/a&gt; led by &lt;a target=&quot;_blank&quot; href=&quot;https://www.bme.utexas.edu/about-us/faculty-directory/yankeelov&quot;&gt;Dr. Thomas E. Yankeelov&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.ices.utexas.edu/people/85/&quot;&gt;Dr. J. Tinsley Oden&lt;/a&gt; at ICES with the goal of understanding Tumor Growth.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/PhDdefense.gif&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/EinsteinSandals.jpg&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/memoriesOfGreen.jpg&quot; width=&quot;200&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I was introduced to the world of information and computer programming around 1991 by my father and elder brother. By the end of elementary school, I was so impressed with and knew enough about computer software to write a few simple &lt;a target=&quot;_blank&quot; href=&quot; https://en.wikipedia.org/wiki/PC_game&quot;&gt;computer games&lt;/a&gt; in &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/QBasic&quot;&gt;QBasic programming language&lt;/a&gt; on our first family personal computer, &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/IBM_386SLC&quot;&gt;IBM 386&lt;/a&gt;. Here is an example of how computer games looked liked 30 years ago.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4TSF5sIgorA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
		&lt;!-- &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I never imagined a day I would use computer programming for scientific purposes. Nevertheless, there has been almost no single day that I have not used scientific programming for my work and research, ever since I entered graduate school.&lt;/p&gt;

&lt;h2 id=&quot;my-research-topics&quot;&gt;My research topics&lt;/h2&gt;

&lt;p&gt;The following are a few examples of what I do nowadays as part of my scientific research at UT Austin.&lt;/p&gt;

&lt;h3 id=&quot;theoretical-astrophysics&quot;&gt;Theoretical Astrophysics&lt;/h3&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/astro_1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theoretical-biology-bioinformatics&quot;&gt;Theoretical Biology, Bioinformatics&lt;/h3&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/bio_1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/bio_2.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;http://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;petroleum-engineering&quot;&gt;Petroleum Engineering&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/petro_1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;computational-oncology&quot;&gt;Computational Oncology&lt;/h3&gt;

&lt;p&gt;What you see in the figures below, is a representation of the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/onco_1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/onco_2.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/onco_3.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-temporal-evolution-of-the-growth-of-glioma-tumor-in-rat&quot;&gt;The temporal evolution of the growth of Glioma tumor in rat&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/GBGlastLong.gif&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

--&gt;

&lt;h3 id=&quot;monte-carlo-simulation-and-integration-methods&quot;&gt;Monte Carlo Simulation and Integration Methods&lt;/h3&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems.&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-sampling-algorithms&quot;&gt;Development of Monte Carlo sampling algorithms&lt;/h4&gt;

&lt;p&gt;Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/PDF_RS_H_Forever20ms.gif&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/PDF_RS_L_Forever20ms.gif&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-integration-algorithms&quot;&gt;Development of Monte Carlo integration algorithms&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/DRI.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/DLI.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/GR3D.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/GR2D.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/GR2D.gif&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/EB3D.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/0/EB2D.gif&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on August 30, 2017.&lt;/p&gt;</content>
</entry>

</feed>
