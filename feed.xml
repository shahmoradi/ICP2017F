<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ICP2017F/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ICP2017F/" />
<updated>2017-11-15T15:02:14-06:00</updated>
<id>http:/ICP2017F/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ICP2017F/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Lecture 12: MATLAB - plotting and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo"/>
  <id>http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo</id>
  <published>2017-11-17T00:00:00-06:00</published>
  <updated>2017-11-17T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some of the most important topics in MATLAB plotting, as well as random numbers and Monte Carlo methods in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;!--

## Lecture Videos

This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/4Fx4ulZt0_c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;

--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;curve-plotting-in-matlab&quot;&gt;Curve plotting in MATLAB&lt;/h2&gt;

&lt;p&gt;One of the most useful methods of outputting the results of your research and MATLAB projects is plotting. MATLAB is truly the unique best language for plotting data, and in my personal view, no other language comes even close to it (except perhaps, the R programming language which is specifically designed for data analysis and plotting). Here in this lecture, we will only review some of the most important and most useful plotting capabilities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;plotting-simple-2d-data&quot;&gt;Plotting simple 2D data&lt;/h3&gt;

&lt;p&gt;One of the most widely used MATLAB plotting functions is &lt;code&gt;plot()&lt;/code&gt;. With this function, plotting x-y data is as simple as it can be. All you need to have is a dataset consisting of X and Y vectors,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; X = 0:0.1:10;
&amp;gt;&amp;gt; plot(X,sin(X));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will open the following MATLAB figure page for you in the MATLAB environment,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sin.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You could also save this figure in almost any format you wish using &lt;code&gt;save()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; saveas(gcf,'sin.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, &lt;code&gt;gcf&lt;/code&gt; refers tothe current figure handle in MATLAB environment. If you wish to add new data to this plot, you could use &lt;code&gt;hold on;&lt;/code&gt; command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X));
&amp;gt;&amp;gt; saveas(gcf,'sinCos.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will save the following figure for you, on your local device,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCos.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;annotating-and-decorating-your-matlab-plots&quot;&gt;Annotating and decorating your MATLAB plots&lt;/h3&gt;

&lt;p&gt;Things you can do with MATLAB plotting functions is virtually endless, and there is no way we could cover all of them here in this course. Nevertheless, here are a few useful commands that help you decorate your plots. For example you could add a plot title as well as X-axis and Y-axis labels to your plots by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Also we could add legends to the plot, explaining what each line represents,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the &lt;code&gt;fontsize&lt;/code&gt; keyword is not necessary. You could simply omit it and MATLAB’s default font size will be used instead.&lt;/p&gt;

&lt;p&gt;You could also change the line-width of the borders of the plot, for example, by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, &lt;code&gt;gca&lt;/code&gt; is a MATLAB keyword that refers to the current active plot in the current active figure. If you wanted to thicken the curve lines themselves, you could simple add the &lt;code&gt;'linewidth'&lt;/code&gt; keyword when calling &lt;code&gt;plot()&lt;/code&gt;, along with the desired line width value. You could also determine the line color using &lt;code&gt;color&lt;/code&gt; keyword followed by the desired color,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hold off; % this closes access to the old figure
&amp;gt;&amp;gt; figure() % this creates a new figure handle
&amp;gt;&amp;gt; plot(X,sin(X),'linewidth',3, 'color', 'blue');
&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X),'linewidth',3, 'color', 'red');
&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&amp;gt;&amp;gt; saveas(gcf,'sinCosDecorated.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will generate the following figure and save it to your local hard drive,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCosDecorated.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can also plot the data using different line/ point styles. For example, to plot the same data using points instead of lines, all you need to do, is to add the &lt;code&gt;'.'&lt;/code&gt; string to your &lt;code&gt;plot()&lt;/code&gt; functions, indicating that you want a scatter plot, instead of line plot,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; figure() % this creates a new figure handle
&amp;gt;&amp;gt; plot(X,sin(X), '.', 'color', 'blue', 'markersize', 20);
&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X), '.', 'color', 'red', 'markersize', 20);
&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&amp;gt;&amp;gt; saveas(gcf,'sinCosDecoratedScatter.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which will produce and save the following plot,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCosDecoratedScatter.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To learn more about fantastic things you can do with MALTAB plotting functions, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/learn_matlab/basic-plotting-functions.html&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;other-more-complex-plotting-functions-in-matlab&quot;&gt;Other more complex plotting functions in MATLAB&lt;/h3&gt;

&lt;p&gt;MATLAB, as said above, has a tremendous set of plotting functions, which make it an ideally suited programming language for scientific research. We will learn how to use some of these functions in homework 5. &lt;a href=&quot;https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html&quot; target=&quot;_blank&quot;&gt;Here on this page&lt;/a&gt;, you can find a long list of MATLAB plotting functions and types of plots that you can draw using MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;closing-figures-and-plots-in-matlab&quot;&gt;Closing figures and plots in MATLAB&lt;/h3&gt;

&lt;p&gt;for closing the current active figure in MATLAB, you could simply use &lt;code&gt;close(gcf)&lt;/code&gt;. Here, &lt;code&gt;gcf&lt;/code&gt; refers to the current active figure handle. To close all open figures, simply type &lt;code&gt;close all;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;random-numbers-in-matlab&quot;&gt;Random numbers in MATLAB&lt;/h2&gt;

&lt;p&gt;One of the most important topics in today’s science and computer simulation is random number generation and Monte Carlo simulation methods. In the simplest scenario for your research, you may need to generate a sequence of uniformly distributed random numbers in MATLAB. MATLAB has a large set of built-in functions to handle such random number generation problems. All of these functions are collectively named the &lt;strong&gt;statistics and machine learning toolbox&lt;/strong&gt; in MATLAB.&lt;/p&gt;

&lt;p&gt;MATLAB has a long list of random number generators. For example, you can use &lt;code&gt;rand()&lt;/code&gt; to create a random number in the interval (0,1),&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = rand&lt;/code&gt; returns a single uniformly distributed random number in the interval (0,1).&lt;br /&gt;
– &lt;code&gt;X = rand(n)&lt;/code&gt; returns an n-by-n matrix of random numbers.&lt;br /&gt;
– &lt;code&gt;X = rand(n,m)&lt;/code&gt; returns an n-by-m matrix of random numbers.&lt;/p&gt;

&lt;p&gt;For example, suppose you generated 10000 uniform random numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; RandomValues = rand(10000,1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You could test whether the generated random numbers are truly uniformly distributed or not by plotting their histogram,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; histogram(RandomValues)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which will plot the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/unifrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To generate random integer numbers in a given range, you can use &lt;code&gt;randi()&lt;/code&gt; function,&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = randi(imax)&lt;/code&gt; returns a pseudorandom scalar integer between 1 and imax.&lt;br /&gt;
– &lt;code&gt;X = randi(imax,n)&lt;/code&gt; returns an n-by-n matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [1,imax].&lt;br /&gt;
– &lt;code&gt;X = randi(imax,n,m)&lt;/code&gt; returns an n-by-m matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [1,imax].&lt;br /&gt;
– &lt;code&gt;X = randi([imin,imax],n,m)&lt;/code&gt; an n-by-m matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [imin,imax].&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; randi([10 23], 3,2)
ans =
    20    16
    13    17
    18    11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that so far, we have only generated uniformly distributed float/integer random numbers. We could however, generate random numbers according to any distribution we wish, that is also supported by MATLAB. For example, a very popular distribution choice, is random number from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Normal (Gaussian) distribution&lt;/a&gt;. To get normally distributed random numbers, you can use MATLAB function &lt;code&gt;randn()&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = randn&lt;/code&gt; returns a random scalar drawn from the standard normal distribution (mean=0,sigma=1).&lt;br /&gt;
– &lt;code&gt;X = randn(n)&lt;/code&gt; returns an n-by-n matrix of standard-normally distributed random numbers.&lt;br /&gt;
– &lt;code&gt;X = randn(n,m)&lt;/code&gt; returns an n-by-m matrix of standard-normally distributed random numbers.&lt;/p&gt;

&lt;p&gt;Note that this function generated only &lt;strong&gt;standard&lt;/strong&gt;-normally distributed random values. Therefore, a histogram of 10000 of such values produced by &lt;code&gt;randn()&lt;/code&gt; would look something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SNormalValues = randn(10000,1);
&amp;gt;&amp;gt; histogram(SNormalValues);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/snormrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To get normally distributed random numbers with mean and standard deviation other than the standard normal distribution ($\mu=0,\sigma=1$), you will have to use another MATLAB builtin function &lt;code&gt;normrnd()&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;– R = normrnd(mu,sigma) generates random numbers from the normal distribution with mean parameter mu and standard deviation parameter sigma. mu and sigma can be vectors, matrices, or multidimensional arrays that have the same size, which is also the size of R. A scalar input for mu or sigma is expanded to a constant array with the same dimensions as the other input.&lt;br /&gt;
– R = normrnd(mu,sigma,m,n,…) or R = normrnd(mu,sigma,[m,n,…]) generates an m-by-n-by-… array. The mu, sigma parameters can each be scalars or arrays of the same size as R.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;NormalValues = normrnd(100, 10, 10000, 1);
&amp;gt;&amp;gt; histogram(NormalValues)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/normrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-deterministic-aspect-of-randomness-in-matlab&quot;&gt;The deterministic aspect of randomness in MATLAB&lt;/h3&gt;

&lt;p&gt;There is a truth about random numbers and random number generators and algorithms, not only in MATLAB, but in all programming languages, and that is, true random numbers do not exist in the world of programming!&lt;/p&gt;

&lt;p&gt;What we call a sequence of random numbers, is simply a sequence of numbers that we, the user, to the best of our knowledge, don’t know how it was generated, and therefore, the sequence looks random to us, but not the to the developer of the algorithm!. To prove this, type the following code in a MATLAB session,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng(135);
&amp;gt;&amp;gt; rand()
ans =
    0.8844
&amp;gt;&amp;gt; rand()
ans =
    0.0771
&amp;gt;&amp;gt; rand()
ans =
    0.5492
&amp;gt;&amp;gt; rand()
ans =
    0.8296
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, the function &lt;code&gt;rng()&lt;/code&gt; controls the random number generation algorithm using the input positive integer number. The truth is that every algorithm for random number generation is deterministic and starts from an input integer number, called the &lt;strong&gt;seed of random number generator&lt;/strong&gt;, to construct the sequence of random numbers. This means, that if we set the random number seed to a fixed value before we call the random number generator every time, then we will always get the same fixed random value (in fact, it is not random anymore!),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, every time you restart MATLAB, the random number generator seed is set back to the default value, nor matter what you set it to in the last time. This means that every time you open MATLAB, type &lt;code&gt;rand()&lt;/code&gt;, you will get the exact same random number as in the last time you opened MATLAB. To avoid this problem, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng('shuffle')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which seeds the random number generator based on the current time in the CPU. Thus, rand, randi, and randn will produce a different sequence of numbers after each time you call rng(‘shuffle’).&lt;/p&gt;

&lt;p&gt;Sometimes however, this is not the desired behavior. For example, you want the results of your code to be reproducible. In those cases, it is actually good to initialize the seed of the random number generator in MATLAB to some pre-specified number, so that every time you run your code, you get the exact same result as before. To learn more about the seed of random number generators in MATLAB, visit &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/rng.html?searchHighlight=rng&amp;amp;s_tid=doc_srchtitle&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-random-permutation-of-numbers&quot;&gt;Creating random permutation of numbers&lt;/h3&gt;

&lt;p&gt;There is a useful MATLAB function called &lt;code&gt;randperm()&lt;/code&gt; that generates a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_permutation&quot; target=&quot;_blank&quot;&gt;random permutation&lt;/a&gt; of numbers for the user,&lt;/p&gt;

&lt;p&gt;– p = randperm(n) returns a row vector containing a random permutation of the integers from 1 to n inclusive.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to get a sequence of random numbers within the range from 1 to a given maximum integer $n$, say $n=10$, in an arbitrary order, we could use this function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; randperm(10)
ans =
     8     5     2     1    10     6     4     3     9     7
&amp;gt;&amp;gt; randperm(10)
ans =
     4     8     1     3    10     2     5     7     9     6
&amp;gt;&amp;gt; randperm(10)
ans =
     6     1     2     4     5     8     7     3    10     9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that every time you call the function, you would get a new random permutation of the requested sequence of numbers.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo&quot;&gt;Lecture 12: MATLAB - plotting and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 17, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Solutions - MATLAB loops]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/4-solutions-matlab-loops"/>
  <id>http:/ICP2017F/quiz/4-solutions-matlab-loops</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;4-problems-matlab-loops.html&quot; target=&quot;_blank&quot;&gt;Quiz 4: Problems - MATLAB loops&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz4.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

--&gt;

&lt;p&gt;This quiz is about for loops, while loops and vectorization in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a function that takes an input integer, and computes its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n!=n\times (n-1) \times (n-2) \cdots \times 2 \times 1 ~,&lt;/script&gt;

&lt;p&gt;in the following ways:&lt;/p&gt;

&lt;p&gt;(a) Write this function using while-loop. Name it &lt;code&gt;getFacWhile(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(b) Write this function using for-loop. Name it &lt;code&gt;getFacFor(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(c) Write this function using the vectorization concept. Name it &lt;code&gt;getFacVec(n)&lt;/code&gt;. (Hint: for the vectorized version of this function, you will have to first create a vector of integers from 1 to n, using MATLAB vector construction notation (This is very simple and easy if you recall from lecture notes). Then use MATLAB’s built-in &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/prod.html&quot;&gt;prod()&lt;/a&gt; function to accomplish the task of computing $n!$ as given by the above equation.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here are the functions: &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacWhile.m&quot; target=&quot;_blank&quot;&gt;getFacWhile.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacFor.m&quot; target=&quot;_blank&quot;&gt;getFacFor.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacVec.m&quot; target=&quot;_blank&quot;&gt;getFacVec.m&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script, &lt;code&gt;timeFacFuncs.m&lt;/code&gt; that times the performance of the three functions you wrote in the previous problem, so that when you run this script, you get an output like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFacFuncs
average runtime for getFacWhile(1700000): 0.0054129 seconds
average runtime for getFacFor(1700000): 0.0080964 seconds
average runtime for getFacVec(1700000): 0.005283 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the script &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/timeFacFuncs.m&quot; target=&quot;_blank&quot;&gt;timeFacFuncs.m&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Extra Credit&lt;/strong&gt; Modify your answer to problem 1.(c) above in such a way that instead of using &lt;code&gt;prod()&lt;/code&gt;, you get the factorial using &lt;code&gt;sum()&lt;/code&gt; and some other elementary mathematical MATLAB functions. (Hint: for this problem, you will need to transform the numbers involved in calculations using some appropriate MATLAB mathematical function and revert the result at the end.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
You can do so, using &lt;code&gt;log()&lt;/code&gt; transformation of the numbers in factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n\times (n-1) \times \cdots \times 1 ~, \\
\Rightarrow \log(n!) = \log(n) + \log(n-1) + \cdots + \log(1) ~.&lt;/script&gt;

&lt;p&gt;Therefore, a possible implementation using &lt;code&gt;sum()&lt;/code&gt; could be this function: &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacVecSum.m&quot; target=&quot;_blank&quot;&gt;getFacVecSum.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/4-solutions-matlab-loops&quot;&gt;Quiz 4: Solutions - MATLAB loops&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Problems - MATLAB loops]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/4-problems-matlab-loops"/>
  <id>http:/ICP2017F/quiz/4-problems-matlab-loops</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about for loops, while loops and vectorization in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a function that takes an input integer, and computes its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n!=n\times (n-1) \times (n-2) \cdots \times 2 \times 1 ~,&lt;/script&gt;

&lt;p&gt;in the following ways:&lt;/p&gt;

&lt;p&gt;(a) Write this function using while-loop. Name it &lt;code&gt;getFacWhile(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(b) Write this function using for-loop. Name it &lt;code&gt;getFacFor(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(c) Write this function using the vectorization concept. Name it &lt;code&gt;getFacVec(n)&lt;/code&gt;. (Hint: for the vectorized version of this function, you will have to first create a vector of integers from 1 to n, using MATLAB vector construction notation (This is very simple and easy if you recall from lecture notes). Then use MATLAB’s built-in &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/prod.html&quot;&gt;prod()&lt;/a&gt; function to accomplish the task of computing $n!$ as given by the above equation.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script, &lt;code&gt;timeFacFuncs.m&lt;/code&gt; that times the performance of the three functions you wrote in the previous problem, so that when you run this script, you get an output like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFacFuncs
average runtime for getFacWhile(1700000): 0.0054129 seconds
average runtime for getFacFor(1700000): 0.0080964 seconds
average runtime for getFacVec(1700000): 0.005283 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Extra Credit&lt;/strong&gt; Modify your answer to problem 1.(c) above in such a way that instead of using &lt;code&gt;prod()&lt;/code&gt;, you get the factorial using &lt;code&gt;sum()&lt;/code&gt; and some other elementary mathematical MATLAB functions. (Hint: for this problem, you will need to transform the numbers involved in calculations using some appropriate MATLAB mathematical function and revert the result at the end.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/4-problems-matlab-loops&quot;&gt;Quiz 4: Problems - MATLAB loops&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Problems - MATLAB IO, plotting, and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo"/>
  <id>http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Nov 29, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with data input/output methods in MATLAB as well as plotting graphs and Monte Carlo techniques).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Creating random 3-member student groups for the semester project&lt;/strong&gt; Consider this &lt;a href=&quot;http:/ICP2017F/homework/5-problems/students.csv&quot; target=&quot;_blank&quot;&gt;csv data file&lt;/a&gt; which contains the names of all of the students in this course. Our goal here is to write a MATLAB script that reads all the names in this file, and then creates random triples of names to form student groups who would work collaboratively on the final semester project. To do so you will need MATLAB’s built-in function &lt;code&gt;randperm()&lt;/code&gt; which creates random permutations of student IDs in the range 1-99. Once you create a random permutation, you will have to write a MATLAB for-loop which takes triples of integers from this vector of random permutations and puts the names corresponding to these IDs together in a cell array. Finally, this cell array of 33-by-3 elements could be written to an output Microsoft xlsx file, using MATLAB’s &lt;code&gt;xlswrite()&lt;/code&gt; function. On output your script should yield an excel file like &lt;a href=&quot;http:/ICP2017F/homework/5-problems/nameTriples.xlsx&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;. To get the exact same order and triple of names, you will have to use &lt;code&gt;rng(131313)&lt;/code&gt; at the beginning of your script in order to initialize the seed of MATLAB random number generator to 131313 so that the table can be regenerated every time you run your code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Reading scientific data from web using MATLAB&lt;/strong&gt;. Consider the following webpage address &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&lt;/a&gt;. This is an data table (in HTML language) containing data from &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA’s Swift satellite&lt;/a&gt;. Each row in this table represents information about a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift has made in the past years. Now, corresponding to each of event IDs, there (might) exist files that contain some attributes of these events which we wish to plot and understand their behavior. For example, for the first event in this table, contains a data file which is hidden in a directory on this website &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. For each event in this table, there is likely one such table hidden in this web directory.&lt;/p&gt;

&lt;p&gt;Our goal in this question is to fetch all these files from the website, using MATLAB and save them locally in our own computer. Then read their contents one by one and plot the two columns of data in all of them together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a MATLAB script named &lt;code&gt;fetchDataFromWeb.m&lt;/code&gt; that uses this web address: &lt;code&gt;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/triggers.txt&lt;/code&gt; to read a list of all GRB events and then writes the entire table of &lt;code&gt;triggers.txt&lt;/code&gt; to a local file with the same name on your device. For this purpose, you will need MATLAB built-in function &lt;code&gt;webread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Now, add to your script another set of commands that uses the event IDs stored in this file, to generate the corresponding web addresses like: &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&lt;/a&gt;. Then it uses the generated web address to read the content of the page and store it in a local file on your device with the same name as it is stored on the webpage (for example, for the given webpage, the filename would be &lt;code&gt;GRB00745966_ep_flu.txt&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; Some of the web addresses for the given event IDs do not exist. Therefore, you should MATLAB’s try-catch construct to avoid runtime errors in your MATLAB code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now write another MATLAB script named &lt;code&gt;plotDatafromFile.m&lt;/code&gt;, that reads all of these files in your directory, one by one, using MATLAB &lt;code&gt;readtable()&lt;/code&gt; function, and plots the content of all of them together, on a single scatter plot (using MATLAB function &lt;code&gt;scatter()&lt;/code&gt;) like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/SwiftDataPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; again that some the data files stored on your computer are empty and some others have useless data if data in the second column of the file is larger than 0. So you will have to write your script in such a way that it checks for non-emptiness of the file (that is, the file does indeed contain some numerical data) as well as the negativity of the values in the column of data in each file. For example, you could check for the negativity of the values using MATLAB function &lt;code&gt;all(data[:,1]&amp;lt;0.0)&lt;/code&gt; assuming that data is the variable containing the information read from the file.&lt;/p&gt;

&lt;p&gt;Once you have done all these checks, you have to do one final manipulation of data, that is, the data in these files on the second column is actually the log of data, so have to get the &lt;code&gt;exp()&lt;/code&gt; value to plot it (because the plot in the figure above is a log-log plot and we want to exactly regenerate it). To do so you could simply use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;data[:,2] = exp(data[:,2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
as soon as you read from the file, and then finally you make a scatter plot of all data using MATLAB scatter plot. At the end, you will have to set a title for your plot as well and label the axes of the plot, and save your plot using MATLAB’s built-in function &lt;code&gt;saveas()&lt;/code&gt;. In order to find out how many files you have plotted in the figure, you will have to define a variable counter which increases by one unit, each time a new non-empty negative-second-column data file is read and plotted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the next three lectures in order to answer this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Simulating a fun Monte Carlo game.&lt;/strong&gt; Suppose you’re on a game show, and you’re given the choice of three doors:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_1.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Behind one door is a car; behind the two others, goats. You pick a door, say No. 1, and the host of the show opens another door, say No. 3, which has a goat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_open_door.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;He then says to you, “Do you want to pick door No. 2?”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What would you do?&lt;/strong&gt; Is it to your advantage to switch your choice from door 1 to door 2? Is it to your advantage, &lt;strong&gt;in the long run, for a large number of game tries&lt;/strong&gt;, to switch to the other door?&lt;/p&gt;

&lt;p&gt;Now whatever your answer is, I want you to check/prove your answer by a Monte Carlo simulation of this problem. Make a plot of your simulation for &lt;code&gt;nExperiments=100000&lt;/code&gt; repeat of this game, that shows, in the long run, on average, what is the probability of winning this game if you switch your choice, and what is the probability of winning, if you do not switch to the other door.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the lectures this week in order to get help for this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Monte Carlo approximation of the number $\pi$&lt;/strong&gt;. Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square of unit side, with its diagonal opposite corners extending from the coordinates origin $(0,0)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[0,1]$.&lt;/p&gt;

&lt;p&gt;Now the generated random point $P$ has the coordinate $(x,y)$, so we can calculate its distance from the coordinate origin. Now suppose we also draw a quarter-circle inside of this square whose radius is unit and is centered at the origin $(0,0)$. The ratio of the area of this quarter-circle, $S_C$ to the area of the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{S_C}{S_S} = \frac{\frac{1}{4}\pi r^2}{r^2} = \frac{1}{4}\pi&lt;/script&gt;

&lt;p&gt;This is because the area of the square of unit sides, is just 1. Therefore, if we can somehow measure the area of the quarter $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi = 4S_C&lt;/script&gt;

&lt;p&gt;In order to obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this quarter-circle. This fraction is related to the area of the circle and square by the following equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}&lt;/script&gt;

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi \approx \frac{1}{4}\frac{n_C}{n_{\rm total}}&lt;/script&gt;

&lt;p&gt;Now, write a MATLAB script, that takes in the number of points to be simulated, and then calculates an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points simulated, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-solutions/approximatePI.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo&quot;&gt;Homework 5: Problems - MATLAB IO, plotting, and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Solutions - loops, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/4-solutions-loops-IO"/>
  <id>http:/ICP2017F/homework/4-solutions-loops-IO</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;4-problems-loops-IO.html&quot; target=&quot;_blank&quot;&gt;Homework 4: Problems - loops, IO&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework2.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus question, is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Nov 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB for-loops and while-loops as well as input/output functionalities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop.&lt;/strong&gt; Consider the following two vectors of temperatures in Celsius degrees to Fahrenheit, using a for-loop and then prints them on screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
Fdegrees = [-20, -15, -5, 0, 10, 15, 30, 35, 40]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(A) Write a function that takes an input vector of temperatures, and a string which is either &lt;code&gt;'F2C'&lt;/code&gt; or &lt;code&gt;C2F&lt;/code&gt;. Then, converts the input temperature vector from Fahrenheit to Celsius if the input string is &lt;code&gt;'F2C'&lt;/code&gt;, otherwise converts the input temperature vector from Celsius to Fahrenheit if the input string is &lt;code&gt;'C2F'&lt;/code&gt;, otherwise outputs an error message and aborts the program.&lt;/p&gt;

&lt;p&gt;(A) Write this function using while-loop construct (you can name the function &lt;code&gt;convertTempFor.m&lt;/code&gt;).&lt;br /&gt;
(B) Write this function using for-loop construct (you can name the function &lt;code&gt;convertTempWhile.m&lt;/code&gt;).&lt;br /&gt;
(C) Write this function using vectorization concept (you can name the function &lt;code&gt;convertTempVec.m&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here are some example calls to these functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;InVec = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40];
&amp;gt;&amp;gt; convertTempFor(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempWhile(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempVec(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are the three &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempFor.m&quot; target=&quot;_blank&quot;&gt;convertTempFor.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempWhile.m&quot; target=&quot;_blank&quot;&gt;convertTempWhile.m&lt;/a&gt;, and &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempVec.m&quot; target=&quot;_blank&quot;&gt;convertTempVec.m&lt;/a&gt; functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Use MATLAB built-in timing functions to measure the performance of three functions you wrote in question 1 above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timing.m&quot; target=&quot;_blank&quot;&gt;one way (timing.m script)&lt;/a&gt; to time the functions. Here is a test result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timing
Timing for convertTempVec: 0.038723 seconds.
Timing for convertTempFor: 0.03936 seconds.
Timing for convertTempWhile: 0.18011 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following nested cell vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;List = { {'M','A','T','L','A','B'}, {' '}, {'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'}, {', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'} };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a MATLAB script &lt;code&gt;extractLetter.m&lt;/code&gt; that uses for-loop to extract all the letters in the variable list and finally prints them all as a single string like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; extractLetter
MATLAB is a strange, but popular programming language
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/extractLetter.m&quot; target=&quot;_blank&quot;&gt;example implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;The significant impact of round-off errors in numerical computation.&lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you see the behavior observed. In particular, why do you not recover the original value $2.0$ after many repetitions of the same forward and reverse task of taking square root and squaring the result?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This code (&lt;code&gt;roundoff.m&lt;/code&gt;) will yield the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt; roundoff
With 1 sqrt, then 1 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000004 
With 2 sqrt, then 2 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 3 sqrt, then 3 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 4 sqrt, then 4 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 5 sqrt, then 5 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 6 sqrt, then 6 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 7 sqrt, then 7 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999714 
With 8 sqrt, then 8 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 9 sqrt, then 9 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 10 sqrt, then 10 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 11 sqrt, then 11 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 12 sqrt, then 12 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999991336 
With 13 sqrt, then 13 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 14 sqrt, then 14 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 15 sqrt, then 15 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 16 sqrt, then 16 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000117746 
With 17 sqrt, then 17 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 18 sqrt, then 18 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 19 sqrt, then 19 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 20 sqrt, then 20 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 21 sqrt, then 21 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 22 sqrt, then 22 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000010885857 
With 23 sqrt, then 23 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000029511749 
With 24 sqrt, then 24 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 25 sqrt, then 25 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 26 sqrt, then 26 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 27 sqrt, then 27 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 28 sqrt, then 28 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 29 sqrt, then 29 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 30 sqrt, then 30 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 31 sqrt, then 31 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 32 sqrt, then 32 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999990380770896 
With 33 sqrt, then 33 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 34 sqrt, then 34 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 35 sqrt, then 35 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 36 sqrt, then 36 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 37 sqrt, then 37 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 38 sqrt, then 38 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 39 sqrt, then 39 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 40 sqrt, then 40 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 41 sqrt, then 41 times ^2 operations, the number 2.0000000000000000 becomes: 1.9994478907329654 
With 42 sqrt, then 42 times ^2 operations, the number 2.0000000000000000 becomes: 1.9984718365144798 
With 43 sqrt, then 43 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 44 sqrt, then 44 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 45 sqrt, then 45 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 46 sqrt, then 46 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 47 sqrt, then 47 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 48 sqrt, then 48 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 49 sqrt, then 49 times ^2 operations, the number 2.0000000000000000 becomes: 1.8682459487159784 
With 50 sqrt, then 50 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 51 sqrt, then 51 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 52 sqrt, then 52 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 53 sqrt, then 53 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 54 sqrt, then 54 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 55 sqrt, then 55 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 56 sqrt, then 56 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 57 sqrt, then 57 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 58 sqrt, then 58 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 59 sqrt, then 59 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 60 sqrt, then 60 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that, 1 is returned for n &amp;gt;= 52 as square root of 2, that is, after 52 times square-root operation, the degree of accuracy required for representing the result goes beyond the degree of accuracy available in a MATLAB double precision number. Consequently, the later squaring operation on 1.00000000000000 will leave the number unchanged and therefore, 2 is not recovered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;eps = 1.0;
while 1.0 ~= 1.0 + eps
    disp(num2str(eps));
    eps = eps / 2.0;
end
disp(['final eps:', num2str(eps)]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 ~= 1.0 + eps&lt;/code&gt; be &lt;code&gt;false&lt;/code&gt;?!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt; epsError
eps: 1
eps: 0.5
eps: 0.25
eps: 0.125
eps: 0.0625
eps: 0.03125
eps: 0.015625
eps: 0.0078125
eps: 0.0039063
eps: 0.0019531
eps: 0.00097656
eps: 0.00048828
eps: 0.00024414
eps: 0.00012207
eps: 6.1035e-05
eps: 3.0518e-05
eps: 1.5259e-05
eps: 7.6294e-06
eps: 3.8147e-06
eps: 1.9073e-06
eps: 9.5367e-07
eps: 4.7684e-07
eps: 2.3842e-07
eps: 1.1921e-07
eps: 5.9605e-08
eps: 2.9802e-08
eps: 1.4901e-08
eps: 7.4506e-09
eps: 3.7253e-09
eps: 1.8626e-09
eps: 9.3132e-10
eps: 4.6566e-10
eps: 2.3283e-10
eps: 1.1642e-10
eps: 5.8208e-11
eps: 2.9104e-11
eps: 1.4552e-11
eps: 7.276e-12
eps: 3.638e-12
eps: 1.819e-12
eps: 9.0949e-13
eps: 4.5475e-13
eps: 2.2737e-13
eps: 1.1369e-13
eps: 5.6843e-14
eps: 2.8422e-14
eps: 1.4211e-14
eps: 7.1054e-15
eps: 3.5527e-15
eps: 1.7764e-15
eps: 8.8818e-16
eps: 4.4409e-16
eps: 2.2204e-16
final eps:1.1102e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that after a certain number of divisions performed on the value of &lt;code&gt;eps&lt;/code&gt;, the value goes beyond the highest float precision representable by Python standard ($0.0000000000000001$), and therefore the value of &lt;code&gt;eps&lt;/code&gt; is eventually rounded to exact zero. The nonzero &lt;code&gt;eps&lt;/code&gt; value computed above is called &lt;strong&gt;machine epsilon&lt;/strong&gt; or &lt;strong&gt;machine zero&lt;/strong&gt; and is an important parameter to know, since it can lead to disasters in your very important complex calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function named &lt;code&gt;getLargestPrime&lt;/code&gt; that does so, using for-loop, break, and MATLAB’s intrinsic function isprime(). Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getLargestPrime(123)
ans =
   113
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function integer = getLargestPrime(upper)
    if (upper&amp;lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider the problem number 5 in HW 3, where we wrote a &lt;a href=&quot;http:/ICP2017F/homework/3/fib.m&quot;&gt;function&lt;/a&gt; named &lt;code&gt;fib.m&lt;/code&gt; that used the idea of recursive functions to generate the Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;(A) Download &lt;a href=&quot;http:/ICP2017F/homework/3/fib.m&quot; target=&quot;_blank&quot;&gt;this function fib()&lt;/a&gt; and modify it using MATLAB &lt;code&gt;timeit()&lt;/code&gt; function such that it also returns the average runtime of &lt;code&gt;getFib()&lt;/code&gt; nested function inside &lt;code&gt;fib()&lt;/code&gt;, right after giving the requested Fibonacci number. For example, here is an output from such modified code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 1.0083e-05 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 8.8884e-05 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 0.00095559 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 0.010311 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 0.11575 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 1.2904 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Note that you can use &lt;code&gt;char(9)&lt;/code&gt; at the beginning of your &lt;code&gt;disp()&lt;/code&gt; messages in order to add the &lt;code&gt;tab&lt;/code&gt; character at the beginning of your message, just like the above example.)&lt;/p&gt;

&lt;p&gt;(B) Now copy this function to a new MATLAB M-file named &lt;code&gt;fibLoop.m&lt;/code&gt;. Also modify the name of the function &lt;code&gt;fib()&lt;/code&gt; in this file &lt;code&gt;fibLoop()&lt;/code&gt;. Modify the nested function &lt;code&gt;getFib()&lt;/code&gt; inside of &lt;code&gt;fibLoop()&lt;/code&gt; such that instead of recursive function calls, it uses a for-loop to find the requested Fibonacci number.&lt;/p&gt;

&lt;p&gt;(C) Now time your new function &lt;code&gt;fibLoop()&lt;/code&gt; for the same input integers as in the above example: $10,15,20,25,30,35$. How do the runtimes for &lt;code&gt;fibLoop()&lt;/code&gt; compare with &lt;code&gt;fib()&lt;/code&gt;. Which function is faster and more efficient: &lt;code&gt;fib()&lt;/code&gt; or &lt;code&gt;fibLoop()&lt;/code&gt;? Why is there such huge difference in the performance of the two functions?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of the &lt;a href=&quot;http:/ICP2017F/homework/4/fib.m&quot; target=&quot;_blank&quot;&gt;modified fib()&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4/fibLoop.m&quot; target=&quot;_blank&quot;&gt;modified fib()&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fibLoop
Please enter a non-negative integer or type stop: 12
	fib(12) = 144
	average runtime: 4.3496e-06 seconds
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 4.5323e-06 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 4.5232e-06 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 4.6357e-06 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 4.6562e-06 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 4.7624e-06 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 4.7889e-06 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
As you see, the for-loop version of the function &lt;code&gt;fibLoop()&lt;/code&gt; is far faster than the recursive function version &lt;code&gt;fib()&lt;/code&gt;. The reason is that the recursive version is not well written and does a lot of redundant calculations. Ask me in class to explain for you why there is such a huge redundancy in this function calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; &lt;strong&gt;(A)&lt;/strong&gt; Write two new MATLAB functions &lt;code&gt;timeFib(n)&lt;/code&gt; and &lt;code&gt;timeFibLoop(n)&lt;/code&gt; based on your MATLAB functions &lt;code&gt;fib()&lt;/code&gt; and &lt;code&gt;fibLoop()&lt;/code&gt; that you wrote in problem 6, such that both take an integer and output a structure whose fields are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;output.n
output.fib
output.runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the function should take as input only an integer variable, so you need to modify your old codes to only check whether the input &lt;code&gt;~ischar()&lt;/code&gt;, and &lt;code&gt;isreal()&lt;/code&gt; and &lt;code&gt;n&amp;gt;=0&lt;/code&gt; and &lt;code&gt;round(n)==n&lt;/code&gt;. Here is an example output from the two functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFib(20)
ans = 
          n: 20
        fib: 6765
    runtime: 9.6568e-04
&amp;gt;&amp;gt; timeFib('amir')
Error using timeFib (line 8)
The input argument is not a non-negative integer! 
&amp;gt;&amp;gt; timeFibLoop(20)
ans = 
          n: 20
        fib: 6765
    runtime: 4.4076e-06
&amp;gt;&amp;gt; timeFibLoop('amir')
Error using timeFibLoop (line 8)
The input argument is not a non-negative integer! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Now write a script named &lt;code&gt;writeFibResult.m&lt;/code&gt; that calls these two functions for a range of input $n={10,2,3,\ldots,35}$ values, and then write the output of these two functions in a formatted way in two files like these &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibOutput.txt&quot; target=&quot;_blank&quot;&gt;fibOutput.txt&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibLoopOutput.txt&quot; target=&quot;_blank&quot;&gt;fibLoopOutput.txt&lt;/a&gt;. You can use any of MATLAB IO methods to create the output file with any file extension you prefer: &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.tab&lt;/code&gt;, … .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here the two functions &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timeFib.m&quot; target=&quot;_blank&quot;&gt;timeFib.m&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timeFibLoop.m&quot; target=&quot;_blank&quot;&gt;timeFibLoop.m&lt;/a&gt;, and here is the script &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/writeFibResult.m&quot; target=&quot;_blank&quot;&gt;writeFibResult.m&lt;/a&gt; that creates the requested output file in the problem.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/4-solutions-loops-IO&quot;&gt;Homework 4: Solutions - loops, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam final: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/exam/1-semester-project"/>
  <id>http:/ICP2017F/exam/1-semester-project</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the final semester project that will serve as the final exam for this course. Please submit all your efforts for this project (all files, data and results) in &lt;code&gt;ICP2017F/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by &lt;strong&gt;Dec 13 2017&lt;/strong&gt;.  **Note: I strongly urge you to attend the future lectures until the end of the semester and seek help from the instructor (Amir) to tackle this project.&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;ICP2017F/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/ICP2017F/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all your codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h2&gt;

&lt;p&gt;Our goal in this project is to fit a mathematical model of the growth of living cells to real experimental data for the growth of a cancer tumor in the brain of a rat. You can download the data in the form of a MATLAB data file for this project from &lt;a href=&quot;http:/ICP2017F/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a set of separate MATLAB codes that perform the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. Since you have multiple MATLAB codes each in a separate file for different purposes, you should also write a &lt;code&gt;main.m&lt;/code&gt; MATLAB code, such that when the user of your codes runs on MATLAB command line,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then all the necessary MATLAB codes to generate all the results will be called by this &lt;code&gt;main.m&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Initially at time $t=0 ~\mathrm{[days]}$, $100,000\pm10,000$ brain tumor cells are injected to the brain of the rat. These cells are then allowed to grow for 10 days. Then starting at day 10, the brain of the rat is imaged using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic_resonance_imaging&quot; target=&quot;_blank&quot;&gt;MRI machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each image results in a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for a period of two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1 [days]$.&lt;/p&gt;

&lt;p&gt;Therefore, the vector of times at which we have the number of tumor cells measured would be,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Time = [ 0, 10, 12, 14, 16, 18, 20, 22, 24 ] ~,&lt;/script&gt;

&lt;p&gt;in units of days. Given this data set,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a MATLAB script that reads the input MATLAB file containing cell numbers at different positions in the rat’s brain measured by MRI, on different days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write MATLAB codes that generate a set of figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts). For this part of the project you will MATLAB plotting functions such as &lt;code&gt;plot()&lt;/code&gt;, &lt;code&gt;imagesc()&lt;/code&gt; and the concept subplots in MATLAB.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;obtaining-the-error-in-tumor-cell-count&quot;&gt;Obtaining the error in tumor cell count&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Our assumption here is that the uncertainty in the total number of tumor cells at each time point is given by the number of tumor cells at the boundary of tumor. Therefore, you will have to write a MATLAB code that identifies the boundary of tumor at each time point and then sums over the count cells in all boundary points and uses that as the error in number of tumor cell counts. For this part, you will need MATLAB functions such as &lt;code&gt;bwboundaries()&lt;/code&gt; and &lt;code&gt;errorbar()&lt;/code&gt;. In the end, you should get and save a figure in your project’s figure folder like the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/growthCurve.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that this part of the project is completely independent of the modeling part described in the following section.&lt;/p&gt;

&lt;h2 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model. To do so, we need to find the best-fit parameters of the model. The mathematical model we will use here is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertzian growth model&lt;/a&gt;. Here, we will use a slightly modified for of the Gompertzian function of the following form,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,N_0,\lambda,c) = N_0 \times \exp\bigg( \lambda~\bigg[ 1-\exp(-ct) \bigg] \bigg) ~,&lt;/script&gt;

&lt;p&gt;where $N(t)$ is the number of tumor cells at time $t$, $N_0$ is the initial number of tumor cells at time $t=0$ days, $\lambda$ is the growth rate parameter of the model, and $c$ is just another parameter of the model. We already know the initial value of the number of tumor cells, $N_0=100,000\pm10,000$. Therefore, we can fix $N_0$ to $100,000$ in the equation of the model given above.&lt;/p&gt;

&lt;p&gt;However, we don’t know the values of the parameters $\lambda$ and $c$. Thus, we would like to find their best values given the input tumor cell data using some MATLAB optimization algorithm.&lt;/p&gt;

&lt;p&gt;This Gompertzian growth model is called our &lt;strong&gt;physical model&lt;/strong&gt; for this problem., because it describes the physics of our problem.&lt;/p&gt;

&lt;h3 id=&quot;combining-the-physical-model-with-a-regression-model&quot;&gt;Combining the physical model with a regression model&lt;/h3&gt;

&lt;p&gt;Now, if our physical model was ideally perfect in describing the data, the curve of the model prediction would pass through all the points in the growth curve plot of the above figure, thus providing a prefect description of data. This is however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly. Therefore, we have to seek for the parameter values of the model that can get us as close as possible to data. To do so, we define a &lt;strong&gt;statistical model&lt;/strong&gt; in addition to the &lt;strong&gt;physical model&lt;/strong&gt; described above. In other words, we have to define a statistical regression model (the renowned &lt;strong&gt;least-squares method&lt;/strong&gt;) that gives us the probability $\pi(N_{obs}|N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(N_{obs} | N(t|N_0,\lambda,c),\sigma) = \frac{1}{N_{obs}\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t)-\log N(t|N_0,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;Note that our statistical model given above is a Lognormal probability density function, with its mean parameter represented by the output of our physical model, $\log N(t|a,b,c)$, and its standard deviation represented by $\sigma$, which is unknown, and we seek to find it.&lt;/p&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together given the parameters of the model, $\mathcal{L}(\mathcal{D}|N_0,\lambda,c,\sigma)$, is the product of their individual probabilities of observations given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{L}(\mathcal{D}|N_0,\lambda,c,\sigma) 
&amp;= \prod_{i=1}^{n=8} \pi(N_{obs}(t_i)|N(t_i|N_0,\lambda,c),\sigma) \\\\
&amp;= \prod_{i=1}^{n=8} \frac{1}{N_{obs}\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i|N_0,\lambda,c,\sigma) \big]^2}{2\sigma^2} \bigg) ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Frequently however, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$, so the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(\mathcal{D}|N_0,\lambda,c,\sigma)
    &amp;= \sum_{i=1}^{n=8} \log \pi(N_{obs}(t_i)|N(t_i|N_0,\lambda,c),\sigma) \\\\
    &amp;= \sum_{i=1}^{n=8} \log \bigg[ \frac{1}{N_{obs}\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i|N_0,\lambda,c,\sigma) \big]^2}{2\sigma^2} \bigg) \bigg] ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;  Now the goal is to use an optimization algorithm in MATLAB, such as &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely set of the parameters of the model $\lambda,c,\sigma$ that give the best prediction of the available data. You can also use any other function or method that you wish, to obtain the best parameters.&lt;/p&gt;

&lt;p&gt;Once you find the optimal parameters, then redraw the above tumor evolution curve and show the result from the model as well, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/growthCurveFit.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Report also your best fit parameters in a file and submit them with all the figures and your codes to your exam folder repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; You can use $(\lambda,c,\log\sigma) = [10,0.1,0]$ as your starting point given to &lt;code&gt;fminsearch()&lt;/code&gt; to search for the optimal values of the parameters. I again urge you strongly to attend the remaining lectures until the end of the semester, and seek help from the instructor about details of the steps involved in this project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/exam/1-semester-project&quot;&gt;Exam final: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 11: MATLAB - Input/Output (IO)]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/11-matlab-IO"/>
  <id>http:/ICP2017F/lecture/11-matlab-IO</id>
  <published>2017-11-08T00:00:00-06:00</published>
  <updated>2017-11-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses topics on data Input/Output processes in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/fcHoYAeiKiI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far in this course, we have indirectly discussed several methods of getting input information from the user, and several methods of outputting the result in a MATLAB program. This lecture, attempts at formalizing all the previous discussions and introduce more general efficient methods of code interaction with users.&lt;/p&gt;

&lt;h2 id=&quot;methods-of-data-inputoutput-in-matlab&quot;&gt;Methods of data input/output in MATLAB&lt;/h2&gt;

&lt;p&gt;Let’s begin with an example code, explaining the meaning of input/output (I/O) in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 0.1;
b = 1;
x = 0.6;
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.1822
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; are examples of input data to a code, and &lt;code&gt;y&lt;/code&gt; is an example of code output. In such cases as in the above, the input data is said to be &lt;strong&gt;hardcoded&lt;/strong&gt; in the program.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;b&gt;In general, in any programming language, including MATLAB, you should avoid hardcoding input information to your program as much as possible.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If data is hardcoded, then every time that it needs to be changed, the user has to change the content of the code. This is not considered good programming style for software development.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
In general, input data can be fed to a program in four different ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;let the user answer questions in a dialog in &lt;strong&gt;MATLAB terminal window&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input on the &lt;strong&gt;operating system command line&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user write input data in a &lt;strong&gt;graphical interface&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input data in a &lt;strong&gt;file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For outputting data, there are two major methods,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;writing to the terminal window, as previously done using print() function, or,&lt;/li&gt;
  &lt;li&gt;writing to an output file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have already extensively discussed printing output to the terminal window. Reading from and writing data to file is also easy as we see in this lecture.&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-from-matlab-terminal-window&quot;&gt;Input/output from MATLAB terminal window&lt;/h3&gt;

&lt;p&gt;We have already introduced and used this method frequently in previous lectures, via the MATLAB’s built-in function &lt;code&gt;input()&lt;/code&gt;. If we were to get the input data for the above code via the terminal window, an example approach would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;datain = input('input [a,b,c]: ');
a = datain(1);
b = datain(2);
x = datain(3);
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a,b,c: [0.1, 1, 0.6]
y =
    0.1822
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One could also read the input values as string ans then convert them to real values or parse the input using one of MATLAB’s built-in functions, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; datain = input('input [a,b,c]: ','s');
input [a,b,c]: [0.1, 1, 0.6]
&amp;gt;&amp;gt; class(datain)
ans =
char
&amp;gt;&amp;gt; datain = str2num(datain)
datain =
    0.1000    1.0000    0.6000
&amp;gt;&amp;gt; class(datain)
ans =
double
&amp;gt;&amp;gt; a = datain(1);
&amp;gt;&amp;gt; b = datain(2);
&amp;gt;&amp;gt; x = datain(3);
&amp;gt;&amp;gt; y = a*exp(b*x)
y =
    0.1822
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-operating-systems-command-line&quot;&gt;Input/output data from operating system’s command line&lt;/h3&gt;

&lt;p&gt;This approach is most popular in Unix-like environments, where most users are accustomed to using Bash command line. However, it can be readily used in &lt;a href=&quot;https://en.wikipedia.org/wiki/Cmd.exe&quot; target=&quot;_blank&quot;&gt;Windows cmd&lt;/a&gt; environment as well. For this approach, we have to invoke MATLAB from the computer operating system’s command line, that is, Bash in Linux systems, and cmd in Windows,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;start matlab -nosplash -nodesktop -r &quot;testIO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then a MATLAB command-line window opens in your computer like the following that runs automatically your code (stored in &lt;code&gt;testIO.m&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/lecture/11/matlab.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
In the above command, we are basically starting MATLAB from the OS command line with our own choice of optional arguments for MATLAB. You can specify startup options (also called &lt;strong&gt;command flags&lt;/strong&gt; or &lt;strong&gt;command-line switches&lt;/strong&gt;) that instruct the MATLAB program to perform certain operations when you start it. On all platforms, specify the options as arguments to the matlab command when you start at the operating system prompt. For example, the following starts MATLAB and suppresses the display of the splash screen (a splash screen is a graphical control element consisting of a window containing an image, a logo, and the current version of the software. A splash screen usually appears while a game or program is launching),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;matlab -nosplash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The flag &lt;code&gt;-nodesktop&lt;/code&gt; result in opening only the MATLAB command line, and no MATLAB Graphical user interface (GUI) just like the figure above. Finally, the flag &lt;code&gt;-r&lt;/code&gt; executes the MATLAB file that appears right after it, specified as a string or as the name of a MATLAB script or function. If statement is MATLAB code, you should enclose the string with double quotation marks. If statement is the name of a MATLAB function or script, &lt;strong&gt;do not specify the file extension&lt;/strong&gt; and &lt;strong&gt;do not use quotation marks&lt;/strong&gt;. Any required file must be on the MATLAB search path or in the startup folder. You can also set MATLAB’s working folder right from the command-line using &lt;code&gt;-sd&lt;/code&gt; flag. You can find find more information about all possible flags &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/matlabwindows.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. On Windows platforms, you can precede a startup option with either a hyphen (&lt;code&gt;-&lt;/code&gt;) or a slash (&lt;code&gt;/&lt;/code&gt;). For example, &lt;code&gt;-nosplash&lt;/code&gt; and &lt;code&gt;/nosplash&lt;/code&gt; are equivalent.&lt;/p&gt;

&lt;p&gt;Note that you can also quote MATLAB on the OS command line, along with the name of the script you want to run. For example, suppose you wanted to run the original script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = 0.1;
b = 1;
x = 0.6;
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
but now with &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, given at runtime. You could write a script file &lt;code&gt;test.m&lt;/code&gt; that contains,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and give the variables values at runtime, on OS command line, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;matlab -nosplash -nodesktop -r &quot;a = 0.1; b = 1; x = 0.6; testIO&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The figure below shows a screen-shot illustrarting the output of the above command.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/lecture/11/matlab1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-a-graphical-user-interface&quot;&gt;Input/output data from a Graphical User Interface&lt;/h3&gt;

&lt;p&gt;This method of inputting data is done by constructing a Graphical User Interface  (GUI) which opens and takes input from the user. This is probably one of the most convenient methods for the users to input data. You can do this in MATLAB for example by using the built-in function &lt;code&gt;inputdlg()&lt;/code&gt; which creates dialog box that gathers user input. But this method of data colleciton is beyond the scope of our class.  More information about this can be found &lt;a href=&quot;http://www.mathworks.com/help/matlab/ref/inputdlg.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-file&quot;&gt;Input/output data from file&lt;/h3&gt;
&lt;p&gt;In cases where the input/output data is large, the command-line arguments and input from terminal window are not efficient anymore. In such cases, the most common approach is to let the code read/write data from a pre-existing file, the path to which is most often given to the code via the OS command line or MATLAB terminal window.&lt;/p&gt;

&lt;p&gt;There are many methods of importing and exporting data to and from MATLAB, only some of which we will discuss here. For more information see &lt;a href=&quot;https://www.mathworks.com/help/matlab/import_export/ways-to-import-text-files.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-import-and-export.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;https://www.mathworks.com/help/matlab/text-files.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. The following table shows some of the most important import functions in MATLAB, which we will discuss here as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Common Methods for Importing Data from a File to MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Function&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;load()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Load MATLAB variables from file into MATLAB workspace&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;save()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; save MATLAB variables from MATLAB workspace into a MATLAB `.mat` file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fscanf()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read data from text file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fprintf()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write data to a text file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dlmread()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read ASCII-delimited file of numeric data into matrix&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dlmwrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write a numeric matrix into ASCII-delimited file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;csvread()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read comma-separated value (CSV) file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;csvwrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write values of a matrix into a comma-separated (CSV) file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;xlswrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read Microsoft Excel spreadsheet file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;xlswrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; write data into a Microsoft Excel spreadsheet file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;readtable()  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Create table from file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;writetable() &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write table to file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;imread()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read image from graphics file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;imwrite()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write image to graphics file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;importdata() &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Load data from file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;textscan()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read formatted data from text file or string&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fgetl()      &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read line from file, removing newline characters&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fread()      &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read data from binary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fwrite()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write data to binary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;type()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Display contents of file&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;loadingsaving-matlab-workspace-variables&quot;&gt;Loading/saving MATLAB workspace variables&lt;/h4&gt;

&lt;p&gt;MATLAB has two useful functions that can save the workspace variables into special MATLAB &lt;code&gt;.mat&lt;/code&gt; files, to be later load again into the same or another MATLAB workspace for further work or manipulation. The function &lt;code&gt;save()&lt;/code&gt; saves workspace variables to a given file. The most useful options for this function are the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;save(filename)
save(filename,variables)
save(filename,variables,fmt)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;save(filename)&lt;/code&gt; saves all variables from the current workspace in a MATLAB formatted binary file called &lt;strong&gt;MAT-file&lt;/strong&gt; with the given name &lt;code&gt;filename&lt;/code&gt;. If the file &lt;code&gt;filename&lt;/code&gt; exists, &lt;code&gt;save()&lt;/code&gt; overwrites the file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;save(filename,variables)&lt;/code&gt; saves only the variables or fields of a structure array specified by &lt;code&gt;variables&lt;/code&gt;. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;p = rand(1,10);
q = ones(10);
save('pqfile.mat','p','q')
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
will create the binary MAT file &lt;a href=&quot;http:/ICP2017F/lecture/11/pqfile.mat&quot; target=&quot;_blank&quot;&gt;pqfile.mat&lt;/a&gt; which contains the two variables.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;save(filename,variables,fmt)&lt;/code&gt; saves the requested variables with the file format specified by &lt;code&gt;fmt&lt;/code&gt;. The variables argument is optional. If you do not specify variables, the save function saves all variables in the workspace. File format, specified as one of the following. When using the command form of save, you do not need to enclose the input in single or double quotes, for example, save myFile.txt -ascii -tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Common Methods for Importing Data from a File to MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Value of fmt&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;File Format&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-mat'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Binary MAT-file format.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Text format with 8 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-tabs'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Tab-delimited text format with 8 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-double'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Text format with 16 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-double','-tabs'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Tab-delimited text format with 16 digits of precision.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;p = rand(1,10);
q = ones(10);
save('pqfile.txt','p','q','-ascii')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will create an ASCII text file &lt;a href=&quot;http:/ICP2017F/lecture/11/pqfile.txt&quot; target=&quot;_blank&quot;&gt;pqfile.txt&lt;/a&gt; which contains the two variables &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, one can reload the same files into MATLAB workspace again if needed, for example using MATLAB &lt;code&gt;load()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; load('pqfile.txt')
&amp;gt;&amp;gt; pqfile
pqfile =
  Columns 1 through 8
    0.0975    0.2785    0.5469    0.9575    0.9649    0.1576    0.9706    0.9572
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
  Columns 9 through 10
    0.4854    0.8003
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But note that upon loading the Ascii file, the information about the individual variables is lost. By contrast, loading data using the MAT file will preserve the variables structure,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; load('pqfile.mat')
&amp;gt;&amp;gt; p
p =
  Columns 1 through 8
    0.1419    0.4218    0.9157    0.7922    0.9595    0.6557    0.0357    0.8491
  Columns 9 through 10
    0.9340    0.6787
&amp;gt;&amp;gt; q
q =
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-a-formatted-file-using-fscanf-and-fprintf&quot;&gt;Reading/writing a formatted file using &lt;code&gt;fscanf()&lt;/code&gt; and &lt;code&gt;fprintf()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;There are numerous methods of reading the contents of a file in MATLAB. The most trivial and probably least pleasing method is through MATLAB’s built-in function &lt;code&gt;fscanf()&lt;/code&gt;. To read a file, say &lt;a href=&quot;http:/ICP2017F/lecture/11/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, you will have to first open it in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;fileID = fopen('data.in','r');
formatSpec = '%f';
A = fscanf(fileID,formatSpec)
fclose(fileID);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A =
    1
    3
    4
    5
    6
    7
    88
    65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that unlike the C language’s &lt;code&gt;fscanf()&lt;/code&gt;, in MATLAB &lt;code&gt;fscanf()&lt;/code&gt; is vectorized meaning that it can read multiple lines all at once. Here, the attribute &lt;code&gt;'r'&lt;/code&gt; states that the file is opened for the purpose of reading it (vs writing, or some other purpose). A list of available options for &lt;code&gt;fopen()&lt;/code&gt; are the following,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Attributes for MATLAB function &lt;code&gt;fopen()&lt;/code&gt;.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Attribute&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;'r' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for reading.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'w' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for writing. Discard existing contents, if any.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'a' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for writing. Append data to the end of the file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'r+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for reading and writing.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'w+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for reading and writing. Discard existing contents, if any.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'a+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for reading and writing. Append data to the end of the file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'A' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for appending without automatic flushing of the current output buffer.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'W' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for writing without automatic flushing of the current output buffer.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The general syntax for reading an array from an input file using &lt;code&gt;fscanf()&lt;/code&gt; is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;array = fscanf(fid,format)
[array, count] = fscanf(fid,format,size)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where the optional argument &lt;code&gt;size&lt;/code&gt; specifies the amount of data to be read from the file. There are three versions of this argument,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;n&lt;/code&gt;: Reads exactly &lt;code&gt;n&lt;/code&gt; values. After this statement, &lt;code&gt;array&lt;/code&gt; will be a column vector containing &lt;code&gt;n&lt;/code&gt; values read from the file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Inf&lt;/code&gt;: Reads until the end of the file. After this statement, &lt;code&gt;array&lt;/code&gt; will be a column vector containing all of the data until the end of the file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[n m]&lt;/code&gt;: Reads exactly, $n\times m$ values, and format the data as an $n\times m$ array. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/nums2.txt&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, which contains two columns of numeric data. One could read this data using &lt;code&gt;fscanf()&lt;/code&gt; like the following,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; formatSpec = '%d %f';
&amp;gt;&amp;gt; sizeA = [2 Inf];
&amp;gt;&amp;gt; fileID = fopen('nums2.txt','r');
&amp;gt;&amp;gt; A = transpose(fscanf(fileID,formatSpec,sizeA))
&amp;gt;&amp;gt; fclose(fileID);
A =
  1.0000    2.0000    3.0000    4.0000    5.0000
  0.8147    0.9058    0.1270    0.9134    0.6324
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Now suppose you perform some on operation on &lt;code&gt;A&lt;/code&gt;, say the elemental multiplication of &lt;code&gt;A&lt;/code&gt; by itself. Then you want to store (append) the result into another file. You can do this using MATLAB function &lt;code&gt;fprintf()&lt;/code&gt;,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; formatSpec = '%d %f \n';
&amp;gt;&amp;gt; fileID = fopen('nums3.txt','w+');
&amp;gt;&amp;gt; fprintf(fileID,formatSpec,A.*A);
&amp;gt;&amp;gt; fclose(fileID);
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The option &lt;code&gt;w+&lt;/code&gt; tells MATLAB to store the result in a file named &lt;a href=&quot;http:/ICP2017F/lecture/11/nums3.txt&quot; target=&quot;_blank&quot;&gt;num3.txt&lt;/a&gt;, and if the file does already exist, then append the result to the end of the current existing file. To see what formatting specifiers you can use with MATLAB &lt;code&gt;fscanf()&lt;/code&gt; and &lt;code&gt;fprintf()&lt;/code&gt;, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/fprintf.html&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MATLAB also has some rules to skip characters that are unwanted in the text file. These rules are really details that are specific to your needs and the best approach is to seek the solution to your specific problem by searching MATLAB’s  manual or the web. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/temperature.dat&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; which contains a set of temperature values in degrees (including the Celsius degrees symbol). One way to read this file and skipping the degrees symbol in MATLAB could be then the following set of commands,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fileID = fopen('temperature.dat','r');
&amp;gt;&amp;gt; degrees = char(176);
&amp;gt;&amp;gt; [A,count] = fscanf(fileID, ['%d' degrees 'C'])
&amp;gt;&amp;gt; fclose(fileID);
A =
    78
    72
    64
    66
    49
count =
     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This method of reading a file is very powerful but rather detailed, low-level and cumbersome, specially that you have to define the format for the content of the file appropriately. Most often, other higher-level MATLAB’s built-in function come to rescue us from the hassles of using &lt;code&gt;fscanf()&lt;/code&gt;. For more information about this function though, if you really want to stick to it, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/fscanf.html#buaio_v-5&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some important MATLAB special characters (&lt;strong&gt;escape characters&lt;/strong&gt;) that can also appear in &lt;code&gt;fprintf()&lt;/code&gt; are also given in the following table.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of escape characters in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Effect on Text&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single quotation mark&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single percent sign&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single backslash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;&lt;td&gt;New line&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Horizontal tab&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Vertical tab&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-dlmreaddlmwrite-and-csvreadcsvwrite&quot;&gt;Reading/writing data using &lt;code&gt;dlmread()/dlmwrite()&lt;/code&gt; and &lt;code&gt;csvread()/csvwrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The methods discussed above are rather primitive, in that they require a bit of effort by the user to know something about the structure of the file and its format. MATLAB has a long list of advanced IO functions that can handle a wide variety of data file formats. Two of the most common functions are dedicated specifically to read data files containing delimited data sets: &lt;code&gt;csvread()&lt;/code&gt; and &lt;code&gt;dlmread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the field of scientific computing, a &lt;strong&gt;Comma-Separated Values (CSV)&lt;/strong&gt; data file is a type of file with extension &lt;code&gt;.csv&lt;/code&gt;, which stores tabular data (numbers and text) in plain text format. Each line of the file is called a &lt;strong&gt;data record&lt;/strong&gt; and each record consists of one or more &lt;strong&gt;fields, separated by commas&lt;/strong&gt;. The use of the &lt;strong&gt;comma&lt;/strong&gt; as a &lt;strong&gt;field separator&lt;/strong&gt; is the source of the name for this file format.&lt;/p&gt;

&lt;p&gt;Now suppose you wanted to read two matrices whose elements were stored in CSV format in two csv data files &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix1.csv&quot; target=&quot;_blank&quot;&gt;matrix1.csv&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix2.csv&quot; target=&quot;_blank&quot;&gt;matrix2.csv&lt;/a&gt;. You can accomplish this task simply by calling MATLAB’s built-in csv-reader function called &lt;code&gt;csvread(filename)&lt;/code&gt;. Here the word &lt;code&gt;filename&lt;/code&gt; is the path to the file in your local hard drive. For example, download these two given csv files above in your MATLAB working directory and then try,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Mat1 = csvread('matrix1.csv');
&amp;gt;&amp;gt; Mat2 = csvread('matrix2.csv');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then suppose you want to multiply these two vectors and store the result in a new variable and write it to new output csv file. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Mat3 = Mat1 * Mat2;
&amp;gt;&amp;gt; csvwrite('matrix3.csv',Mat3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which would output &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix3.csv&quot; target=&quot;_blank&quot;&gt;this file: matrix3.csv&lt;/a&gt; for you.&lt;/p&gt;

&lt;p&gt;Alternatively, you could also use MATLAB’s built-in functions &lt;code&gt;dlmread()&lt;/code&gt; and &lt;code&gt;dlmwrite()&lt;/code&gt; functions to do the same things as above. These two functions read and write ASCII-delimited file of numeric data. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Mat1 = dlmread('matrix1.csv');
&amp;gt;&amp;gt; Mat2 = dlmread('matrix2.csv');
&amp;gt;&amp;gt; Mat3 = Mat1 * Mat2;
&amp;gt;&amp;gt; dlmwrite('matrix3.dat',Mat3);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, &lt;code&gt;dlmread()&lt;/code&gt; and &lt;code&gt;dlmwrite()&lt;/code&gt; come with an optional argument &lt;code&gt;delimiter&lt;/code&gt; of the following format,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dlmread(filename,delimiter)
&amp;gt;&amp;gt; dlmwrite(filename,matrixObject,delimiter)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where the argument &lt;code&gt;delimiter&lt;/code&gt; is the &lt;strong&gt;field delimiter character&lt;/strong&gt;, specified as a character vector or string. For, example in the above case, the delimiter is comma &lt;code&gt;','&lt;/code&gt;. In other cases, you could for example use white space &lt;code&gt;' '&lt;/code&gt;, or &lt;code&gt;'\t'&lt;/code&gt; to specify a tab delimiter, and so on. For example, you could have equally written,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dlmwrite('matrix4.dat',Mat3,'\t');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to create a tab-delimited file named &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix4.csv&quot; target=&quot;_blank&quot;&gt;matrix4.dat&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-xlsread-and-xlswrite&quot;&gt;Reading/writing data using &lt;code&gt;xlsread()&lt;/code&gt; and &lt;code&gt;xlswrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Once data becomes more complex than simple numeric matrices or vectors, then we need more complex MATLAB functions for IO. An example of such case, is when you have stored your information in Microsoft Excel file. For such cases, you can use &lt;code&gt;xlsread(filename)&lt;/code&gt; to read the file specified by the input argument &lt;code&gt;filename&lt;/code&gt; to this function. We will later on see some example usages of this function in homework. Similarly, you could write data into an excel file using &lt;code&gt;xlswrite()&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = {1, 2, 3 ; 4, 5, 'x' ; 7, 8, 9};
&amp;gt;&amp;gt; headers = {'First','Second','Third'};
&amp;gt;&amp;gt; xlswrite('XlsExample.xlsx',[headers; values]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
would create this &lt;a href=&quot;http:/ICP2017F/lecture/11/XlsExample.xlsx&quot; target=&quot;_blank&quot;&gt;Microsoft Excel file&lt;/a&gt; for you.&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-readtable-and-writetable&quot;&gt;Reading/writing data using &lt;code&gt;readtable()&lt;/code&gt; and &lt;code&gt;writetable()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Another important and highly useful set of MATLAB functions for IO are &lt;code&gt;readtable()&lt;/code&gt; and &lt;code&gt;writetable()&lt;/code&gt;. The function &lt;code&gt;readtable()&lt;/code&gt; is used to read data into MATLAB in the form of a MATLAB table data type. For example, you could read the same Excel file that we created above into MATLAB using &lt;code&gt;readtable()&lt;/code&gt; instead of &lt;code&gt;xlsread()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; XlsTable = readtable('XlsExample.xlsx')
XlsTable = 
    First    Second    Third
    _____    ______    _____

    1        2         '3'  
    4        5         'x'  
    7        8         '9'  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reading-and-writing-image-files-using-imread-and-imwrite&quot;&gt;Reading and writing image files using &lt;code&gt;imread()&lt;/code&gt; and &lt;code&gt;imwrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;MATLAB has a really wide range of input/output methods of data. We have already discussed some of the most useful IO approaches in the previous sections. For graphics files however, none of the previous functions are useful. Suppose you wanted to import a &lt;strong&gt;jpg&lt;/strong&gt; or &lt;strong&gt;png&lt;/strong&gt; or some other type graphics file into MATLAB in order to further process it. For this purpose MATLAB has the built-in function &lt;code&gt;imread()&lt;/code&gt; which can read image from an input graphics file. For example, to read &lt;a href=&quot;http:/ICP2017F/lecture/11/homer.jpg&quot; target=&quot;_blank&quot;&gt;this image file&lt;/a&gt; in MATLAB, you could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; homer = imread('homer.jpg');
&amp;gt;&amp;gt; imshow(homer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to get the following figure in MATLAB,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/11/homerScreenShot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Now suppose you want to convert this figure to black-and-white and save it as a new figure. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; homerBW = rgb2gray(homer);
&amp;gt;&amp;gt; imshow(homerBW)
&amp;gt;&amp;gt; imwrite(homerBW,'homerBW.png');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to get this &lt;a href=&quot;http:/ICP2017F/lecture/11/homerBW.png&quot; target=&quot;_blank&quot;&gt;black and white version of the above image&lt;/a&gt;, now in &lt;strong&gt;png&lt;/strong&gt; format (or in any format you may wish, that is also supported by MATLAB).&lt;/p&gt;

&lt;h4 id=&quot;reading-a-file-using-importdata&quot;&gt;Reading a file using &lt;code&gt;importdata()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Probably, the most general MATLAB function for data input is &lt;code&gt;importdata()&lt;/code&gt;. This function can be used to import almost any type of data and MATLAB is capable of automatically recognizing the correct format for reading the file, based on its extension and content. For example, you could read the same image file above, using &lt;code&gt;importdata()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newHomer = importdata('homer.jpg');
&amp;gt;&amp;gt; imshow(newHomer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to import it to MATLAB. At the same time, you could also use it to import data from the excel file that we created above, &lt;a href=&quot;http:/ICP2017F/lecture/11/XlsExample.xlsx&quot; target=&quot;_blank&quot;&gt;XlsExample.xlsx&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newXls = importdata('XlsExample.xlsx')
newXls = 
          data: [3x3 double]
      textdata: {3x3 cell}
    colheaders: {'First'  'Second'  'Third'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or similarly, read a csv-delimited file like &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix3.csv&quot; target=&quot;_blank&quot;&gt;matrix3.csv&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newMat3 = importdata('matrix3.csv')
newMat3 =
  Columns 1 through 7
       62774      103230       77362       87168       65546       64837      100700
      104090      143080      104700      116500      108250      105400      111110
       80351      112850       89506      113890      106030       70235      110620
       99522      134130       73169      134190      117710       92878       94532
       59531      102750       91679      111350       80539       84693       96078
       58504       76982       52076       91449       80797       69246       61569
       76170      104310       93950      114860       89779      101530       87014
       91610      118380       90636      107840       91120       90247       84871
       85943      110670       73451      114410      100840      111660       77908
       82570       94427       57213       81175       79305       78718       68662
  Columns 8 through 10
       79446       78102      106570
      102950      116850      137810
      113210      108800      128700
       93013      119130      132700
       95750      100980      100450
       67044       80635       78006
       86355      103760      119710
       92649       98589      132660
       73117      109270       99401
       65283       66888      114030
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, you can use &lt;code&gt;importdata()&lt;/code&gt; to read MATLAB binary files (MAT-files), ASCII files and Spreadsheets, as well as images and audio files.&lt;/p&gt;

&lt;h4 id=&quot;reading-a-file-using-fgetl&quot;&gt;Reading a file using &lt;code&gt;fgetl()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Another useful MATLAB function for reading the content of a file is &lt;code&gt;fgetl()&lt;/code&gt; which can read a file line by line, removing the new line characters &lt;code&gt;\n&lt;/code&gt; from the end of each line. The entire line is read as a string. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/text.txt&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;. One could read the content of this text file using the function &lt;code&gt;fgetl()&lt;/code&gt; like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fid = fopen('text.txt');
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
The main benefit of using a weakly-typed language is the ability to do rapid prototyping. The number of lines of code required to declare and use a dynamically allocated array in C (and properly clean up after its use) are much greater than the number of lines required for the same process in MATLAB.
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
     ''
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
Weak typing is also good for code-reuse. You can code a scalar algorithm in MATLAB and with relatively little effort modify it to work on arrays as well as scalars. The fact that MATLAB is a scripted instead of a compiled language also contributes to rapid prototyping.
&amp;gt;&amp;gt; fclose(fid);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reading-data-from-web-using-webread&quot;&gt;Reading data from web using &lt;code&gt;webread()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In today’s world, it often happens that the data you need for your research is already stored somewhere on the world-wide-web. For such cases MATLAB has built-in methods and functions to read and import data or even a webpage. For example, consider &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/triggers.txt&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt; on this course’s website. It is indeed a text file containing a set of IDs for some astrophysical events. Suppose, you needed to read and store these IDs locally on your own device. You could simply try the following code in MATLAB to fetch all of the table’s information in a single string via,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = webread('http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/triggers.txt')
webContent =
    '00745966
     00745090
     00745022
     00744791
     00741528
     00741220
     00739517
     00737438
     ...
     00100319'
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if we wanted to get the individual IDs, we could simply use &lt;code&gt;strplit()&lt;/code&gt; function to split the IDs at the line break characters &lt;code&gt;'\n'&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = strsplit(webContent,'\n')
webContent =
  1×1019 cell array
  Columns 1 through 11
    {'00745966'}    {'00745090'}    {'00745022'} ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We will see more sophisticated usages of this MATLAB function in the first problem of homework 5.&lt;/p&gt;

&lt;h2 id=&quot;handling-io-errors&quot;&gt;Handling IO errors&lt;/h2&gt;

&lt;p&gt;A good code has to be able to handle exceptional situations that may occur during the code execution. These exceptions may occur during data input from either command line, terminal window, or an input file. They may also occur as a result of repeated operations on the input data, inside the code. For example, in previous homework assignments, we have learned some simple ways of handling the wrong number of input arguments, for example in Fibonacci sequence problem. This and similar measures to handle nicely the unexpected runtime errors are collectively called &lt;strong&gt;error and exception handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple way of error handling is to write multiple if-blocks, each of which handles a special exceptional situation. That is, to let the code execute some statements, and if something goes wrong, write the program in such a way that can detect this and jump to a set of statements that handle the erroneous situation as desired.&lt;/p&gt;

&lt;p&gt;A more modern and flexible way of handling such potential errors in MATLAB is through MATLAB’s &lt;strong&gt;try/catch&lt;/strong&gt; construction. You can use a try/catch statement to execute code after your program encounters an error. try/catch statements can be useful when you Want to finish the program in another way that avoids errors (which could lead to abrupt interruption of the program), or when you want to nicely control the effects of error (for example, when a division by zero happens in your calculations), or you have a function that could take many problematic parameters or commands as input, just like the fib function we wrote in the previous homework assignments.&lt;/p&gt;

&lt;p&gt;The general syntax for try/catch statements is like the following pseudocode,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;try
  try statements (all the normal things you would want to do)...
catch exception
  catch block (things to do when the try statements go wrong) ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If an error occurs within the try block, MATLAB skips any remaining commands in the try block and executes the commands in the catch block. If no error occurs within try block, MATLAB skips the entire catch block.&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to read data from a webpage that does not exist,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = webread('http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/')
Error using readContentFromWebService (line 45)
The server returned the status 404 with message &quot;Not Found&quot; in response to the request to URL http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/.
Error in webread (line 125)
[varargout{1:nargout}] = readContentFromWebService(connection, options); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In such cases, it would be nice to control the behavior of the problem, and not allow MATLAB to end the program abruptly. We could therefore say,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; try
    webContent = webread('http://www.shahmoradi.orghttp:/ICP2017F/homework/5-problems/')
catch
    disp('The requested page does not exist! Gracefully exiting...')
end
The requested page does not exist! Gracefully exiting...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, the true advantage of this error handling construct would become clear to you when you use it in functions. We will see more of this in homework 5.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/11-matlab-IO&quot;&gt;Lecture 11: MATLAB - Input/Output (IO)&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Problems - loops, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/4-problems-loops-IO"/>
  <id>http:/ICP2017F/homework/4-problems-loops-IO</id>
  <published>2017-10-30T00:00:00-05:00</published>
  <updated>2017-10-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Nov 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB for-loops and while-loops as well as input/output functionalities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop.&lt;/strong&gt; Consider the following two vectors of temperatures in Celsius degrees to Fahrenheit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
Fdegrees = [-20, -15, -5, 0, 10, 15, 30, 35, 40]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Our goal in this problem is to write functions that take such vectors as input and perform some actions on them. The functions take as input, a vector of temperatures just like &lt;code&gt;Cdegrees&lt;/code&gt; and &lt;code&gt;Fdegrees&lt;/code&gt; above, as well as an input string which is either &lt;code&gt;'F2C'&lt;/code&gt; or &lt;code&gt;C2F&lt;/code&gt;. Then, converts the input temperature vector from Fahrenheit to Celsius if the input string is &lt;code&gt;'F2C'&lt;/code&gt;, otherwise converts the input temperature vector from Celsius to Fahrenheit if the input string is &lt;code&gt;'C2F'&lt;/code&gt;, otherwise outputs an error message and aborts the program.&lt;/p&gt;

&lt;p&gt;(A) Write the requested function using while-loop construct (you can name the function &lt;code&gt;convertTempFor.m&lt;/code&gt;).&lt;br /&gt;
(B) Write the requested function using for-loop construct (you can name the function &lt;code&gt;convertTempWhile.m&lt;/code&gt;).&lt;br /&gt;
(C) Write the requested function using vectorization concept (you can name the function &lt;code&gt;convertTempVec.m&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here are some example calls to these functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;InVec = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40];
&amp;gt;&amp;gt; convertTempFor(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempWhile(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempVec(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Use MATLAB built-in timing functions to measure the performance of three functions you wrote in question 1 above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following nested cell vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;List = { {'M','A','T','L','A','B'}, {' '}, {'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'}, {', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'} };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a MATLAB script &lt;code&gt;extractLetter.m&lt;/code&gt; that uses for-loop to extract all the letters in the variable list and finally prints them all as a single string like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; extractLetter
MATLAB is a strange, but popular programming language
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;The significant impact of round-off errors in numerical computation.&lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you see the behavior observed. In particular, why do you not recover the original value $2.0$ after many repetitions of the same forward and reverse task of taking square root and squaring the result?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;eps = 1.0;
while 1.0 ~= 1.0 + eps
    disp(num2str(eps));
    eps = eps / 2.0;
end
disp(['final eps:', num2str(eps)]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 ~= 1.0 + eps&lt;/code&gt; be &lt;code&gt;false&lt;/code&gt;?!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function named &lt;code&gt;getLargestPrime&lt;/code&gt; that does so, using for-loop, break, and MATLAB’s intrinsic function isprime(). Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getLargestPrime(123)
ans =
   113
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Consider the problem number 5 in HW 3, where we wrote a &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot;&gt;function&lt;/a&gt; named &lt;code&gt;fib.m&lt;/code&gt; that used the idea of recursive functions to generate the Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;(A) Download &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot; target=&quot;_blank&quot;&gt;this function fib()&lt;/a&gt; and modify it using MATLAB &lt;code&gt;timeit()&lt;/code&gt; function such that it also returns the average runtime of &lt;code&gt;getFib()&lt;/code&gt; nested function inside &lt;code&gt;fib()&lt;/code&gt;, right after giving the requested Fibonacci number. For example, here is an output from such modified code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 1.0083e-05 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 8.8884e-05 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 0.00095559 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 0.010311 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 0.11575 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 1.2904 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Note that you can use &lt;code&gt;char(9)&lt;/code&gt; at the beginning of your &lt;code&gt;disp()&lt;/code&gt; messages in order to add the &lt;code&gt;tab&lt;/code&gt; character at the beginning of your message, just like the above example.)&lt;/p&gt;

&lt;p&gt;(B) Now copy this function to a new MATLAB M-file named &lt;code&gt;fibLoop.m&lt;/code&gt;. Also modify the name of the function &lt;code&gt;fib()&lt;/code&gt; in this file &lt;code&gt;fibLoop()&lt;/code&gt;. Modify the nested function &lt;code&gt;getFib()&lt;/code&gt; inside of &lt;code&gt;fibLoop()&lt;/code&gt; such that instead of recursive function calls, it uses a for-loop to find the requested Fibonacci number.&lt;/p&gt;

&lt;p&gt;(C) Now time your new function &lt;code&gt;fibLoop()&lt;/code&gt; for the same input integers as in the above example: $10,15,20,25,30,35$. How do the runtimes for &lt;code&gt;fibLoop()&lt;/code&gt; compare with &lt;code&gt;fib()&lt;/code&gt;. Which function is faster and more efficient: &lt;code&gt;fib()&lt;/code&gt; or &lt;code&gt;fibLoop()&lt;/code&gt;? Why is there such huge difference in the performance of the two functions?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;(A)&lt;/strong&gt; Write two new MATLAB functions &lt;code&gt;timeFib(n)&lt;/code&gt; and &lt;code&gt;timeFibLoop(n)&lt;/code&gt; based on your MATLAB functions &lt;code&gt;fib()&lt;/code&gt; and &lt;code&gt;fibLoop()&lt;/code&gt; that you wrote in problem 6, such that both take an integer and output a structure whose fields are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;output.n
output.fib
output.runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the function should take as input only an integer variable, so you need to modify your old codes to only check whether the input &lt;code&gt;~ischar()&lt;/code&gt;, and &lt;code&gt;isreal()&lt;/code&gt; and &lt;code&gt;n&amp;gt;=0&lt;/code&gt; and &lt;code&gt;round(n)==n&lt;/code&gt;. Here is an example output from the two functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFib(20)
ans = 
          n: 20
        fib: 6765
    runtime: 9.6568e-04
&amp;gt;&amp;gt; timeFib('amir')
Error using timeFib (line 8)
The input argument is not a non-negative integer! 
&amp;gt;&amp;gt; timeFibLoop(20)
ans = 
          n: 20
        fib: 6765
    runtime: 4.4076e-06
&amp;gt;&amp;gt; timeFibLoop('amir')
Error using timeFibLoop (line 8)
The input argument is not a non-negative integer! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Now write a script named &lt;code&gt;writeFibResult.m&lt;/code&gt; that calls these two functions for a range of input $n={10,2,3,\ldots,35}$ values, and then write the output of these two functions in a formatted way in two files like these &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibOutput.txt&quot; target=&quot;_blank&quot;&gt;fibOutput.txt&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibLoopOutput.txt&quot; target=&quot;_blank&quot;&gt;fibLoopOutput.txt&lt;/a&gt;. You can use any of MATLAB IO methods to create the output file with any file extension you prefer: &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.tab&lt;/code&gt;, … .&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/4-problems-loops-IO&quot;&gt;Homework 4: Problems - loops, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Solutions - structures, branching and functions in MATLAB]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions"/>
  <id>http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions</id>
  <published>2017-10-30T00:00:00-05:00</published>
  <updated>2017-10-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;3-problems-matlab-structures-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Homework 3: Problems - structures, branching and functions in MATLAB&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework2.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus question, is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

---
---

&lt;br&gt; 

--&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 30, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with structure types in MATLAB as well as branching and function concepts and their usage syntax. Write your MATLAB scripts with the corresponding &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 3 folder of your ICP2017F repository if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function ($\mu\in[-\infty,+\infty]$, $\sigma&amp;gt;0$) are prescribed real numbers. Write a MATLAB script for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine, also by using MATLAB’s builtin function &lt;a href=&quot;https://www.mathworks.com/help/stats/normpdf.html&quot; target=&quot;_blank&quot;&gt;normpdf($x$,$\mu$,$\sigma$)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An example implementation can be found &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getNormPDF.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; As an egg cooks, the protein molecules in the egg first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a MATLAB program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to use MATLAB’s builtin function &lt;code&gt;log()&lt;/code&gt;, and the predefined variable &lt;code&gt;pi&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An example implementation can be found &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/protein.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Converting polar and Cartesian vector representations using functions and structures.&lt;/strong&gt; A vector is a mathematical quantity that has both magnitude and direction. A 2-dimensional vector can be represented as a displacement along $x$ and $y$ axes in rectangular (Cartesian) coordinates or, by a distance $r$ and an angle $\phi$ in polar coordinates,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/3-problems/vector.png&quot; height=&quot;400&quot; width=&quot;400&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conversion rule between the Cartesian and Polar representations of a vector.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The relationships between the Cartesian $(x,y)$ and polar $(r,\phi)$ coordinates are given by the following equations,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    x &amp;= r\cos(\phi) \\
    y &amp;= r\sin(\phi) \\
    r &amp;= \sqrt{x^2 + y^2} \\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt; that takes a structure &lt;code&gt;inputCartesianStruct&lt;/code&gt; as input, that has two components &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Then on output, it returns another structure that has to components &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. Write another function &lt;code&gt;getCart(inputPolarStruct)&lt;/code&gt; that does the inverse of &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt;. Make sure that both functions are robust to wrong input structures by checking whether the input structures have the required fields: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, or &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. You can do so by using MATLAB’s builtin function &lt;code&gt;isfield()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getPolar.m&quot; target=&quot;_blank&quot;&gt;getPolar.m&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getCart.m&quot; target=&quot;_blank&quot;&gt;getCart.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Calculating the size of a directory&lt;/strong&gt; The MATLAB function &lt;code&gt;dir&lt;/code&gt; returns the contents of a specified directory. It returns the result in the form of an structure array with four fields, for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = dir
s = 
123x1 struct array with fields:
    name
    date
    bytes
    isdir
    datenum
&amp;gt;&amp;gt; size(s)
ans =
   123     1
&amp;gt;&amp;gt; fieldnames(s)
ans = 
    'name'
    'date'
    'bytes'
    'isdir'
    'datenum'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where here, the directory contains 123 objects. Write a MATLAB function that takes the path to a directory and outputs the total size of all files in the directory in units of bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getBytes.m&quot; target=&quot;_blank&quot;&gt;getBytes.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n$th number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: -123
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: a
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: amir
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: -12.3
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 0
fib(0) = 0
Please enter a non-negative integer or type stop: 1
fib(1) = 1
Please enter a non-negative integer or type stop: 2
fib(2) = 1
Please enter a non-negative integer or type stop: 3
fib(3) = 2
Please enter a non-negative integer or type stop: 4
fib(4) = 3
Please enter a non-negative integer or type stop: 5
fib(5) = 5
Please enter a non-negative integer or type stop: 6
fib(6) = 8
Please enter a non-negative integer or type stop: 7
fib(7) = 13
Please enter a non-negative integer or type stop: 8
fib(8) = 21
Please enter a non-negative integer or type stop: 9
fib(9) = 34
Please enter a non-negative integer or type stop: 10
fib(10) = 55
Please enter a non-negative integer or type stop: 11
fib(11) = 89
Please enter a non-negative integer or type stop: 12
fib(12) = 144
Please enter a non-negative integer or type stop: 22
fib(22) = 17711
Please enter a non-negative integer or type stop: 32
fib(32) = 2178309
Please enter a non-negative integer or type stop: stop
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;getFib(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a &lt;em&gt;strictly&lt;/em&gt; non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another MATLAB function &lt;code&gt;fib()&lt;/code&gt;&lt;/strong&gt; that asks the user to input a number (which could be potentially anything: a string, a real number, a complex number, or an integer). You can do this using MATLAB’s builtin function &lt;code&gt;input()&lt;/code&gt;. Read the input value as a &lt;code&gt;string&lt;/code&gt; using this MATLAB function. Then check if the user’s input string is equivalent to &lt;strong&gt;‘stop’&lt;/strong&gt; or not. If it is ‘stop’, then the program must return, otherwise, use &lt;code&gt;str2double()&lt;/code&gt; to convert this string to MATLAB numeric type. Then check is the numeric-converted input value is real number (as opposed to complex number) via MATLAB’s function &lt;code&gt;isreal()&lt;/code&gt;. If the value is real, then check if it is a non-negative real number. Also check if it is an &lt;strong&gt;integer&lt;/strong&gt; by comparing the value with its rounded value using MATLAB’s function &lt;code&gt;round()&lt;/code&gt;. Thus is the user-input number is really a non-negative integer, then your code should display the result message as given in the above output (by calling your nested function &lt;code&gt;getFib(n_int)&lt;/code&gt;), and then call this function &lt;code&gt;fib&lt;/code&gt; to ask the user to input another number again, to repeat this procedure. If the user-input number is not a non-negative integer, then your code should display the requested message above, and call the function &lt;code&gt;fib&lt;/code&gt; again to ask the user for another input.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot; target=&quot;_blank&quot;&gt;fib.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1 \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;getTriangleArea(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getTriangleArea.m&quot; target=&quot;_blank&quot;&gt;getTriangleArea.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;isPrime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prime_number&quot; target=&quot;_blank&quot;&gt;Prime number&lt;/a&gt; or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use a &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using &lt;strong&gt;recursive function&lt;/strong&gt; concept. You can verify the accuracy of your MATLAB script via by checking its output against MATLAB’s builtin function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/isPrime.m&quot; target=&quot;_blank&quot;&gt;isPrime.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;Function generators.&lt;/strong&gt; Write a nested function that evaluates a polynomial of the form $y = ax^2+bx+c$. The host function &lt;code&gt;genFunc()&lt;/code&gt; should be able to take varying number of arguments using &lt;code&gt;varargin&lt;/code&gt; with maximum of 3 arguments (&lt;code&gt;a,b,c&lt;/code&gt;) to initialize the coefficients of the polynomial. If there is only one argument, then &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; must be set to zero. If there are two input arguments, then &lt;code&gt;c&lt;/code&gt; is set to zero. If none are given on input, then the returned function should be zero. If more than 3 arguments exist, then the function should display an error and stop. Also, if the input arguments are not real numbers, then the function should return and error and stop.&lt;/p&gt;

&lt;p&gt;On output, the host function should create and return a function handle for the nested function &lt;code&gt;evalFunc()&lt;/code&gt;. The nested function should calculate a value of $y$ for a given value of $x$, using the values of $a$, $b$, and $c$ stored in the host function. This is called a &lt;strong&gt;function generator&lt;/strong&gt;, since the host function generates and outputs another function that can be called and used later on in the program. Once you create your function generator, test it in the following way: Call &lt;code&gt;genFunc(1,2,0)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h1&lt;/code&gt;. Call &lt;code&gt;genFunc(1,2)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h2&lt;/code&gt;. Then these two function handles, should give the same result, given the same input &lt;code&gt;x&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/genFunc.m&quot; target=&quot;_blank&quot;&gt;genFunc.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions&quot;&gt;Homework 3: Solutions - structures, branching and functions in MATLAB&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 10: MATLAB - loops and vectorization]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/10-matlab-loops-vectorization"/>
  <id>http:/ICP2017F/lecture/10-matlab-loops-vectorization</id>
  <published>2017-10-27T00:00:00-05:00</published>
  <updated>2017-10-27T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains the concept of for-loops and while-loops in MATLAB and different of types of it in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/GvIYiE59YgE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/h2sYfv4DRd8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/kNH9iZAI9CU&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/jed9DCFzXTc&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops-in-matlab&quot;&gt;Loops in MATLAB&lt;/h2&gt;

&lt;p&gt;Many programming algorithms require iteration, that is, the repetitive execution of a block of program statements. Similar to other programming languages, MATLAB also has built-in tools for iterative tasks in codes.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For-loop&lt;/h3&gt;

&lt;p&gt;The for-loop is among the most useful MATLAB constructs. The general syntax of for-loop is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for variable = expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Usually, &lt;code&gt;expression&lt;/code&gt; is a vector of the form &lt;code&gt;istart:stepSize:iend&lt;/code&gt; where &lt;code&gt;fix((iend-istart)/stepSize+1)&lt;/code&gt; gives the number of iterations requested by the user, assuming &lt;code&gt;iend&amp;gt;istart&lt;/code&gt;. The &lt;code&gt;statements&lt;/code&gt; are the set of programming tasks that have to be repeated. For example consider a script named &lt;code&gt;forLoop.m&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for index = istart:stepSize:iend
    disp(index);
end
disp( [ 'number of iterations: ', num2str( fix((iend-istart)/stepSize+1) ) ] );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = -2;
iend = 10;
stepSize = 3;
forLoop
    -2
     1
     4
     7
    10
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also iterate in reverse order,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = 10;
iend = -2;
stepSize = -3;
forLoop
    10
     7
     4
     1
    -2
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;breaking-a-for-loop-immaturely&quot;&gt;Breaking a for-loop immaturely&lt;/h4&gt;

&lt;p&gt;You can also use &lt;code&gt;break&lt;/code&gt; inside a for-loop to get out of it, even before the for-loop finishes the full number of iterations. This is specially useful when you want to ensure if a condition has happened, and if so, then terminate the for-loop. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    disp(integer)
    if (integer==5)
        break
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 1
 2
 3
 4
 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function that does so, using for-loop, &lt;code&gt;break&lt;/code&gt;, and MATLAB’s intrinsic function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function integer = getPrime(upper)
    if (upper&amp;lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;continue-statement-within-for-loops&quot;&gt;Continue statement within for-loops&lt;/h4&gt;

&lt;p&gt;To skip the rest of the instructions in a loop and begin the next iteration, you can use a &lt;code&gt;continue&lt;/code&gt; statement. For example, the following code prints only integers that are primes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    if ~isprime(integer)
        continue
    end
    disp(['prime detected! ',num2str(integer)])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;prime detected! 2
prime detected! 3
prime detected! 5
prime detected! 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;iterating-over-vectors-matrices-and-cell-using-for-loops&quot;&gt;Iterating over vectors, matrices, and cell using for-loops&lt;/h4&gt;

&lt;p&gt;Note that the index of for-loop must not necessarily be an integer. Basically you can use the for-loop index to iterate over anything that is iterable in MATLAB. For example, consider the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1,0,2,3,7,-1];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of this script is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;double
    1
double
    0
double
    2
double
    3
double
    7
double
    -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, see what happens if we defined &lt;code&gt;a&lt;/code&gt; as a matrix,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1, 2, 3; 4, 5, 6; 7, 8, 9];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;double
    1
    4
    7
double
    2
    5
    8
double
    3
    6
    9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is happening here? The answer is that, MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Row-_and_column-major_order&quot; target=&quot;_blank&quot;&gt;column-wise programming language&lt;/a&gt;, just like Fortran, and unlike C, C++ and all of their descendants. &lt;strong&gt;MATLAB, by default, iterates over elements of row vectors&lt;/strong&gt;. Therefore, when you use a matrix as the iterator in for-loops, MATLAB considers an entire column as the index of for-loop. The same is also true for other multidimensional arrays in MATLAB, for example cell arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
    [4]
    [7]
cell
    [2]
    [5]
    [8]
cell
    [3]
    [6]
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, if you want to iterate over elements of a multidimensional matrix or array, you have to first reshape them using MATLAB’s built-in &lt;code&gt;reshape()&lt;/code&gt; function to convert them to vector format, then iterating over them. For exzmple,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
a = reshape(a,[1,9]);
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
cell
    [4]
cell
    [7]
cell
    [2]
cell
    [5]
cell
    [8]
cell
    [3]
cell
    [6]
cell
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;some-general-advice-on-for-loop-index&quot;&gt;Some general advice on for-loop index&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoid using $i$ and $j$ as index variables in for-loops.&lt;/strong&gt; Note that &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; have special meanings in MATLAB, as described in previous lectures. They are used to define complex numbers. Using these variable names as indices in MATLAB for-loops, would overwrite the default meaning of these variables.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid assigning a value to the index variable within the loop statements.&lt;/strong&gt; The for statement overrides any changes made to index within the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While-loop&lt;/h3&gt;

&lt;p&gt;There is another iteration construct in MATLAB, called &lt;strong&gt;while-loop&lt;/strong&gt; which has the following general syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;while expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;statements&lt;/code&gt; within the while-loop are executed as long as &lt;code&gt;expression&lt;/code&gt; is true. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = realmax();
while x&amp;gt;0
    xmin = x
    x = log(x)
end
xmin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;xmin =
1.7977e+308
x =
709.7827
xmin =
709.7827
x =
    6.5650
xmin =
    6.5650
x =
    1.8817
xmin =
    1.8817
x =
    0.6322
xmin =
    0.6322
x =
-0.4585
xmin =
    0.6322
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be used in while-loops in the same fashion as they are used in for-loops, described above. The condition is evaluated before the body is executed, so it is possible to get zero iterations. It’s often a good idea to limit the number of repetitions to avoid infinite loops (as could happen above if x is infinite). This can be done in a number of ways, but the most common is to use &lt;code&gt;break&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;n = 0;
while abs(x) &amp;gt; 1
    x = x/2;
    n = n+1;
    if n &amp;gt; 50, break, end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A break immediately jumps execution to the first statement after the loop. It’s good practice to include some diagnostic output or other indication that an abnormal loop exit has occurred once the code reach the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Write function &lt;code&gt;getFac(n)&lt;/code&gt; using while-loop, that calculates the factorial of an input number &lt;code&gt;n&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getFac(4)
4! = 24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**
```matlab
function getFac(n)
    nOrg = n;
    fac = n;
    while n &gt; 1
        n = n-1;
        fac = fac*n;
    end
    disp([num2str(nOrg),'! = ' num2str(fac)])
end
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;some-general-advice-on-while-loops&quot;&gt;Some general advice on while-loops&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If you inadvertently create an infinite loop (that is, a loop that never ends on its own), stop execution of the loop by pressing Ctrl+C.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;If the conditional expression evaluates to a matrix, MATLAB evaluates the statements only if &lt;strong&gt;all&lt;/strong&gt; elements in the matrix are true (nonzero). To execute statements if any element is true, wrap the expression in the &lt;code&gt;any()&lt;/code&gt; function.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;To exit the loop, use a &lt;code&gt;break&lt;/code&gt; statement as discussed above. To skip the rest of the instructions in the loop and begin the next iteration, use a &lt;code&gt;continue&lt;/code&gt; statement.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;When nesting a number of while statements, each while statement requires an &lt;code&gt;end&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vectorization-in-matlab&quot;&gt;Vectorization in MATLAB&lt;/h2&gt;

&lt;p&gt;Experienced programmers who are concerned with producing compact and fast code try to avoid for loops wherever possible in their MATLAB codes. There is a reason for this: for-loops and while-loops have significant overhead in interpreted languages such as MATLAB and Python.&lt;/p&gt;

&lt;p&gt;There is of course, a remedy for this inefficiency. Since MATLAB is a matrix language, many of the matrix-level operations and functions are carried out internally using compiled C, Fortran, or assembly codes and are therefore executed at near-optimum efficiency. This is true of the arithmetic operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;\&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and of relational and logical operators. However, for loops may be executed
relatively slowly—depending on what is inside the loop, MATLAB may or may not
be able to optimize the loop. One of the most important tips for producing efficient M-files is to avoid for -loops in favor of vectorized constructs, that is, to convert for-loops into equivalent vector or matrix operations. Vectorization has important benefits beyond simply increasing speed of execution. It can lead to shorter and more readable MATLAB code. Furthermore, it expresses algorithms in terms of high-level constructs that are more appropriate for high-performance computing. For example, consider the process of summation of a random vector in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; n = 5e7; x = randn(n,1);
&amp;gt;&amp;gt; tic, s = 0; for i=1:n, s = s + x(i)^2; end, toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.581945 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now doing the same thing, using array notation would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; tic, s = sum(x.^2); toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.200450 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazing! isn’t it? You get almost 3x speedup in your MATLAB code if you use vectorized computation instead of fol-loops. Later on in this course, we will see that MATLAB has inherited these excellent vectorization techniques and syntax for matrix calculations from its high-performance ancestor, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
How do you vectorize the following code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;i = 0;
for t = 0:.01:10
    i = i + 1;
    y(i) = sin(t);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;t = 0:.01:10;
y = sin(t);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectorization-of-array-operations&quot;&gt;Vectorization of array operations&lt;/h3&gt;

&lt;p&gt;Vectorization of arrays can be done through &lt;strong&gt;array operators&lt;/strong&gt;, which perform the same operation for all elements in the data set. These types of operations are useful for repetitive calculations. For example, suppose you collect the volume (V) of various cones by recording their diameter (D) and height (H). If you collect the information for just one cone, you can calculate the volume for that single cone as,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = 0.2;
&amp;gt;&amp;gt; H = 0.04;
&amp;gt;&amp;gt; V = 1/12*pi*(D^2)*H
V =
   4.1888e-04
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, suppose we collect information on 10,000 cones. The vectors &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; each contain 10,000 elements, and you want to calculate 10,000 volumes. In most programming languages (except Fortran and R which have similar vectorization capabilities to MATLAB), you need to set up a loop similar to this MATLAB code (here instead of 10000, I am using 7):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 9.0000 1.0000 17.6400 9.8596];
for n = 1:7
   V(n) = 1/12*pi*(D(n)^2)*H(n);
end
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With MATLAB, you can perform the calculation for each element of a vector with similar syntax as the scalar case,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; V = 1/12*pi*(D.^2).*H;  % Vectorized Calculation
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Placing a period (&lt;code&gt;.&lt;/code&gt;) before the operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;^&lt;/code&gt;, transforms them into array operators.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;logical-array-operations&quot;&gt;Logical array operations&lt;/h3&gt;

&lt;p&gt;MATLAB comparison operators also accept vector inputs and return vector outputs. For example, suppose while collecting data from 10,000 cones, you record several negative values for the diameter. You can determine which values in a vector are valid with the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; D &amp;gt;= 0
ans =
     0     1     1     1     0     1     1
&amp;gt;&amp;gt; class(ans)
ans =
logical
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can directly exploit the logical indexing power of MATLAB to select the valid cone volumes, &lt;code&gt;Vgood&lt;/code&gt;, for which the corresponding elements of D are nonnegative,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Vgood = V(D &amp;gt;= 0) % removing all data corresponding to negative diameters
Vgood =
    0.2618    1.3254   21.2058   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB allows you to perform a logical AND or OR on the elements of an entire vector with the functions all and any, respectively. You can throw a warning if all values of &lt;code&gt;D&lt;/code&gt; are below zero,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if all(D &amp;lt; 0) % gives no warning because not all values are negative
   warning('All values of diameter are negative.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; if (D &amp;lt; 0)
   warning('Some values of diameter are negative.')
end
Warning: Some values of diameter are negative. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB can also compare two vectors of the same size, allowing you to impose further restrictions. This code finds all the values where &lt;code&gt;V&lt;/code&gt; is nonnegative and &lt;code&gt;D&lt;/code&gt; is greater than &lt;code&gt;H&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 1.5000 1.0000 0.6400 9.8596];
&amp;gt;&amp;gt; V((V &amp;gt;= 0) &amp;amp; (D &amp;gt; H))
ans =
   21.2058   81.4640
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&amp;gt;&amp;gt; (V &amp;gt;= 0) &amp;amp; (D &amp;gt; H)
ans =
     0     0     0     1     0     1     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The resulting vector is the same size as the inputs. To aid comparison, MATLAB contains special values to denote &lt;strong&gt;overflow&lt;/strong&gt;, &lt;strong&gt;underflow&lt;/strong&gt;, and &lt;strong&gt;undefined operators&lt;/strong&gt;, such as &lt;strong&gt;inf&lt;/strong&gt; and &lt;strong&gt;nan&lt;/strong&gt;. Logical operators &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isinf.html&quot; target=&quot;_blank&quot;&gt;isinf&lt;/a&gt; and &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isnan.html&quot; target=&quot;_blank&quot;&gt;isnan&lt;/a&gt; exist to help perform logical tests for these special values. For example, it is often useful to exclude &lt;code&gt;NaN&lt;/code&gt; values from computations,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = [2 -1 0 3 NaN 2 NaN 11 4 Inf];
&amp;gt;&amp;gt; xvalid = x(~isnan(x))
xvalid =
     2    -1     0     3     2    11     4   Inf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that &lt;code&gt;Inf == Inf&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;; however, &lt;code&gt;NaN == NaN&lt;/code&gt; always returns &lt;code&gt;false&lt;/code&gt; in MATLAB.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;matrix-operations&quot;&gt;Matrix Operations&lt;/h3&gt;

&lt;p&gt;Matrix operations act according to the rules of linear algebra. These operations are most useful in vectorization if you are working with multidimensional data. Suppose you want to evaluate a function, $F$, of two variables, $x$ and $y$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x,y) = x*\exp(-x2 - y2) ~.&lt;/script&gt;

&lt;p&gt;To evaluate this function at every combination of points in the $x$ and $y$, you need to define a grid of values,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = -2:0.2:2;
&amp;gt;&amp;gt; y = -1.5:0.2:1.5;
&amp;gt;&amp;gt; [X,Y] = meshgrid(x,y);
&amp;gt;&amp;gt; F = X.*exp(-X.^2-Y.^2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Without &lt;code&gt;meshgrid()&lt;/code&gt;, you might need to write two for loops to iterate through vector combinations. The function &lt;code&gt;ndgrid()&lt;/code&gt; also creates number grids from vectors, but unlike &lt;code&gt;meshgrid()&lt;/code&gt;, it can construct grids beyond three dimensions. &lt;code&gt;meshgrid()&lt;/code&gt; can only construct 2-D and 3-D grids.&lt;/p&gt;

&lt;p&gt;The following table contains a list of MATLAB functions that are commonly used in vectorized codes,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's most-widely used vectorization functions.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Function&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are nonzero or true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if any array elements are nonzero&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cumsum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Cumulative sum&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Differences and Approximate Derivatives&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;find&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find indices and values of nonzero elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ind2sub&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Subscripts from linear index&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ipermute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inverse permute dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;logical&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert numeric values to logicals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;meshgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in 2-D and 3-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ndgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in N-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;permute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rearrange dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;prod&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Product of array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;repmat&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Repeat copies of array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Reshape array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;shiftdim&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Shift dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sort array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;squeeze&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove singleton dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sub2ind&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert subscripts to linear indices&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sum of array elements&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-is-vectorized-code-faster-than-for-loops&quot;&gt;Why is vectorized code faster than for-loops?&lt;/h3&gt;

&lt;p&gt;The reason for the speedup in vectorized has to sought in the way the memory of computer is built. The figure below represents a schematic diagram of the Central Processing Unit (CPU) of every modern computer in relationship with computer memory.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/10/cpu-memory.jpg&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The hierarchy of memory in most modern computers and its relationship with the CPU.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At the highest level of memory hierarchy, closest to the CPU, we have the CPU register. A processor register is a quickly accessible location available to a computer’s CPU. Registers usually consist of a small amount of fast storage and may be read-only or write-only. The CPU has super fast access to data stored in register. But the problem is that this memory is very small, typically on the orders of bits of information.&lt;/p&gt;

&lt;p&gt;At the second level of the hierarchy of memory, we have the CPU cache, typically comprised of three different levels L1, L2, L3, which rank from fastest to slowest respectively, in terms of CPU access. However, the faster the cache memory, the smaller it is. Thereofore, L1 is the fastest of the three, but also the smallest of the three levels.&lt;/p&gt;

&lt;p&gt;CPU Caching was invented to solve a significant problem. In the early decades of computing, main memory was extremely slow and incredibly expensive — but CPUs weren’t particularly fast, either. Starting in the 1980s, the gap began to widen quickly. Microprocessor clock speeds took off, but memory access times improved far less dramatically. As this gap grew, it became increasingly clear that a new type of fast memory was needed to bridge the gap. See the figure below.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/10/CPU-DRAM.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The growing gap between the speed of DRAM memories and CPUs in time.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After CPU cache, there the Random Access Memory (RAM) which you hear the most about, when you go to buy a new computer. Typical computers contain 4-32 Gb of RAM. When you open MATLAB and create some variables, all of your data is stored on this memory. However, this memory is the slowest of all in terms of access to CPU.&lt;/p&gt;

&lt;p&gt;When you use for-loops in MATLAB to perform some specific calculations on a vector, you are asking MATLAB to go to this memory at each loop iteration to fetch an element of the loop, bring it to the CPU, perform the set of operations requested, and send it back to memory. However, the CPU is much more capable than doing a single calculation at a time. Therefore, if you could somehow tell MATLAB to fetch a bulk of elements from your vector and bring them to CPU to perform the requested operations, your code would become much faster. The way to tell MATLAB to do so, is called &lt;strong&gt;vectorization&lt;/strong&gt;. By vectorizing your code, you tell MATLAB to bring as much information as possible to the highest memory level close to CPU, in order to perform the operations on all of them simultaneously and return the result for all of them back to the memory all together. This results in much faster code, since nowadays, as the figure above shows, the bottleneck in code performance is not the CPU speed, but the memory access.&lt;/p&gt;

&lt;h2 id=&quot;measuring-the-performance-of-your-matlab-functions-and-scripts&quot;&gt;Measuring the performance of your MATLAB functions and scripts&lt;/h2&gt;

&lt;p&gt;MATLAB has several built-in methods of timing how long it takes to run a MATLAB function or script. The &lt;code&gt;timeit()&lt;/code&gt; function as well as &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;, are in particular very useful. Use the &lt;code&gt;timeit()&lt;/code&gt; function for a rigorous measurement of your function’s execution time. Use &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; to estimate time for smaller portions of code that are not complete functions.&lt;/p&gt;

&lt;p&gt;For additional details about the performance of your code, such as function call information and execution time of individual lines of code, MATLAB has more sophisticated tools such as &lt;em&gt;MATLAB® Profiler&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;timing-matlab-functions&quot;&gt;Timing MATLAB functions&lt;/h3&gt;

&lt;p&gt;To measure the time required to run a function, whether built-in or your own, you can use the &lt;code&gt;timeit()&lt;/code&gt; function. The &lt;code&gt;timeit()&lt;/code&gt; function calls the user-specified function multiple times, and returns the median of the time measurements. This function takes &lt;strong&gt;a handle to the function whose performance is to be measured&lt;/strong&gt; and returns the typical execution time, in seconds.&lt;/p&gt;

&lt;p&gt;For example, suppose that you want to measure the performance of MATLAB’s built-in function, &lt;code&gt;isprime()&lt;/code&gt; for a given input value to this function. You can compute the time to execute the function using &lt;code&gt;timeit()&lt;/code&gt; like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeit( @()isprime(10^14) ) % pass the function as a handle to timeit()
ans =
    0.0787
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, this function &lt;code&gt;isprime()&lt;/code&gt; will have different performance given different input numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeit( @()isprime(10^4) ) % pass the function as a handle to timeit()
ans =
   2.0402e-05
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;time-portions-of-code&quot;&gt;Time Portions of Code&lt;/h3&gt;

&lt;p&gt;To estimate how long a portion of your program takes to run or to compare the speed of different implementations of portions of your program, you can use MATLAB stopwatch timer functions: &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;. Invoking &lt;code&gt;tic&lt;/code&gt; starts the timer, and the next &lt;code&gt;toc&lt;/code&gt; reads the elapsed time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;tic
   % The program section to time. 
toc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Sometimes programs run too fast for &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; to provide useful data. If your code is faster than &lt;strong&gt;1/10 second&lt;/strong&gt;, consider timing it while running in a loop, and then average the result to find the time for a single run of the loop.&lt;/p&gt;

&lt;h4 id=&quot;the-cputime-function-vs-tictoc-and-timeit&quot;&gt;The &lt;code&gt;cputime()&lt;/code&gt; function vs. &lt;code&gt;tic/toc&lt;/code&gt; and &lt;code&gt;timeit()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;There is another MATLAB function that can do timing of your scripts or your functions: The &lt;code&gt;cputime()&lt;/code&gt; function measures the total CPU time and &lt;strong&gt;sums across all threads (cores) in the CPU&lt;/strong&gt;. This measurement is different from the &lt;strong&gt;wall-clock time&lt;/strong&gt; that &lt;code&gt;timeit()&lt;/code&gt; or &lt;code&gt;tic/toc&lt;/code&gt; return, and could be misleading. For example, the CPU time for the pause function is typically small, but the wall-clock time accounts for the actual time that MATLAB execution is paused. Therefore, the wall-clock time might be longer.&lt;/p&gt;

&lt;p&gt;If your function uses four processing cores equally, the CPU time could be approximately four times higher than the wall-clock time.&lt;/p&gt;

&lt;p&gt;Frequently, your best choice to measure the performance of your code is &lt;code&gt;timeit()&lt;/code&gt; or &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;. These functions return wall-clock time. Note that, unlike &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;, the &lt;code&gt;timeit()&lt;/code&gt; function calls your code multiple times, and, therefore, considers the cost of first-time calls to your functions, which are typically more time-consuming than subsequent calls.&lt;/p&gt;

&lt;h3 id=&quot;some-tips-for-measuring-performance&quot;&gt;Some tips for Measuring Performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Always time a &lt;strong&gt;significant enough&lt;/strong&gt; portion of code. Normally, the code that you are timing should &lt;strong&gt;take more than 1/10 second to run&lt;/strong&gt;, otherwise the timing may not be very accurate.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Put the code you are trying to time into a function instead of timing it at the command line or inside a script.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Unless you are trying to measure &lt;strong&gt;first-time cost of running your code&lt;/strong&gt;, run your code multiple times. Use the &lt;code&gt;timeit()&lt;/code&gt; function for multiple calls timing of your function.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Avoid &lt;code&gt;clear all&lt;/code&gt; when measuring performance of your MATLAB scripts. This will add additional time to wipe MATLAB workspace from all current existing variable definitions, and therefore contaminate the timing measurements of the actual code in your MATLAB scripts.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;When performing timing measurements, assign your output to a variable instead of letting it default to &lt;code&gt;ans()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/10-matlab-loops-vectorization&quot;&gt;Lecture 10: MATLAB - loops and vectorization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 3: Midterm Exam Date and Schedule]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/3-midterm-exam-schedule"/>
  <id>http:/ICP2017F/announcement/3-midterm-exam-schedule</id>
  <published>2017-10-25T00:00:00-05:00</published>
  <updated>2017-10-25T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to find out the most popular vote in class for the midterm exam and its date.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type=&quot;text/javascript&quot;,c.async=!0,c.id=n,c.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd_2BAklP6IRJLSSnZF_2FQhOsoqlzlxX39RgVUO8eiKa9A61.js&quot;].join(&quot;&quot;),a.parentNode.insertBefore(c,a))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-results&quot;&gt;Survey results&lt;/h2&gt;

&lt;p&gt;A slight majority (52.87%) of the class voted for cancelling the midterm exam and redistributing its grade to homework, quiz, and the final semester project.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/3/results.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/3/numbers.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/3-midterm-exam-schedule&quot;&gt;Announcement 3: Midterm Exam Date and Schedule&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Solutions - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-solutions-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-solutions-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;3-problems-matlab-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz3.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.*&lt;/code&gt; multiplies two arrays A and B element by element and returns the result in C, if &lt;code&gt;C = A .* B&lt;/code&gt;. By contrast, the operator &lt;code&gt;*&lt;/code&gt; is understood by MATLAB as &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_multiplication&quot; target=&quot;_blank&quot;&gt;matrix multiplication (or cross product)&lt;/a&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A.*B
C =
    2     0    21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
We discussed in question 1 above, that the operator &lt;code&gt;*&lt;/code&gt; in MATLAB performs matrix multiplication. So, all you need to do is to convert the vector &lt;code&gt;B&lt;/code&gt; to a column vector using the transpose operator &lt;code&gt;'&lt;/code&gt;, in order to get the dot-product result,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A * B'
C =
    23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to &lt;code&gt;'MATLAB&lt;/code&gt;’. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an &lt;a href=&quot;http:/ICP2017F/quiz/3-solutions/testString.m&quot; target=&quot;_blank&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; testString('MATLAB')
ans =
     1
&amp;gt;&amp;gt; testString('matlab')
ans =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The MATLAB built-in function for string comparison is &lt;code&gt;strcmp()&lt;/code&gt;. This is the correct way of string comparison. The logical &lt;code&gt;==&lt;/code&gt; operator is an elemental function, meaning that it assumes the two string being compared are arrays of characters, and therefore, the output of the comparison is also an array of logical values. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; '1' == 'amir'
ans =
     0     0     0     0
&amp;gt;&amp;gt; '12' == 'amir'
Error using  == 
Matrix dimensions must agree. 
&amp;gt;&amp;gt; strcmp('1','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('12','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('amir','amir')
ans =
     1
&amp;gt;&amp;gt; 'amir' == 'amir'
ans =
     1     1     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Recall from our discussions in class that &lt;code&gt;||&lt;/code&gt; does short-circuiting, meaning that, if the first element is true, the result of the expression involving OR operator will be true regardless of the rest of the logical expression. For example, &lt;code&gt;true OR x&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; whatever logical value &lt;code&gt;x&lt;/code&gt; might have. Therefore, MATLAB has a special operator &lt;code&gt;||&lt;/code&gt; for the logical operator OR, that avoids the calculation of the rest of the logical OR expression, if it is not needed, thus, increasing the speed of your code by avoiding unnecessary logical calculations. The second difference is that,  the operator &lt;code&gt;||&lt;/code&gt; is for scalar operations, for example, the following logical operation will lead to an error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] || [true false]
Operands to the || and &amp;amp;&amp;amp; operators must be convertible to logical scalar values. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The correct operator for elemental logical OR operation is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] | [true false]
ans =
     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = (b~=0) &amp;amp;&amp;amp; (a/b&amp;gt;10.0)
x =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This way, the expression &lt;code&gt;(a/b&amp;gt;10.0)&lt;/code&gt; will not be evaluated when $b=0$, and &lt;code&gt;(b~=0)&lt;/code&gt; will be returned as the value of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t need to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Structure of arrays&lt;/em&gt; is much more efficient for storing grade data. As we discussed repeatedly in class, this is due to the fact that data is stored sequentially in computer memory. Therefore, it would be much easier for the computer to fetch data from memory when all grade data is stored in an array sequentially in memory, than when each grade is separated from the next student’s grade by their names, just as in &lt;em&gt;array of structures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x1,x2] = getRoot(a,b,c)
    d = sqrt(b^2 - 4*a*c);
    x1 = (-b + d) / (2*a);
    x2 = (-b - d) / (2*a);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [r1,r2] = getRoot(1,1,1)
r1 =
  -0.5000 + 0.8660i
r2 =
  -0.5000 - 0.8660i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = @(in) (integral(@(x) (x.^2 + in.c*x + 1),in.a,in.b));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result=getFactorial(x)
    if (x&amp;lt;=0)
        result=1;
    else
        result=x*getFactorial(x-1);
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-solutions-matlab-branching-functions&quot;&gt;Quiz 3: Solutions - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Problems - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-problems-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-problems-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to string &lt;code&gt;'MATLAB'&lt;/code&gt;. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;br /&gt;
&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t need to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-problems-matlab-branching-functions&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 2: Course Progress Evaluation]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/2-course-progress-evaluation"/>
  <id>http:/ICP2017F/announcement/2-course-progress-evaluation</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your progress so far in this class, and to make improvements for the rest of the semester, if needed. I rely on your answers and comments to plan for the rest of the semester, so your accurate timely response is appreciated.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type=&quot;text/javascript&quot;,c.async=!0,c.id=n,c.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd7kUVH_2BT6kl87P5KEhCQYsiCC8k14kAlx5SRs_2BEZLQT4.js&quot;].join(&quot;&quot;),a.parentNode.insertBefore(c,a))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

## Survey results
The following are the results of the 9 questions of the survey as well as comments. The total number of respondents was 18.  

**SUMMARY:**  

- There is **significant heterogeneity** in the abilities of individuals **in this class**, such that some find this course too difficult, and some find it too easy and lame.  
&lt;br&gt;
- However, despite the great student-heterogeneity, the course-homework-quiz **speed and load are on average fair**, so far in this class.  
&lt;br&gt;
- The online **web design of the course** material is a **great aid to students' learning** in this class.  
&lt;br&gt;
- The entire class unanimously prefer **a Python project instead of final exam**.  
&lt;br&gt;
- **one-hour per week** is **not enough** for this course.  

&lt;br&gt;

---
---

&lt;br&gt;


&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q1.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q2.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q3.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q4.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q5.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q6.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q7.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q8.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q9.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;br&gt;
**Comments:**  

Just a bit slow. I would like to just stop babying people, it's homework, things should be done by the time we get here or else we're just debugging problems here.  
2/22/2017 9:06 AM

Please end the class on time! I have class at 10 AM sharp and must leave no later than 9:50.  
2/22/2017 9:02 AM

At this point, assignments with Python are needed to start improving upon programming and computation based skills, since I feel like not much has been accomplished in the class. The most useful yet easiest change would be to publish the lectures ahead of time, so I have a better idea of what the next class will be over.  
2/22/2017 1:38 AM

I would really love class time to be spent exclusively on python and the jupyter environment. I really dislike the use of Git for this class, and I feel it detracts from our learning of the real material. I wish we could just submit our stuff to you via canvas or some other means. I feel like we haven't adequately covered github, and yet just about all classtime thus far has been dedicated to it. I was hoping for this class to teach me python but I honestly feel bogged down by github and the means of submission- I feel we are spending time on the wrong thing. I think github has a time and place, but I don't feel that it is appropriate for this class. Overall though, I think you are doing an excellent job teaching and I look forward to learning more with you.  
2/22/2017 1:26 AM

I am impressed with how much I have been able to get out of a 1 hour course so far.  
2/21/2017 11:20 PM

Not your fault, but simply 1 hour a week of lecture time is not enough.  
2/21/2017 10:17 PM

Homework instructions are very clear but I'm confused on the way to present the outputs.  
2/21/2017 9:20 PM

I only wish this course was more like a real computing course instead of a 1hr lab. It would be a lot more useful if we could meet 2x a week and had more 1-on-1 time.  
2/21/2017 7:00 PM

Love the course so far. Learning so much. The grades worry me though - there needs to be a clearer understanding of what's going to be on a quiz and the homeworks need to be a little more well defined. The first two quizzes and first homework were rough but quiz 3 and homework 2 already got so much better. Thanks so much!  
2/21/2017 6:38 PM

Ask more concept based questions rather than memory. Other than that, I really like this class.  
2/20/2017 11:48 PM

All the information we are supposed to get out of this course is so critical. Version Control, python programming, learning linux.. it's all perfect. We just need more time. If this were a 2 or 3 hours course that would be incredible. If we met MWF 9-10, this class would be my favorite, and I would be so confident in my computer science ability.  
2/17/2017 12:34 AM

This class definitely needs more time per week than 1 hour. This is not enough time at all to give out all the information needed.   
2/16/2017 7:32 PM

--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/2-course-progress-evaluation&quot;&gt;Announcement 2: Course Progress Evaluation&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 8-9: MATLAB - functions II & III]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/8-9-matlab-functions-II-III"/>
  <id>http:/ICP2017F/lecture/8-9-matlab-functions-II-III</id>
  <published>2017-10-13T00:00:00-05:00</published>
  <updated>2017-10-13T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains the concept of functions and different of types of it in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful link:&lt;/strong&gt; &lt;a href=&quot;https://www.mathworks.com/help/matlab/functionlist.html&quot; target=&quot;_blank&quot;&gt;Comprehensive MATLAB function list&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/4Fx4ulZt0_c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/E674aXSMHJY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/a4qXf1czT_E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/m3QK91zKt4Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;function-handles-in-matlab&quot;&gt;Function handles in MATLAB&lt;/h2&gt;

&lt;p&gt;Function Handles are variables that allow you to invoke a function indirectly. A &lt;strong&gt;function handle&lt;/strong&gt; is a &lt;strong&gt;data type&lt;/strong&gt; that &lt;strong&gt;stores an association to a function&lt;/strong&gt;. For example, you can use a function handle to construct &lt;a href=&quot;#anonymous-functions&quot;&gt;anonymous functions&lt;/a&gt; or specify &lt;a href=&quot;https://www.mathworks.com/help/matlab/creating_plots/callback-definition.html&quot; target=&quot;_blank&quot;&gt;call-back functions&lt;/a&gt;. Also, you can use a function handle to &lt;strong&gt;pass a function to another function&lt;/strong&gt;, or call local functions from outside the main function (see below).&lt;/p&gt;

&lt;p&gt;Indirectly calling a function enables you to invoke the function regardless of where you call it from. Typical uses of function handles include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pass a function to another function (often called &lt;a href=&quot;#function-functions&quot;&gt;function functions&lt;/a&gt;). For example, passing a function to integration or optimization functions as we will see later in this course, such as &lt;code&gt;integral&lt;/code&gt; and &lt;code&gt;fzero&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Construct handles to functions defined inline instead of stored in a program file (anonymous functions).&lt;/li&gt;
  &lt;li&gt;Call &lt;a href=&quot;#local-functions&quot;&gt;local functions&lt;/a&gt; from outside the main function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see if a variable, say &lt;code&gt;h&lt;/code&gt;, is a function handle using &lt;code&gt;isa(h,'function_handle')&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-function-handle&quot;&gt;Creating function handle&lt;/h3&gt;

&lt;p&gt;The general method for creating a function handle is to precede the function name with an &lt;code&gt;@&lt;/code&gt; sign. For example, if you have a function called &lt;code&gt;myfunc&lt;/code&gt;, you can create a handle named &lt;code&gt;f&lt;/code&gt; for it as follows,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = @myfunc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function out = getSq(x)
    out = x.^2;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then you can create a function handle on MATLAB command line like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; f = @getSq;
&amp;gt;&amp;gt; a = 4;
&amp;gt;&amp;gt; b = f(a)
b =
    16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If the function does not require any inputs, then you can call the function with empty parentheses. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; h = @ones;
&amp;gt;&amp;gt; a = h()
a =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you don’t add &lt;code&gt;()&lt;/code&gt; at the time of call, then simply another function handle will be created, now assigned to &lt;code&gt;a&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; h = @ones;
&amp;gt;&amp;gt; a = h
a = 
    @ones
&amp;gt;&amp;gt; class(a)
ans =
function_handle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Function handles can be passed as variables to other functions. For example, to calculate the integral of $f(x)=x^2$, as implemented in &lt;code&gt;getSq()&lt;/code&gt; above, on the range $[0,1]$ define,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; f = @getSq; 
&amp;gt;&amp;gt; q = integral(f,0,1)
q =
    0.3333
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;arrays-of-function-handles&quot;&gt;Arrays of function handles&lt;/h3&gt;

&lt;p&gt;You can also create an array of function handles by collecting them into a cell or structure array. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fset = {@sin, @cos, @tan, @cot};
&amp;gt;&amp;gt; fset{1}(pi)
ans =
   1.2246e-16
&amp;gt;&amp;gt; fset{2}(pi)
ans =
    -1
&amp;gt;&amp;gt; fset{3}(pi)
ans =
  -1.2246e-16
&amp;gt;&amp;gt; fset{4}(pi)
ans =
  -8.1656e+15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To get general information about a function handle on MATLAB command line, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; functions(fset{4})
ans = 
    function: 'cot'
        type: 'simple'
        file: ''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;function-types-in-matlab&quot;&gt;Function types in MATLAB&lt;/h2&gt;

&lt;p&gt;There are several types of functions in MATLAB. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;local functions,&lt;/li&gt;
  &lt;li&gt;nested functions,&lt;/li&gt;
  &lt;li&gt;private functions,&lt;/li&gt;
  &lt;li&gt;function functions,&lt;/li&gt;
  &lt;li&gt;anonymous functions&lt;/li&gt;
  &lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;anonymous-functions&quot;&gt;Anonymous functions&lt;/h3&gt;

&lt;p&gt;Anonymous functions allow you to create a MATLAB file without the need to put the function in a separate &lt;code&gt;.m&lt;/code&gt; file dedicated to the function. This function is associated with a variable whose data type is &lt;strong&gt;function_handle&lt;/strong&gt;. Anonymous functions can accept inputs and return outputs, just as standard functions do. However, they can &lt;strong&gt;contain only a single executable statement&lt;/strong&gt;. The concept of anonymous function is similar to &lt;a href=&quot;https://www.programiz.com/python-programming/anonymous-function&quot; target=&quot;_blank&quot;&gt;lambda functions in Python&lt;/a&gt;, if you are already familiar with this language. For example, consider the following handle to an anonymous function that finds the square of a number,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; sq = @(x) x.^2;
&amp;gt;&amp;gt; sq(2)
ans =
     4
&amp;gt;&amp;gt; sq([2,3,4])
ans =
     4     9    16
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;variables-in-the-anonymous-function-expressions&quot;&gt;Variables in the anonymous function expressions&lt;/h4&gt;

&lt;p&gt;Function handles can store not only an expression, but also variables that the expression requires for evaluation. For example, you can create a function handle to an anonymous function that requires coefficients &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1.3;
&amp;gt;&amp;gt; b = .2;
&amp;gt;&amp;gt; c = 30;
&amp;gt;&amp;gt; parabola = @(x) a*x.^2 + b*x + c;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; are available at the time you create parabola, the function handle includes those values. The values persist within the function handle even if you clear the variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; clear a b c
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = parabola(x)
y =
   31.5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But note that in order to supply different values for the coefficients, you must create a new (e.g., redefine the) function handle,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = -3.9;
&amp;gt;&amp;gt; b = 52;
&amp;gt;&amp;gt; c = 0;
&amp;gt;&amp;gt; parabola = @(x) a*x.^2 + b*x + c;
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = parabola(x)
y =
   48.1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-nested-anonymous-functions&quot;&gt;Multiple (nested) anonymous functions&lt;/h4&gt;

&lt;p&gt;The expression in an anonymous function can include another anonymous function. This is useful for passing different parameters to a function that you are evaluating over a range of values. For example, suppose you want to solve the following equation for varying values of the variable &lt;code&gt;c&lt;/code&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(c) = \int^1_0 \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;You can do so by combining two anonymous functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;g = @(c) (integral(@(x) (x.^2 + c*x + 1),0,1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the steps to derive the above nested anonymous function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write the integrand as an anonymous function,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;@(x) (x.^2 + c*x + 1)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluate the function from zero to one by passing the function handle to integral,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;integral(@(x) (x.^2 + c*x + 1),0,1)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Supply the value for c by constructing an anonymous function for the entire equation,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;g = @(c) (integral(@(x) (x.^2 + c*x + 1),0,1));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final function allows you to solve the equation for any value of &lt;code&gt;c&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; g(10)
ans =
    6.3333
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;anonymous-functions-with-no-input&quot;&gt;Anonymous functions with no input&lt;/h4&gt;

&lt;p&gt;If your function does not require any inputs, use empty parentheses when you define and call the anonymous function. Otherwise, as stated above in &lt;a href=&quot;#function-handles&quot;&gt;function handles&lt;/a&gt;, you will simply create a new function handle. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; t = @() datestr(now);
&amp;gt;&amp;gt; d = t()
d =
23-May-2017 19:54:07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and omitting the parentheses in the assignment statement creates another function handle, and does not execute the function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = t
d = 
    @()datestr(now)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;anonymous-functions-with-multiple-inputs-or-outputs&quot;&gt;Anonymous functions with multiple inputs or outputs&lt;/h4&gt;

&lt;p&gt;Anonymous functions require that you explicitly specify the input arguments, as many as it may be, just the way you would for a standard function, separating multiple inputs with commas. For example, the following function accepts two inputs, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; myfunc = @(x,y) (x^2 + y^2 + x*y);
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = 10;
&amp;gt;&amp;gt; z = myfunc(x,y)
z =
   111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, you do not explicitly define output arguments when you create an anonymous function. If the expression in the function returns multiple outputs, then you can request them when you call the function. In that case, you should enclose multiple output variables in square brackets &lt;code&gt;[]&lt;/code&gt;. For example, MATLAB’s &lt;code&gt;ndgrid&lt;/code&gt; function can return as many outputs as the number of input vectors. This anonymous function that calls &lt;code&gt;ndgrid&lt;/code&gt; can also return multiple outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;mygrid = @(x,y,c) ndgrid((-x:x/c:x),(-y:y/c:y));
[X,Y] = mygrid(pi,2*pi,10);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can use the output from &lt;code&gt;mygrid&lt;/code&gt; to create a mesh or surface plot, like the following, as we will further discuss in future lectures on plotting in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Z = sin(X) + cos(Y);
mesh(X,Y,Z)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/8-9/mesh.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;arrays-of-anonymous-functions&quot;&gt;Arrays of anonymous functions&lt;/h4&gt;

&lt;p&gt;As we did above for MATLAB &lt;a href=&quot;#arrays-of-function-handles&quot;&gt;function handles&lt;/a&gt;, you can also store multiple anonymous functions in a cell array or structure array. The most common approach is to use a cell array, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = {@(x)x.^2;
     @(y)y+10;
     @(x,y)x.^2+y+10
     };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create the cell array, &lt;strong&gt;keep in mind&lt;/strong&gt; that &lt;strong&gt;MATLAB interprets spaces as column separators for the cell array&lt;/strong&gt;. Either omit spaces from expressions, as shown in the previous code, or enclose expressions in parentheses, such as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = {@(x) (x.^2);
     @(y) (y + 10);
     @(x,y) (x.^2 + y + 10)
     };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Access the contents of a cell using curly braces. For example, f{1} returns the first function handle. To execute the function, pass input values in parentheses after the curly braces:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = 10;
&amp;gt;&amp;gt; f{1}(x)
ans =
     1
&amp;gt;&amp;gt; f{2}(y)
ans =
    20
&amp;gt;&amp;gt; f{3}(x,y)
ans =
    21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;local-functions&quot;&gt;Local functions&lt;/h3&gt;

&lt;p&gt;MATLAB program files can contain code for more than one function. In a function file, the first function in the file is called the &lt;strong&gt;main function&lt;/strong&gt;. This function is &lt;strong&gt;visible to functions in other files&lt;/strong&gt;, or you can call it from the command line. Additional functions within the file are called &lt;strong&gt;local functions&lt;/strong&gt;, and they can occur in any order after the main function. Local functions are &lt;strong&gt;only visible to other functions in the same file&lt;/strong&gt;. They are equivalent to subroutines in other programming languages, and are &lt;strong&gt;sometimes called subfunctions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As of R2016b, you can also create local functions in a script file, as long as they all appear after the last line of script code. For more information, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/local-functions-in-scripts.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Create a function file named &lt;code&gt;mystats.m&lt;/code&gt; that takes as input a given vector of real numbers, and outputs the mean and median of the vector. The &lt;code&gt;.m&lt;/code&gt; file for this function should contain contains a main function &lt;code&gt;mystats()&lt;/code&gt;, and two local functions, &lt;code&gt;mymean&lt;/code&gt; and &lt;code&gt;mymedian&lt;/code&gt;. Test your main function using an input vector like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; myvec = [10:3:100];
&amp;gt;&amp;gt; mystats(myvec)
ans =
    55
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
function [avg, med] = mystats(x)
    n = length(x);
    avg = mymean(x,n);
    med = mymedian(x,n);
end

function a = mymean(v,n)
    % MYMEAN Example of a local function.
    a = sum(v)/n;
end

function m = mymedian(v,n)
    % MYMEDIAN Another example of a local function.
    
    w = sort(v);
    if rem(n,2) == 1
        m = w((n + 1)/2);
    else
        m = (w(n/2) + w(n/2 + 1))/2;
    end
end
```
&lt;br&gt;
Note that you cannot call the local functions, because local functions are not visible to any other place or function in MATLAB other than `mystats()`.  
```matlab
&gt;&gt; mymean(myvec,length(myvec))
Undefined function or variable 'mymean'. 
Did you mean:
&gt;&gt; mean(myvec,length(myvec))
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;collective-function-handle-for-all-local-functions&quot;&gt;Collective function handle for all local functions&lt;/h4&gt;

&lt;p&gt;MATLAB has a built-in function &lt;code&gt;localfunctions&lt;/code&gt; that returns a cell array of all local functions in the scope of the current function or script (i.e., in the current MATLAB file). This is very useful, when you want to write a function that returns to the main program, a list of functions local to this function. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function fh = computeEllipseVals
    fh = localfunctions;
end

function f = computeFocus(a,b)
    f = sqrt(a^2-b^2);
end

function e = computeEccentricity(a,b)
    f = computeFocus(a,b);
    e = f/a;
end

function ae = computeArea(a,b)
    ae = pi*a*b;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if you call &lt;code&gt;computeEllipseVals&lt;/code&gt; on the command prompt, you will get a cell array to all functions local to &lt;code&gt;computeEllipseVals&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fhcell = computeEllipseVals
ans = 
    @computeFocus       
    @computeEccentricity
    @computeArea
&amp;gt;&amp;gt; fhcell{3}(1,1) % get the area of an ellipse with semi-axes (1,1).
ans =
    3.1416
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;function-functions&quot;&gt;Function functions&lt;/h3&gt;

&lt;p&gt;Function-functions are functions that operate on other functions that are passed to it as input arguments. The function that is passed to the function-function is usually referred to as &lt;em&gt;passed function&lt;/em&gt;. A simple example is MATLAB’s built-in function &lt;code&gt;fplot(func,lim)&lt;/code&gt;, which plots the given input function &lt;code&gt;func&lt;/code&gt; to it within the limit &lt;code&gt;lim&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;fplot(@sin,[-2*pi 2*pi])
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/8/sin.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;nested-functions&quot;&gt;Nested functions&lt;/h3&gt;

&lt;p&gt;Nested functions, as implicitly described by their names, are completely contained within a parent function. Any function in a program file can include a nested function. For example, consider the following simple function &lt;code&gt;nestedfunc()&lt;/code&gt; inside of its parent function &lt;code&gt;parent()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function parent
    disp('This is the parent function')
    nestedfunc
    function nestedfunc
       disp('This is the nested function')
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; parent
This is the parent function
This is the nested function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The primary difference between nested functions and other types of functions is that they can &lt;strong&gt;access and modify variables that are defined in their parent functions&lt;/strong&gt;. Therefore, nested functions can use variables that are not explicitly passed as input arguments. In a parent function, you can create a handle to a nested function that contains the data necessary to run the nested function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements for Nested Functions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Although MATLAB functions do not typically require an &lt;code&gt;end&lt;/code&gt; statement, in order to nest any function in a program file, all functions in that file &lt;strong&gt;must use an &lt;code&gt;end&lt;/code&gt; statement&lt;/strong&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;You cannot define a nested function inside any of the MATLAB program control statements, such as &lt;code&gt;if/elseif/else&lt;/code&gt;, &lt;code&gt;switch/case&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;try/catch&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;You must call a nested function either directly by name (without using &lt;code&gt;feval&lt;/code&gt;), or using a function handle that you created using the &lt;code&gt;@&lt;/code&gt; operator (and not &lt;code&gt;str2func&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;All of the variables in nested functions or the functions that contain them must be explicitly defined. That is, you cannot call a function or script that assigns values to variables unless those variables already exist in the function workspace.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In general, variables in one function workspace are not available to other functions. However, &lt;strong&gt;nested functions can access and modify variables in the workspaces of the functions that contain them&lt;/strong&gt;. This means that both a nested function and the parent function that contains it can modify the same variable without passing that variable as an argument. For example, in each of these functions, &lt;code&gt;main1()&lt;/code&gt; and &lt;code&gt;main2&lt;/code&gt;, both parent functions and the nested functions can access variable &lt;code&gt;x&lt;/code&gt;,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main1
  x = 5;
  nestfun1
  function nestfun1 
      x = x + 1;
  end
  disp(['x = ',num2str(x)])
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main2
  nestfun2
  function nestfun2
      x = 5;
  end 
  x = x + 1;
  disp(['x = ',num2str(x)])
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main1
x = 5
&amp;gt;&amp;gt; main1()
x = 6
&amp;gt;&amp;gt; main2()
x = 6
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
When the parent function does not use a given variable, the variable remains local to the nested function. This is rather subtle and complicated. So pay attention. For example, in this function named main, the two nested functions have their own versions of &lt;code&gt;externFunc&lt;/code&gt; that cannot interact with each other, and calling &lt;code&gt;main&lt;/code&gt;, gives a syntax error in &lt;code&gt;nestedfun2&lt;/code&gt;, since &lt;code&gt;myvar&lt;/code&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main
  nestedfun1
  nestedfun2
  function nestedfun1
      myvar = 10;
      xyz = 5;
  end
  function nestedfun2
      myvar = myvar + 2;
  end
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
Undefined function or variable 'myvar'.
Error in main/nestedfun2 (line 10)
      myvar = myvar + 2;
Error in main (line 3)
  nestedfun2
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, even the slightest mention of the variable &lt;code&gt;myvar&lt;/code&gt;, like the following, makes it accessible in the scope of both main and nested functions.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main
  nestedfun1
  nestedfun2
    
  function nestedfun1
      myvar = 10;
  end

  function nestedfun2
      myvar = myvar + 2;
  end
  disp(['myvar = ',num2str(myvar)]);
  disp(['class(myvar) = ',class(myvar)]);
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
myvar = 12
class(myvar) = double
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, if there is any other function in MATLAB path that has the same name as this variable &lt;code&gt;myvar&lt;/code&gt;, then MATLAB by default will call the function, instead of invoking the value for this variable given by the nested functions. For example if the following function is in MATLAB path,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = myvar
  result = -13;
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
then calling the same function &lt;code&gt;main&lt;/code&gt; as above would give,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
myvar = -13
class(myvar) = double
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The scope of variables in MATLAB functions, especially nested functions, can become a significant source of error and confusion in your MATLAB code, if you are not careful. As a result, MATLAB’s code editor, has special syntax-highlighting features for variables that are shared between nested functions, and is very smart in automatically detecting syntax or semantic errors in your codes. So, I always recommend you to use MATLAB’s own editor and debugger. You can find more information about this issue &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/check-variable-scope-in-editor.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;private-functions&quot;&gt;Private Functions&lt;/h3&gt;

&lt;p&gt;A typical modern MATLAB contains thousands of M-files on the user’s path, all
accessible just by typing the name of the M-file. While this ease of accessing M-files is
an advantage, it can lead to clutter and clashes of names, not least due to the presence
of “helper functions” that are used by other functions but not intended to be called
directly by the user. Private functions provide an elegant way to avoid these problems.
Any functions residing in a directory called private are visible only to functions in
the parent directory. They can therefore have the same names as functions in other
directories. When MATLAB looks for a function it searches subfunctions, then private
functions (relative to the directory in which the function making the call is located),
then the current directory and the path. Hence if a private function has the same
name as a nonprivate function (even a built-in function), the private function will be
found first.&lt;/p&gt;

&lt;h3 id=&quot;recursive-functions&quot;&gt;Recursive functions&lt;/h3&gt;

&lt;p&gt;In programming, a recursive function is a function that calls itself. Recursion is needed frequently in programming, although there might be better, more efficient ways of implementing many of the simple explanatory recursion examples that you find in programming books. A prominent and sometimes more efficient alternative to &lt;strong&gt;recursive programming&lt;/strong&gt; is &lt;strong&gt;iterative methods&lt;/strong&gt; (e.g., loops and vectorization, which is the topic of the next lecture). Nontrivial examples that require recursive programming are abundant, but go beyond the scope of this course. Ask me in person and I will give you some examples from my own research.&lt;/p&gt;

&lt;p&gt;To begin, let’s write a simple function that takes in one positive integer $n$, and calculates its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result=getFactorial(x)
    if (x&amp;lt;=0)
        result=1;
    else
        result=x*getFactorial(x-1);
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getFactorial(3)
ans =
     6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Consider the MATLAB intrinsic function &lt;a href=&quot;&quot;&gt;&lt;code&gt;strtok&lt;/code&gt;&lt;/a&gt;, which returns the first token (word) in a given string (sentence). Now, write a recursive MATLAB function that reverses the input sentence given by the user like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; reverseSentence('MATLAB is a rather strange but very powerful programming language')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;language programming powerful very but strange rather a is MATLAB 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function reverseSentence(string)
    % reverseSentence recursively prints the words in a string in reverse order    
    getToken(string)
    function getToken(string)
        [word, rest] = strtok(string);
        if ~isempty(rest)
            getToken(rest);
        end
        fprintf([word,' '])
    end
    fprintf('\n')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;matlabs-intrinsic-functions&quot;&gt;MATLAB’s intrinsic functions&lt;/h2&gt;

&lt;p&gt;You may have already notices that functions are among the most useful concepts in programming. In fact, MATLAB owes its popularity to more 10000 built-in functions that contains,  and the number is growing every year. That means we don’t need to write programs for more than 10000 important general tasks that we may need to do everyday, for example, integration, differentiation, various types of plotting, root finding and many more.&lt;/p&gt;

&lt;p&gt;A comprehensive list of MATLAB’s built-in functions is available in &lt;a href=&quot;https://www.mathworks.com/help/matlab/functionlist.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;. I recommend you to bookmark this link on your personal computer, in order to get help from it whenever you need. As reminder, the following list contains some useful MATLAB functions, some of which we also discussed in the previous sections. Search for their cool functionalities in MATLAB manual!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;func2str&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;str2func&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fplot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;feval&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fzero&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that you can use the first one (&lt;code&gt;doc&lt;/code&gt;) to view the information all the rest, even itself!&lt;/p&gt;

&lt;h2 id=&quot;scope-of-variables-in-matlab&quot;&gt;Scope of variables in MATLAB&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Variable scope&lt;/strong&gt; refers to the extent of the code in which a variable can be referenced, accessed or modified, without resulting in an access error. We have already discussed that variables inside functions are local to the functions and not visible to other functions in MATLAB.  Variables defined inside a function are called &lt;strong&gt;local variables&lt;/strong&gt;. They reside in the corresponding &lt;strong&gt;workspaces&lt;/strong&gt; of the functions. The scope of &lt;strong&gt;local variables&lt;/strong&gt; and &lt;strong&gt;dummy arguments&lt;/strong&gt; is &lt;strong&gt;limited to the function&lt;/strong&gt; (that is, to their workspace) in which they are defined. If the function contains nested functions, the code in the nested functions can access all variables defined in their parent function.&lt;/p&gt;

&lt;p&gt;Occasionally it is convenient to create variables that exist in more than one workspace including, possibly, the main workspace. This can be done using the global statement. Variables stored in the &lt;strong&gt;MATLAB workspace&lt;/strong&gt; (i.e., &lt;strong&gt;global memory&lt;/strong&gt;) are called &lt;strong&gt;global variables&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;global-vs-local-variables&quot;&gt;Global vs local variables&lt;/h3&gt;

&lt;p&gt;Frequently, we need data (variable) protection (encapsulation) provided by local variables defined inside functions. In general, &lt;strong&gt;you should always do your best to avoid using global variables everywhere in your codes as much as possible&lt;/strong&gt;. For small projects and problems, this may not be a significant issue. However, in large scale problems, the use of global variables can cause significant confusion, poor efficiency of your code, and even wrong results!&lt;/p&gt;

&lt;p&gt;Occasionally, it may be useful to access global variables from within a function, for example,  when the global variables contain large amounts of data and passing them to through the function arguments may lead to significant consumption of computer memory and time.&lt;/p&gt;

&lt;h3 id=&quot;global-variable-usage-syntax&quot;&gt;Global variable usage syntax&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;To access a global variable from within a function, one should explicitly label the variable as &lt;code&gt;global&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A global variable must be declared global before it is used the first time in a function.&lt;/li&gt;
  &lt;li&gt;Global variable declarations should be placed at the beginning of a function definition.&lt;/li&gt;
  &lt;li&gt;For making a variable global in MATLAB’s base workspace, you should also first declare it as global.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function setGlobalx(val)
    global x
    x = val;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; setGlobalx(10)
&amp;gt;&amp;gt; x
Undefined function or variable 'x'. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The problem here is that &lt;code&gt;x&lt;/code&gt; is not declared as global in MATLAB’s base workspace. To do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; global x
&amp;gt;&amp;gt; setGlobalx(10)
&amp;gt;&amp;gt; x
x =
    10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Exercise&lt;/strong&gt;:&lt;br /&gt;
Consider the same &lt;code&gt;reverseSentence&lt;/code&gt; function that we discussed above, but this time instead of giving it an input argument, we want to use a global variable string from MATLAB’s base workspace. How would you implement this, such that the following commands lead to the same output from the new global function?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; global globalString
&amp;gt;&amp;gt; globalString = 'MATLAB is a rather strange but very powerful programming language';
&amp;gt;&amp;gt; reverseSentenceGlobal()
language programming powerful very but strange rather a is MATLAB 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
function reverseSentenceGlobal()
    % reverseSentence recursively prints the words in a string in reverse order
    global globalString
    getToken(globalString)
    function getToken(string)
        [word, rest] = strtok(string);
        if ~isempty(rest)
            getToken(rest);
        end
        fprintf([word,' '])
    end
    fprintf('\n')
end
```
--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;persistent-variables&quot;&gt;persistent variables&lt;/h3&gt;

&lt;p&gt;Sometimes you may need to keep a variable inside a function local, but still you want the variable to retain its value from the last call of the function in the most recent function call. This is very useful, in particular makes your code immune to pitfalls of declaring variables &lt;code&gt;global&lt;/code&gt;. The way to it is through the use of &lt;code&gt;persistent&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;When you declare a variable within a function as persistent, the variable retains its value from one function call to the next. Other local variables retain their value only during the current execution of a function. Persistent variables are equivalent to static variables in other programming languages. Like &lt;code&gt;global&lt;/code&gt; attribute inside functions, you have to declare variables using the &lt;code&gt;persistent&lt;/code&gt; keyword before you use them inside the function. For example, consider the following function that adds an input value to some older value that already exists in the function from the old calls. If it is the first function call, then simply the input value is returned.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = findSum(inputvalue)
    persistent summ
    if isempty(summ)
    summ = 0;
    end
    summ = summ + inputvalue;
    result = summ;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; findSum(10)
ans =
    10
&amp;gt;&amp;gt; findSum(10)
ans =
    20
&amp;gt;&amp;gt; findSum(10)
ans =
    30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to clean the workspace of the function from these persistent variables, either of the two following methods work,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;    clear all % dangerous! clears all objects in the MATLAB workspace.
    clear &amp;lt;functionName&amp;gt; % clears only this specific function's workspace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To prevent clearing persistent variables, lock the function file using mlock.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/variables-in-nested-and-anonymous-functions.html&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; are some advanced general advice by MATLAB developers on defining new variables and the scope of variables in MATLAB functions.&lt;/p&gt;

&lt;h2 id=&quot;matlab-functions-vs-matlab-scripts&quot;&gt;MATLAB functions vs. MATLAB scripts&lt;/h2&gt;

&lt;p&gt;MATLAB scripts are m-files containing MATLAB statements. MATLAB &lt;code&gt;functions&lt;/code&gt; are another type of m-file, which were comprehensively discussed above. The biggest difference between scripts and functions are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;functions can have input and output parameters. Script files can only operate on the variables that are hard-coded into their m-file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;functions much more flexible than scripts. They are therefore more suitable for general purpose tasks, or for writing a scientific software. Scripts are useful for tasks that don’t change. They are also a way to document a specific sequence of actions, say a function call with special parameter values, that may be hard to remember.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;A script can be thought of as a keyboard macro: when you type the name of the script, all of the commands contained in it are executed just as if you had typed these commands into the command window. Thus, all variables created in the script are added to the workspace for the current session. Also, if any of the variables in the script file have the same name as the ones in your current workspace, the values of those variables in the workspace are changed by the actions in the script. This can be used to your advantage. It can also cause unwanted &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; target=&quot;_blank&quot;&gt;side-effects&lt;/a&gt;. In contrast, function variables are local to the function. (with the exception that you could declare and use global variables with explicit &lt;code&gt;global&lt;/code&gt; attribute.) The local scope of function variables gives you greater security and flexibility. To summarize, the workspace of MATLAB scripts is the base MATLAB workspace, whereas functions, have their own individual workspaces.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/8-9-matlab-functions-II-III&quot;&gt;Lecture 8-9: MATLAB - functions II & III&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: MATLAB - functions I]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/7-matlab-functions-I"/>
  <id>http:/ICP2017F/lecture/7-matlab-functions-I</id>
  <published>2017-10-11T00:00:00-05:00</published>
  <updated>2017-10-11T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains the concept of functions in programming, in particular in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/oKvgOGgmNIg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Functions in programming languages are self-contained modules of code that accomplish a specific task. They &lt;em&gt;usually&lt;/em&gt; (but not always) take some data as &lt;strong&gt;input&lt;/strong&gt;, &lt;strong&gt;process&lt;/strong&gt; the input data, and &lt;strong&gt;return&lt;/strong&gt; a result. Therefore, the definition of function in programming goes far beyond the mathematical definition of function. For example, programming functions can have no input or output.&lt;/p&gt;

&lt;p&gt;The main reason for writing functions is to reduce coding redundancy and increase code reuse. Once a function is written, it can be used over and over and over again. Whenever a function is needed, it can be &lt;strong&gt;called&lt;/strong&gt; from the inside of the main program or from inside of other functions.&lt;/p&gt;

&lt;p&gt;In MATLAB, like most other programming languages, &lt;strong&gt;function&lt;/strong&gt; is a collection of programming statements that can be executed whenever and wherever  requested. Both MATLAB scripts and functions allow you to reuse sequences of commands by storing them in program files. &lt;strong&gt;Scripts&lt;/strong&gt; are the simplest type of program, since they store commands exactly as you would type them at the command line. &lt;strong&gt;Functions&lt;/strong&gt; provide more flexibility, primarily because you can pass input values and return output values. The general syntax for a MATLAB function is the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [y1,...,yN] = myfunc(x1,...,xM)
    % here is the body of function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above declares a function named &lt;code&gt;myfunc&lt;/code&gt; that accepts inputs &lt;code&gt;x1,...,xM&lt;/code&gt; and returns outputs &lt;code&gt;y1,...,yN&lt;/code&gt;. This declaration statement must be the first executable line of the function. Just like MATLAB variables, valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores.&lt;/p&gt;

&lt;p&gt;You can save your function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In a function file which contains only function definitions. The name of the file should match the name of the first function in the file.&lt;/li&gt;
  &lt;li&gt;In a script file which contains commands and function definitions. Functions must be at the end of the file. This may seem a bit odd to you, if you already know other programming languages, for example, Python. Script files cannot have the same name as a function in the file. &lt;strong&gt;Functions in scripts&lt;/strong&gt; are supported only in &lt;strong&gt;MATLAB R2016b or later&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Files can include multiple local functions or nested functions. For readability, use the optional &lt;code&gt;end&lt;/code&gt; keyword to indicate the end of each function in a file. The &lt;strong&gt;end keyword is required when&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Any function in the file contains a nested function.&lt;/li&gt;
  &lt;li&gt;The function is a local function within a function file, and any local function in the file uses the end keyword.&lt;/li&gt;
  &lt;li&gt;The function is a local function within a script file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, it is always good to add the &lt;code&gt;end&lt;/code&gt; keyword to all functions, for better readability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br /&gt;
Let’s write a MATLAB function that takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [F] = c2f(C)
    F = (9.0/5)*C + 32;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;c_temp = 70.7; % The hottest place on Earth, Lut Desert in Iran 
f_temp = c2f(c_temp);
disp(['Temperature in Fahrenheit: ',num2str(f_temp)])
disp( ['The hottest place on Earth as of 2005 is in the Lut Desert in Iran at ' ...
      , num2str(70.7) ...
      , ' degrees Celsius.',char(10) ...
      , 'This corresponds to a temperature of ', num2str(159.26), ' degrees Fahrenheits!' ...
      ] );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Temperature in Fahrenheit: 159.26
The hottest place on Earth as of 2005 is in the Lut Desert in Iran at 70.7 degrees Celsius.
This corresponds to a temperature of 159.26 degrees Fahrenheits!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-input-arguments&quot;&gt;Functions with no input arguments&lt;/h3&gt;

&lt;p&gt;We can define functions that take no input argument, yet do something predefined for us. Consider the following function which gives information about the ICP course, when called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function info = get_ICP_info()
    info = 'ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.';
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; out = get_ICP_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-output-return-value&quot;&gt;Functions with no output (return value)&lt;/h3&gt;

&lt;p&gt;We can also modify the above function such that it does not return anything specifically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function get_ICP_info()
    disp('ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.');
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; get_ICP_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is almost equivalent to the word &lt;strong&gt;void&lt;/strong&gt; in languages like Java, C, and C++. If you set a variable equal to this function, you will get an error message, because the function does not return anything as output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; out = get_ICP_info()
Error using get_ICP_info
Too many output arguments.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-input-arguments&quot;&gt;Functions with multiple input arguments&lt;/h3&gt;

&lt;p&gt;Functions can take almost as many input arguments as we wish. Consider the following that takes two arguments,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = mypower(base,exponent)
    result = base^exponent;
    return
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; mypower(10,2)
ans =
   100
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;variable-number-of-input-arguments&quot;&gt;Variable number of input arguments&lt;/h4&gt;

&lt;p&gt;The functions that we have written thus far have contained a fixed number of input arguments and a fixed number of output arguments. But you can also define a MATLAB function that accepts a &lt;strong&gt;variable number of inputs&lt;/strong&gt;. In this case you use MATLAB’s builtin input argument cell &lt;code&gt;varargin&lt;/code&gt; in place of the arbitrary number of input arguments. The function nargin returns the number of input arguments that were passed to the function. For example, consider the following function that displays the values of each input to the function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function varlist(year,varargin)
   fprintf('Number of arguments: %d\n',nargin)
   celldisp(varargin)
   fprintf('The year is %d\n',year)
   fprintf('type of varargin is %s\n',class(varargin))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; varlist(2017,'what','a ','nice', 'weather')
Number of arguments: 5
varargin{1} =
what 
varargin{2} =
a 
varargin{3} =
nice 
varargin{4} =
weather 
The year is 2017
type of varargin is cell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can find more information about input/ouput function arguments &lt;a href=&quot;https://www.mathworks.com/help/matlab/input-and-output-arguments.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;optional-arguments-using-inputparser&quot;&gt;Optional arguments using &lt;code&gt;inputParser&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Unlike other languages such as Python, Fortran and C++, there is no simple direct way of having optional arguments in MATLAB functions, other than the one described above, using &lt;code&gt;varargin&lt;/code&gt;. However, MATLAB has a powerful set of built-in capabilities known as &lt;code&gt;inputParser&lt;/code&gt; for parsing the input arguments of a given function. The usage and details of this method goes beyond the scope of this class. However, you can learn more about it &lt;a href=&quot;http://www.mathworks.com/help/matlab/ref/inputparser-class.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;functions-with-multiple-output-return-values&quot;&gt;Functions with multiple output (return values)&lt;/h3&gt;

&lt;p&gt;MATLAB functions can also return more than one output value. The output could be of any type: vector, matrix, cell, structure, etc. For example, consider a function that takes an input vector of double and calculates its mean and standard deviation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [m,s] = stat(x)  % a function that returns the result as vector of length two
    n = length(x);
    m = sum(x)/n;
    s = sqrt(sum((x-m).^2/n));
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = [12.7, 45.4, 98.9, 26.6, 53.1];
&amp;gt;&amp;gt; stat(values)
ans =
   47.3400
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Notice that if you don’t provide two output arguments, then basically only one is reported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; valuesMean = stat(values)
valuesMean =
   47.3400
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [valuesMean, valuesStd] = stat(values)
valuesMean =
   47.3400
valuesStd =
   29.4124
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [valuesMean, valuesStd, dummy] = stat(values)   % too many output arguments is meaningless
Error using stat
Too many output arguments. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x,result] = stat(x) % the same function as above, but now returning the result as a structure, together with input x
    result = struct();
    result.n = length(x);
    result.mean = sum(x) / result.n;
    result.std = sqrt( sum( (x-result.mean).^2 / result.n ) );
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = [12.7, 45.4, 98.9, 26.6, 53.1];
&amp;gt;&amp;gt; stat(values)
ans =
   12.7000   45.4000   98.9000   26.6000   53.1000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [input,ouput] = stat(values)
input =
   12.7000   45.4000   98.9000   26.6000   53.1000
ouput = 
       n: 5
    mean: 47.3400
     std: 29.4124
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;br /&gt;
Write a function that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and finds the roots of this equation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x1,x2] = quadform(a,b,c)
    d = sqrt(b^2 - 4*a*c);
    x1 = (-b + d) / (2*a);
    x2 = (-b - d) / (2*a);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [r1,r2] = quadform(1,1,1)
r1 =
  -0.5000 + 0.8660i
r2 =
  -0.5000 - 0.8660i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;variable-number-of-output-arguments&quot;&gt;Variable number of output arguments&lt;/h4&gt;

&lt;p&gt;A variable number of output arguments can also be specified. For example, consider the following function &lt;code&gt;typesize()&lt;/code&gt; which takes one input argument &lt;code&gt;inputval&lt;/code&gt;. The function will always return a character specifying whether the input argument was a scalar (‘s’), vector (‘v’), or matrix (‘m’). This character is returned through the output argument &lt;code&gt;arrtype&lt;/code&gt;. Additionally, if the input argument was a vector, the function also returns the length of the vector, and if the input argument was a matrix, the function returns the number of rows and the number of columns of the matrix. The &lt;strong&gt;MATLAB’s builtin&lt;/strong&gt; output argument &lt;code&gt;varargout&lt;/code&gt; is used, which is a cell array. So, for a vector the length is returned through varargout, and for a matrix both the number of rows and columns are returned through &lt;code&gt;varargout&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [arrtype, varargout] = typesize(inputval)
    % typesize returns a character 'scalar' for scalar, 'vector'
    % for vector, or 'matrix' for matrix input argument
    % also returns length of a vector or dimensions of matrix
    % Format: typesize(inputArgument)
    [nrow, ncol ] = size(inputval);
    if nrow==1 &amp;amp;&amp;amp; ncol==1
    arrtype = 'scalar';
    elseif nrow==1 || ncol==1
    arrtype = 'vector';
    varargout{1} = length(inputval);
    else
    arrtype = 'matrix';
    varargout{1} = nrow;
    varargout{2} = ncol;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; typesize(10)
ans =
scalar
&amp;gt;&amp;gt; typesize(10:12)
ans =
vector
&amp;gt;&amp;gt; [inputType,inputLength] = typesize(10:12)
inputType =
vector
inputLength =
     3
&amp;gt;&amp;gt; [inputType,nrow,ncol] = typesize([10:12;13:15])
inputType =
matrix
nrow =
     2
ncol =
     3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/7-matlab-functions-I&quot;&gt;Lecture 7: MATLAB - functions I&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 11, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: MATLAB - operators, branching, and control statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/6-matlab-operators-branching"/>
  <id>http:/ICP2017F/lecture/6-matlab-operators-branching</id>
  <published>2017-10-09T00:00:00-05:00</published>
  <updated>2017-10-09T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains some of the most widely used operators, as well as branching statements in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/EnuaR-NGedQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Q6t2SDX9mRc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/eB4PH7qtEus&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;matlab-operators&quot;&gt;MATLAB operators&lt;/h2&gt;

&lt;p&gt;A complete list of MALTAB operators can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Corresponding to each operator, there is also MATLAB function that does the exact same thing for you.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Arithmetic operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Addition                                      &lt;/td&gt;&lt;td&gt;&lt;code&gt;plus()      &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary plus                                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;uplus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Subtraction                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;minus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary minus                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;uminus()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .* &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise multiplication                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;times()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; *  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix multiplication                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mtimes()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ./ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise right division                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;rdivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; /  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix right division                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mrdivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .\ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise left division                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;ldivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; \  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix left divison (also known as backslash) &lt;/td&gt;&lt;td&gt;&lt;code&gt;mldivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .^ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise power                            &lt;/td&gt;&lt;td&gt;&lt;code&gt;power()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ^  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix power                                  &lt;/td&gt;&lt;td&gt;&lt;code&gt;mpower()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .' &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Transpose                                     &lt;/td&gt;&lt;td&gt;&lt;code&gt;transpose() &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; '  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Complex conjugate transpose                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;ctranspose()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/arithop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Arithmetic operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Rational operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; == &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;eq()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Not equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ne()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than&lt;/td&gt;&lt;td&gt;&lt;code&gt;gt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ge()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than&lt;/td&gt;&lt;td&gt;&lt;code&gt;lt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;le()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/rationalop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Rational operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Logical operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND&lt;/td&gt;&lt;td&gt;&lt;code&gt;and()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; |  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR&lt;/td&gt;&lt;td&gt;&lt;code&gt;or()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;&amp;amp; &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; || &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical NOT&lt;/td&gt;&lt;td&gt;&lt;code&gt;not()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/logicop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Logical operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;

### Logical operator short-circuit in MATLAB

Note that there are two types of logical operators, one of which is called [short-circuit](http:/ICP2017F/lecture/6/shortCircuit.mp4){:target=&quot;_blank&quot;}. More information about them and their meanings can be found [here](https://www.mathworks.com/help/matlab/ref/logicaloperatorsshortcircuit.html#bt_0nai-1){:target=&quot;_blank&quot;}.

&lt;!--
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;video width=&quot;100%&quot; src=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;
--&gt;

&lt;h3 id=&quot;special-characters-in-matlab&quot;&gt;Special characters in MATLAB&lt;/h3&gt;

&lt;p&gt;There are also a set of characters that have special role in MATLAb, some of which we have already discussed in the past lectures. You can learn about them &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html#bvg3oy_-5&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implicit-type-casting-and-operator-overloading&quot;&gt;Implicit type casting and operator overloading&lt;/h2&gt;

&lt;p&gt;MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot; target=&quot;_blank&quot;&gt;loosely or weakly-typed language&lt;/a&gt;, which has a number of real-world implications. The first, and probably most notable, difference between MATLAB and a strongly-typed language is that you don’t have to explicitly declare the types of the variables you use. For example, the declarations x=5; x=’foo’ immediately following one another are perfectly acceptable; the first declaration causes x to be treated as a number, the second changes its treatment to a string.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;main benefit&lt;/strong&gt; of using a weakly-typed language is the &lt;strong&gt;ability to do rapid prototyping&lt;/strong&gt;. The number of lines of code required to declare and use a dynamically allocated array in C (and properly clean up after its use) are much greater than the number of lines required for the same process in MATLAB. Weak typing is also good for code-reuse. You can code a scalar algorithm in MATLAB and with relatively little effort modify it to work on arrays as well as scalars. The fact that MATLAB is a scripted instead of a compiled language also contributes to rapid prototyping.&lt;/p&gt;

&lt;p&gt;Weak typing is not without its pitfalls, though. For example, weak typing combined with unexpected user input can sometimes lead to erroneous results,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=5;
&amp;gt;&amp;gt; y=4;
&amp;gt;&amp;gt; x/y
ans =
    1.2500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt; whereas the same code in strongly-typed compiled languages, such as C and Fortran would have given &lt;em&gt;integer&lt;/em&gt; value &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Weak typing, combined with intrinsic MATLAB &lt;a href=&quot;https://www.google.com/search?q=operator+overloading&amp;amp;spell=1&amp;amp;sa=X&amp;amp;ved=0ahUKEwix2e-x1-vVAhUF-lQKHXZxCZYQvwUIIygA&amp;amp;biw=1344&amp;amp;bih=744&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;operator overloading&lt;/strong&gt;&lt;/a&gt; can also can lead to unexpected results when operations between mixed types are done. Consider what happens when you add &lt;code&gt;1+'1'&lt;/code&gt;, that is, the scalar 1 and the character ‘1’. The surprising result is 50. MATLAB automatically converts the character &lt;code&gt;'1'&lt;/code&gt; to its ASCII representation value, which is 49 (You can get the ASCII code for any character using the &lt;code&gt;abs()&lt;/code&gt; function). After this implicit conversion, MATLAB adds the scalar value of &lt;code&gt;1&lt;/code&gt; to return &lt;code&gt;50&lt;/code&gt;. (Note: While this example is somewhat contrived it can easily arise, especially when passing a function argument where the type is undetermined. To write completely safe weakly-typed code, user input should always be checked before performing operations on it.)&lt;/p&gt;

&lt;p&gt;The situation can be more complicated when you deal with strings rather than single characters. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=10;
&amp;gt;&amp;gt; y='10';
&amp;gt;&amp;gt; x+y
ans =
    59    58
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Basically, what happened above is that &lt;code&gt;'10'&lt;/code&gt; is considered as a vector of characters, therefore, when you add it to &lt;code&gt;10&lt;/code&gt;, Matlab automatically converts this string to a vector of corresponding ASCII values and adds the value &lt;code&gt;10&lt;/code&gt; to each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 'Hello' + 'World'
ans =
    159 212 222 216 211
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explicit-type-conversion&quot;&gt;Explicit type conversion&lt;/h2&gt;

&lt;p&gt;Unlike implicit type casting which is done by MATLAB under the hood as described above, which can also be dangerous, you can also explicitly request MATLAB to convert the type of a variable to some other type, using MATLAB’s built-in functions like &lt;code&gt;cast&lt;/code&gt;, or one of the &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-type-conversion.html&quot; target=&quot;_blank&quot;&gt;many other functions&lt;/a&gt; that MATLAB has for this purpose.&lt;/p&gt;

&lt;h3 id=&quot;array-vs-matrix-operations&quot;&gt;Array vs. Matrix Operations&lt;/h3&gt;

&lt;p&gt;We have already learned that arrays and matrices are not the same in MATLAB. As a result, the operators that can act on them are also not identical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matrix operations&lt;/strong&gt; follow the rules of linear algebra and are not compatible with multidimensional arrays. The required size and shape of the inputs in relation to one another depends on the operation. For non-scalar inputs, the matrix operators generally calculate different answers than their array operator counterparts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array operations&lt;/strong&gt; execute element by element operations on corresponding elements of vectors, matrices, and multidimensional arrays. If the operands have the same size, then each element in the first operand gets matched up with the element in the same location in the second operand. If the operands have compatible sizes, then each input is implicitly expanded as needed to match the size of the other.&lt;/p&gt;

&lt;p&gt;You can learn more about them in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;operator-precedence-in-matlab&quot;&gt;Operator precedence in MATLAB&lt;/h3&gt;

&lt;p&gt;You can build expressions that use any combination of arithmetic, relational, and logical operators. Precedence levels determine the order in which MATLAB® evaluates an expression. Within each precedence level, operators have equal precedence and are evaluated from left to right. The precedence rules for MATLAB operators are shown in this list, ordered from highest precedence level to lowest precedence level:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parentheses &lt;code&gt;()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Transpose &lt;code&gt;.'&lt;/code&gt;, power &lt;code&gt;.^&lt;/code&gt;, complex conjugate transpose &lt;code&gt;'&lt;/code&gt;, matrix power &lt;code&gt;^&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Power with unary minus &lt;code&gt;.^-&lt;/code&gt;, unary plus &lt;code&gt;.^+&lt;/code&gt;, or logical negation &lt;code&gt;.^~&lt;/code&gt; as well as matrix power with unary minus &lt;code&gt;^-&lt;/code&gt;, unary plus &lt;code&gt;^+&lt;/code&gt;, or logical negation &lt;code&gt;^~&lt;/code&gt;. (Note:   Although most operators work from left to right, the operators &lt;code&gt;^-&lt;/code&gt;, &lt;code&gt;.^-&lt;/code&gt;, &lt;code&gt;^+&lt;/code&gt;, &lt;code&gt;.^+&lt;/code&gt;, &lt;code&gt;^~&lt;/code&gt;, and &lt;code&gt;.^~&lt;/code&gt; work from second from the right to left. It is recommended that you use parentheses to explicitly specify the intended precedence of statements containing these operator combinations.)&lt;/li&gt;
  &lt;li&gt;Unary plus &lt;code&gt;+&lt;/code&gt;, unary minus &lt;code&gt;-&lt;/code&gt;, logical negation &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Multiplication &lt;code&gt;.*&lt;/code&gt;, right division &lt;code&gt;./&lt;/code&gt;, left division &lt;code&gt;.\&lt;/code&gt;, matrix multiplication &lt;code&gt;*&lt;/code&gt;, matrix right division &lt;code&gt;/&lt;/code&gt;, matrix left division &lt;code&gt;\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Colon operator &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Less than &lt;code&gt;&amp;lt;&lt;/code&gt;, less than or equal to &lt;code&gt;&amp;lt;=&lt;/code&gt;, greater than &lt;code&gt;&amp;gt;&lt;/code&gt;, greater than or equal to &lt;code&gt;&amp;gt;=&lt;/code&gt;, equal to &lt;code&gt;==&lt;/code&gt;, not equal to &lt;code&gt;~=&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise AND &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise OR &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; OR &lt;code&gt;||&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can learn more about operator precedence in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/operator-precedence.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;branching-in-matlab&quot;&gt;Branching in MATLAB&lt;/h2&gt;

&lt;p&gt;The normal flow of control in procedural programming paradigm is in general, &lt;em&gt;sequential&lt;/em&gt;. So is the flow of control in MATLAB.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/normalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Normal sequential control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/conditionalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conditional control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In MATLAB, you can achieve conditional flow control, using either &lt;strong&gt;if-block&lt;/strong&gt; or &lt;strong&gt;switch-case&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-if-blocks&quot;&gt;MATLAB if-blocks&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = input('Enter a number:');
if isnumeric(a) &amp;amp;&amp;amp; (a &amp;gt;= 0)
    root = sqrt(a);
    disp(['Square root(',num2str(a),') = ', num2str(root)]);
elseif isnumeric(a) &amp;amp;&amp;amp; (a &amp;lt; 0)
    disp(['The input number is negative, there is no square root.']);
else
    disp(['Please enter a real number!']);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a number:13
Square root = 3.6056

Enter a number:-11
The input number is negative, there is no square root

Enter a number:i
Square root = 0.70711+0.70711i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note in the above example, how MATLAB treats complex variables. More information on operators that can be used to construct or combine logical conditions for if-statements can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/logical-operations.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;exercise&quot;&gt;Exercise&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; write a MATLAB script that takes two predefined matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; as input and determines whether they have equal size. If so, then it concatenates the two matrices in a column-wise manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if isequal(size(A),size(B))
   C = [A; B];
else
   disp('A and B are not the same size.')
   C = [];
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a script that checks if it (the script itself) exists!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if exist('myScript.m','file')
    disp('Your file exists! Did you expect otherwise?')
else
    disp('Your file does not exist! Then perhaps you don''t exist either??')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Write a script that takes an input predefined number $x$ and calculates the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation*}
y =
\begin{cases}
    x &amp; \text{for}~~~-1&lt;=x&lt;=1 \\
    x^2 &amp; \text{otherwise} \\
\end{cases}
\end{equation*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = input('input the value of x: ')
if x &amp;gt;= -1 &amp;amp;&amp;amp; x &amp;lt;= 1
    y = x
else
    y = x^2
end
disp(['y(x=',num2str(x),') = ',num2str(y)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;matlab-switch-case&quot;&gt;MATLAB switch-case&lt;/h3&gt;

&lt;p&gt;Sometimes we may have many if statements which all use conditions based on the same variable. It is not incorrect to use if statements in such cases, but it can lead to a large number of consecutive if statements in our code, making it harder to read and more prone to errors. In this case, it is preferable to use a switch statement. The switch statement offers an easy way of writing code where the same variable needs to be checked against a number of different values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case 1
        day_name = 'Monday';
    case 2
        day_name = 'Tuesday';
    case 3
        day_name = 'Wednesday';
    case 4
        day_name = 'Thursday';
    case 5
        day_name = 'Friday';
    case 6
        day_name = 'Saturday';
    case 7
        day_name = 'Sunday';
    otherwise
        day_name = 'Unknown';
end
disp(['The corresponding weekday is ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:4
The corresponding weekday is Thursday.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MATLAB will compare the switch expression (in this case, &lt;code&gt;day&lt;/code&gt;) with each case expression in turn (the numbers 1–7). When a comparison evaluates to &lt;code&gt;true&lt;/code&gt;, MATLAB executes the corresponding statements and then exits the switch statement, i.e. control flow passes to after the &lt;code&gt;end&lt;/code&gt; statement. The &lt;code&gt;otherwise&lt;/code&gt; block is optional and executes only when no comparison evaluates to    &lt;code&gt;true&lt;/code&gt;. Note that the &lt;code&gt;switch&lt;/code&gt; statement is used only for equality tests – we cannot use it for other types of comparison (e.g. &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement may also take a cell array as one of its cases,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case {1,2,3,4,5}
        day_name = 'Weekday';
    case {6,7}
        day_name = 'Weekend';
    otherwise
        day_name = 'Unknown';
end
disp(['The input day number corresponds to ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:6
The input day number corresponds to Weekend.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;non-boolean-conditions-in-if-statements&quot;&gt;Non-boolean conditions in if-statements&lt;/h3&gt;

&lt;p&gt;There is a rather interesting feature of conditions for if-statements in MATLAB (also in Python language), that allows the programmer to use a non-boolean variable or non-boolean value type directly in place of the condition in if-statement. What really happens here is that, MATLAB interpreter converts the non-boolean type to a boolean value, when it occurs in place of an if-statement condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 5.6
    disp('The condition in this if statement is automatically converted from float to boolean')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The condition in this if statement is automatically converted from float to boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.000000000000000000000000000000000000000000000000000000000000000000001
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-323
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value smaller than the computer precision will be set to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 12
    disp('The same rules also hold for integers.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for integers.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
else
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty string is always converted to boolean false, because it is considered an empty logical vector.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if []
else
    disp('An empty vector is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty vector is always converted to boolean false, because it is considered an empty logical vector.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But note that conversion from cell to logical is not possible in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if {}
    disp('An empty cell cannot be converted to boolean value, because MATLAB wants it that way!')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Conversion to logical from cell is not possible. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ['amir']
    disp('A non-empty vector is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty vector is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ' '
    disp('A non-empty string is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty string is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;matlabs-built-in-is-functions&quot;&gt;MATLAB’s built-in &lt;strong&gt;is&lt;/strong&gt; functions&lt;/h3&gt;

&lt;p&gt;MATLAB has a wide range of functions whose names begins with &lt;code&gt;is&lt;/code&gt;, and their output is a logical value type, which can be used in if-blocks. These functions are extremely useful in MATLAB coding, and you will encounter them frequently in your computational life. Here is a rather comprehensive list of them,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's &lt;i&gt;is-functions&lt;/i&gt; and description of their functionality.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isa()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect object of given MATLAB class or Java® class&lt;/td&gt;&lt;/tr&gt;  
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isappdata()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if object has specific application-defined data&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isbetween()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Array elements occurring within date and time interval&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscalendarduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategorical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategory()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Test for categorical array categories&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscell()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscellstr()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array of strings&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ischar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is character array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscolumn()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is column vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscom()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdatetime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is datetime array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdir()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is folder&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdst()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during daylight saving time&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isempty()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is empty array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequaln()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal, treating NaNs as equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isevent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object event&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfield()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array field&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfinite()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect finite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfloat()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is floating-point array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishandle()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect valid graphics object handles&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishold()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if graphics hold state is on&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinf()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect infinite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinteger()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is integer array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinterface()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) interface&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isjava()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Java object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iskeyword()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB keyword&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isletter()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements that are alphabetic letters&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;islogical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is logical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismac()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for Macintosh OS X platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismatrix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is matrix&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismember()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect members of specific set&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismethod()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object method&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismissing()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find table elements with missing values&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnan()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements of array that are not a number (NaN)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnumeric()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is numeric array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isobject()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isordinal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is ordinal categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ispc()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for PC (Windows®) platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect prime elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object property&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprotected()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether categories of categorical array are protected&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isreal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are real numbers&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isrow()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is row vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isscalar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is scalar&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issorted()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if set elements are in sorted order&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isspace()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect space characters in array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issparse()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is sparse array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstrprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if string is of specified category&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstruct()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstudent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if Student Version of MATLAB&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;istable()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is table&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isundefined()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find undefined elements in categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isunix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for UNIX®[a] platform.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvarname()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is valid variable name&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvector()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isweekend()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during weekend&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For more information on each individual function, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/is.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s use manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6-matlab-operators-branching&quot;&gt;Lecture 6: MATLAB - operators, branching, and control statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 09, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Problems - structures, branching and functions in MATLAB]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions"/>
  <id>http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions</id>
  <published>2017-10-09T00:00:00-05:00</published>
  <updated>2017-10-09T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 30, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with structure types in MATLAB as well as branching and function concepts and their usage syntax. Write your MATLAB scripts with the corresponding &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 3 folder of your ICP2017F repository if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function ($\mu\in[-\infty,+\infty]$, $\sigma&amp;gt;0$) are prescribed real numbers. Write a MATLAB script for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine, also by using MATLAB’s builtin function &lt;a href=&quot;https://www.mathworks.com/help/stats/normpdf.html&quot; target=&quot;_blank&quot;&gt;normpdf($x$,$\mu$,$\sigma$)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; As an egg cooks, the protein molecules in the egg first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a MATLAB program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to use MATLAB’s builtin function &lt;code&gt;log()&lt;/code&gt;, and the predefined variable &lt;code&gt;pi&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Converting polar and Cartesian vector representations using functions and structures.&lt;/strong&gt; A vector is a mathematical quantity that has both magnitude and direction. A 2-dimensional vector can be represented as a displacement along $x$ and $y$ axes in rectangular (Cartesian) coordinates or, by a distance $r$ and an angle $\phi$ in polar coordinates,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/3-problems/vector.png&quot; height=&quot;400&quot; width=&quot;400&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conversion rule between the Cartesian and Polar representations of a vector.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The relationships between the Cartesian $(x,y)$ and polar $(r,\phi)$ coordinates are given by the following equations,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    x &amp;= r\cos(\phi) \\
    y &amp;= r\sin(\phi) \\
    r &amp;= \sqrt{x^2 + y^2} \\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt; that takes a structure &lt;code&gt;inputCartesianStruct&lt;/code&gt; as input, that has two components &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Then on output, it returns another structure that has to components &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. Write another function &lt;code&gt;getCart(inputPolarStruct)&lt;/code&gt; that does the inverse of &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt;. Make sure that both functions are robust to wrong input structures by checking whether the input structures have the required fields: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, or &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. You can do so by using MATLAB’s builtin function &lt;code&gt;isfield()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Calculating the size of a directory&lt;/strong&gt; The MATLAB function &lt;code&gt;dir&lt;/code&gt; returns the contents of a specified directory. It returns the result in the form of an structure array with four fields, for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = dir
s = 
123x1 struct array with fields:
    name
    date
    bytes
    isdir
    datenum
&amp;gt;&amp;gt; size(s)
ans =
   123     1
&amp;gt;&amp;gt; fieldnames(s)
ans = 
    'name'
    'date'
    'bytes'
    'isdir'
    'datenum'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where here, the directory contains 123 objects. Write a MATLAB function that takes the path to a directory and outputs the total size of all files in the directory in units of bytes.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n$th number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: -123
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: a
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: amir
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: -12.3
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 0
fib(0) = 0
Please enter a non-negative integer or type stop: 1
fib(1) = 1
Please enter a non-negative integer or type stop: 2
fib(2) = 1
Please enter a non-negative integer or type stop: 3
fib(3) = 2
Please enter a non-negative integer or type stop: 4
fib(4) = 3
Please enter a non-negative integer or type stop: 5
fib(5) = 5
Please enter a non-negative integer or type stop: 6
fib(6) = 8
Please enter a non-negative integer or type stop: 7
fib(7) = 13
Please enter a non-negative integer or type stop: 8
fib(8) = 21
Please enter a non-negative integer or type stop: 9
fib(9) = 34
Please enter a non-negative integer or type stop: 10
fib(10) = 55
Please enter a non-negative integer or type stop: 11
fib(11) = 89
Please enter a non-negative integer or type stop: 12
fib(12) = 144
Please enter a non-negative integer or type stop: 22
fib(22) = 17711
Please enter a non-negative integer or type stop: 32
fib(32) = 2178309
Please enter a non-negative integer or type stop: stop
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;getFib(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a &lt;em&gt;strictly&lt;/em&gt; non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another MATLAB function &lt;code&gt;fib()&lt;/code&gt;&lt;/strong&gt; that asks the user to input a number (which could be potentially anything: a string, a real number, a complex number, or an integer). You can do this using MATLAB’s builtin function &lt;code&gt;input()&lt;/code&gt;. Read the input value as a &lt;code&gt;string&lt;/code&gt; using this MATLAB function. Then check if the user’s input string is equivalent to &lt;strong&gt;‘stop’&lt;/strong&gt; or not. If it is ‘stop’, then the program must return, otherwise, use &lt;code&gt;str2double()&lt;/code&gt; to convert this string to MATLAB numeric type. Then check is the numeric-converted input value is real number (as opposed to complex number) via MATLAB’s function &lt;code&gt;isreal()&lt;/code&gt;. If the value is real, then check if it is a non-negative real number. Also check if it is an &lt;strong&gt;integer&lt;/strong&gt; by comparing the value with its rounded value using MATLAB’s function &lt;code&gt;round()&lt;/code&gt;. Thus is the user-input number is really a non-negative integer, then your code should display the result message as given in the above output (by calling your nested function &lt;code&gt;getFib(n_int)&lt;/code&gt;), and then call this function &lt;code&gt;fib&lt;/code&gt; to ask the user to input another number again, to repeat this procedure. If the user-input number is not a non-negative integer, then your code should display the requested message above, and call the function &lt;code&gt;fib&lt;/code&gt; again to ask the user for another input.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1 \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;getTriangleArea(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;isPrime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prime_number&quot; target=&quot;_blank&quot;&gt;Prime number&lt;/a&gt; or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use a &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using &lt;strong&gt;recursive function&lt;/strong&gt; concept. You can verify the accuracy of your MATLAB script via by checking its output against MATLAB’s builtin function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;Function generators.&lt;/strong&gt; Write a nested function that evaluates a polynomial of the form $y = ax^2+bx+c$. The host function &lt;code&gt;genFunc()&lt;/code&gt; should be able to take varying number of arguments using &lt;code&gt;varargin&lt;/code&gt; with maximum of 3 arguments (&lt;code&gt;a,b,c&lt;/code&gt;) to initialize the coefficients of the polynomial. If there is only one argument, then &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; must be set to zero. If there are two input arguments, then &lt;code&gt;c&lt;/code&gt; is set to zero. If none are given on input, then the returned function should be zero. If more than 3 arguments exist, then the function should display an error and stop. Also, if the input arguments are not real numbers, then the function should return and error and stop.&lt;/p&gt;

&lt;p&gt;On output, the host function should create and return a function handle for the nested function &lt;code&gt;evalFunc()&lt;/code&gt;. The nested function should calculate a value of $y$ for a given value of $x$, using the values of $a$, $b$, and $c$ stored in the host function. This is called a &lt;strong&gt;function generator&lt;/strong&gt;, since the host function generates and outputs another function that can be called and used later on in the program. Once you create your function generator, test it in the following way: Call &lt;code&gt;genFunc(1,2,0)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h1&lt;/code&gt;. Call &lt;code&gt;genFunc(1,2)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h2&lt;/code&gt;. Then these two function handles, should give the same result, given the same input &lt;code&gt;x&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions&quot;&gt;Homework 3: Problems - structures, branching and functions in MATLAB&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 09, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Solutions - Programming history, MATLAB variables]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables"/>
  <id>http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables</id>
  <published>2017-10-04T00:00:00-05:00</published>
  <updated>2017-10-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;2-problems-programming-history-matlab-variables.html&quot; target=&quot;_blank&quot;&gt;Quiz 2: Problems - Programming history, MATLAB variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz2.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily usage.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is accetasble answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly  &lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB were created, respectively?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Initialized a cell array variable &lt;code&gt;C&lt;/code&gt; of size $2\times2$, then fill its elements like the following figure.&lt;br /&gt;
&lt;br /&gt;
    &lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/quiz/2/cellArray.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C = cell(2,2)
&amp;gt;&amp;gt; C{1,1} = [1,3,-7;2,0,6;0,5,1];
&amp;gt;&amp;gt; C{1,2} = 'This is a text string.';
&amp;gt;&amp;gt; C{2,1} = [];
&amp;gt;&amp;gt; C{2,2} = [3+4i,-5;-10i,3-4i];
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C
C = 
[3x3 double]    'This is a text string.'
          []                [2x2 double]
&amp;gt;&amp;gt; C{1,1}
ans =
    1     3    -7
    2     0     6
    0     5     1
&amp;gt;&amp;gt; C{2,2}
ans =
    3.0000 + 4.0000i  -5.0000 + 0.0000i
    0.0000 -10.0000i   3.0000 - 4.0000i
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, if you type &lt;code&gt;C{2}&lt;/code&gt; on the MATLAB command line, what do you get? Why do get this value?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
You will get the value for the cell element $(2,1)$. This is happens, because as we discussed in class, MATLAB is column-wise language.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Does MATLAB follow column-wise data storage, or row-wise? Explain what it means? Why does it follow this storage method? (if you recall, we discussed this in class) &lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
MATLAB stores data in a column-major (columnwise) numbering scheme, which is how Fortran stores matrices. MATLAB uses this convention because it was originally written in Fortran. MATLAB internally stores data elements from the first column first, then data elements from the second column second, and so on, through the last column.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How many bytes is a MATLAB integer of type &lt;code&gt;int64&lt;/code&gt;? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
8 bytes.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;What would happen if you tried to covert a huge integer number that requires MATLAB &lt;code&gt;int64&lt;/code&gt; data type to the MATLAB &lt;code&gt;int32&lt;/code&gt; data type? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The huge number is converted to the maximum number that can be represented by &lt;code&gt;int32&lt;/code&gt; data type.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; intmax('int32')
ans =
    2147483647
&amp;gt;&amp;gt; intmax('int64')
ans =
    9223372036854775807
&amp;gt;&amp;gt; int32(intmax('int64'))
ans =
    2147483647
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This is a language-specific rule. In other programming languages, the number may be converted to infinity, if it is bigger than the maximum number that can be represented by the requested integer type.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables&quot;&gt;Quiz 2: Solutions - Programming history, MATLAB variables&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 04, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Problems - Programming history, MATLAB variables]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables"/>
  <id>http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables</id>
  <published>2017-10-04T00:00:00-05:00</published>
  <updated>2017-10-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your general knowledge of programming history and MATLAB arrays. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily usage.&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is accetasble answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB were created, respectively?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Initialized a cell array variable &lt;code&gt;C&lt;/code&gt; of size $2\times2$, then fill its elements like the following figure.&lt;br /&gt;
&lt;br /&gt;
    &lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/quiz/2/cellArray.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, if you type &lt;code&gt;C{2}&lt;/code&gt; on the MATLAB command line, what do you get? Why do get this value?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Does MATLAB follow column-wise data storage, or row-wise? Explain what it means? Why does it follow this storage method? (if you recall, we discussed this in class) &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How many bytes is a MATLAB integer of type &lt;code&gt;int64&lt;/code&gt;? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;What would happen if you tried to covert a huge integer number that requires MATLAB &lt;code&gt;int64&lt;/code&gt; data type to the MATLAB &lt;code&gt;int32&lt;/code&gt; data type? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables&quot;&gt;Quiz 2: Problems - Programming history, MATLAB variables&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 04, 2017.&lt;/p&gt;</content>
</entry>

</feed>
