<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ICP2017F/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ICP2017F/" />
<updated>2019-06-03T15:21:32-05:00</updated>
<id>http:/ICP2017F/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ICP2017F/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Homework 6: Solutions - MATLAB data analysis and optimization]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/6-solutions-matlab-data-analysis-optimization"/>
  <id>http:/ICP2017F/homework/6-solutions-matlab-data-analysis-optimization</id>
  <published>2017-12-13T00:00:00-06:00</published>
  <updated>2017-12-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-matlab-data-analysis-optimization.html&quot; target=&quot;_blank&quot;&gt;Homework 6: Problems - MATLAB data analysis and optimization&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework6.png&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

---
---

&lt;br&gt; 

--&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Dec 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with image and data analysis and optimization techniques in MATLAB. For this homework, you need to only return two problems of your own choice, out of the three questions. The extra question, if you answer it, will be considered as an extra credit.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Subplots in MATLAB.&lt;/strong&gt; Consider this MATLAB data file &lt;a href=&quot;http:/ICP2017F/homework/6-problems/data3D.mat&quot; target=&quot;_blank&quot;&gt;data3D.mat&lt;/a&gt; which contains a 3-dimensional $41\times 61\times 16$ matrix of the brain of a rat. Write a MATLAB script that  creates and saves a graph of all $X-Y$ information for the 16 slices along the z axis like the following.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/subplots.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Start from this &lt;a href=&quot;http:/ICP2017F/homework/6-problems/hw6prob1.m&quot; target=&quot;_blank&quot;&gt;MATLAB script&lt;/a&gt; that I have written for you. Play with all the options to understand what they do and see their effects on the resulting plot. This script should generate the following figure for you.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/currentPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of this code: &lt;a href=&quot;http:/ICP2017F/homework/6-solutions/makeSubplots.m&quot; target=&quot;_blank&quot;&gt;makeSubplots.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Getting the boundary of objects in images.&lt;/strong&gt;. Consider the same dataset as in the previous problem. Write a MATLAB script that delineates the boundary of the tumor in all of the subplots and generates a figure with the tumor boundary highlighted, like the following graph.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/subplotsWithTumorBoundaries.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of this code: &lt;a href=&quot;http:/ICP2017F/homework/6-solutions/makeSubplots.m&quot; target=&quot;_blank&quot;&gt;makeSubplotsWithTumorBoundary.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Regression: obtaining the most likely mean and standard deviation of a set of Standard Normally Distributed Random Variables.&lt;/strong&gt; Consider this dataset, &lt;a href=&quot;http:/ICP2017F/homework/6-problems/Drand.mat&quot; target=&quot;_blank&quot;&gt;Drand.mat&lt;/a&gt;, which contains a set of random numbers. Let’s make a hypothesis with regards to this dataset: We assume that this dataset is well fit by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian distribution&lt;/a&gt;. But, we don’t know the values of the two parameters (mean and standard deviation) of this Normal (Gaussian) distribution. Therefore, write a MATLAB script that constructs an objective function (similar to what we are planning to do for the mathematical modeling section of the project) and then uses MATLAB’s built-in function, &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely values of the mean and standard deviation of this Gaussian distribution. Here is a best-fit Gaussian distribution using the most likely parameters to the histogram of this dataset.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/histfit.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hints:&lt;/strong&gt; Our hypothesis is that the data in this histogram comes from a standard Normal distribution with a fixed mean ($\mu$) and standard deviation ($\sigma$). For the moment, let’s assume that we know the values of these two parameters. Then if all of these points, $D$, come from the normal distribution with the given $(\mu,\sigma)$, then the probability of all them coming from the normal distribution with these parameter values can be computed as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \prod^{N=100}_{i=1} \frac{1}{2\pi\sigma^2}\exp\bigg( -\bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 \bigg) ~~,&lt;/script&gt;

&lt;p&gt;where the symbol $\pi$ to the left of equality means &lt;strong&gt;probability&lt;/strong&gt; (but note that $\pi$ on the right hand side of the euqation stands for the number $\pi=3.14\ldots$, and $D(i)$ refers to the $i$th point in the sample of points. Since probabilities are always extremely small numbers, it is always good to work with their &lt;code&gt;log()&lt;/code&gt; values instead of their raw values (can you guess why?). Therefore, we could take the log of the above equation to write it as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\log\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \sum^{N=100}_{i=1} - \log\big(2\pi\sigma^2\big) - \bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 ~~,&lt;/script&gt;

&lt;p&gt;Now our goad is to construct this function (let’s name it &lt;code&gt;getLogProbNorm()&lt;/code&gt;) and pass it to MATLAB’s built-in function &lt;code&gt;fminsearch()&lt;/code&gt; in order to find the most likely $(\mu,\sigma)$ that leads to the highest likelihood value (the maximum of the above equation). Here is one last tip: Note that &lt;code&gt;fminsearch()&lt;/code&gt; minimizes functions, but we want to maximize &lt;code&gt;getLogProbNorm()&lt;/code&gt;, instead of minimizing it. What change could you make to this function to make it work with &lt;code&gt;fminsearch()&lt;/code&gt;? Name your main script &lt;code&gt;findBestFitParameters.m&lt;/code&gt;. Now when you run your script it should call &lt;code&gt;fminsearch()&lt;/code&gt; and then output the best-fit parameters like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; findBestFitParameters
mu: -0.082001 , sigma: 1.0043
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Start your parameter search via &lt;code&gt;fminsearch()&lt;/code&gt; with the following values: $[\mu,\sigma] = [1,10]$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of this code: &lt;a href=&quot;http:/ICP2017F/homework/6-solutions/findBestFitParameters.m&quot; target=&quot;_blank&quot;&gt;findBestFitParameters.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/6-solutions-matlab-data-analysis-optimization&quot;&gt;Homework 6: Solutions - MATLAB data analysis and optimization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on December 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Solutions - MATLAB plotting and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/6-solutions-matlab-plotting-monte-carlo-methods"/>
  <id>http:/ICP2017F/quiz/6-solutions-matlab-plotting-monte-carlo-methods</id>
  <published>2017-12-11T00:00:00-06:00</published>
  <updated>2017-12-11T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;6-problems-matlab-plotting-monte-carlo-methods.html&quot; target=&quot;_blank&quot;&gt;Quiz 6: Problems - MATLAB plotting and Monte Carlo methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Since quiz 6 is a protected test, the solutions to the problems will be only discussed in class.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/6-solutions-matlab-plotting-monte-carlo-methods&quot;&gt;Quiz 6: Solutions - MATLAB plotting and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on December 11, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 6: Problems - MATLAB plotting and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/6-problems-matlab-plotting-monte-carlo-methods"/>
  <id>http:/ICP2017F/quiz/6-problems-matlab-plotting-monte-carlo-methods</id>
  <published>2017-12-11T00:00:00-06:00</published>
  <updated>2017-12-11T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about methods of plotting and Monte Carlo methods using MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type=&quot;text/javascript&quot;,c.async=!0,c.id=n,c.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd0AsVRa147JdOaaMwPvLKMOwlOY9Y220uve_2FabyCPgY5.js&quot;].join(&quot;&quot;),a.parentNode.insertBefore(c,a))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/6-problems-matlab-plotting-monte-carlo-methods&quot;&gt;Quiz 6: Problems - MATLAB plotting and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on December 11, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 5: Solutions - MATLAB IO and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/5-solutions-matlab-IO-plotting"/>
  <id>http:/ICP2017F/quiz/5-solutions-matlab-IO-plotting</id>
  <published>2017-12-01T00:00:00-06:00</published>
  <updated>2017-12-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;5-problems-matlab-IO-plotting.html&quot; target=&quot;_blank&quot;&gt;Quiz 5: Problems - MATLAB IO and plotting&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz4.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

--&gt;

&lt;p&gt;This quiz is about methods of IO and plotting in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a MATLAB script, named &lt;code&gt;plotGrowthRate.m&lt;/code&gt;, that reads this &lt;a href=&quot;http:/ICP2017F/quiz/5-problems/chain.txt&quot; target=&quot;_blank&quot;&gt;chain.txt&lt;/a&gt; file, and then makes a plot of the fourth column of data (GrowthRate) in this file, that looks like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/5-problems/GrowthRate.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use whatever MATLAB IO method that you prefer, in order to read the data. Save the plot with the name &lt;code&gt;GrowthRate.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is a possible implementation: &lt;a href=&quot;http:/ICP2017F/quiz/5-solutions/plotGrowthRate.m&quot; target=&quot;_blank&quot;&gt;plotGrowthRate.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script named, &lt;code&gt;robustWebRead.m&lt;/code&gt; that takes an input string containing a web address, then checks if the web address exists or not, if it exists, it returns the content of the web page as the output of the function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = robustWebRead('https://apod.nasa.gov/apod/image/1711/M33Nagy_tamed.jpg');
Reading data from the web address...
Done.
&amp;gt;&amp;gt; imshow(d)
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; robustWebRead('Chicken or egg? which came first? This is the question')
Reading data from the web address...
Warning: The requested web address does not exist! Gracefully exiting... 
&amp;gt; In robustWebRead (line 7) 
ans =
     []
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
otherwise prints a message like the following and exits the function without breaking the MATLAB (e.g., without any abrupt stop).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is a possible implementation: &lt;a href=&quot;http:/ICP2017F/quiz/5-solutions/robustWebRead.m&quot; target=&quot;_blank&quot;&gt;robustWebRead.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; What is the difference between &lt;code&gt;gca&lt;/code&gt; and &lt;code&gt;gcf&lt;/code&gt; keywords in MATLAB? (what does each one do?)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The term &lt;code&gt;gca&lt;/code&gt; is a MATLAB keyword that refers to the current active plot in the current active figure. By contrast, &lt;code&gt;gcf&lt;/code&gt; refers to the current active figure handle.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/5-solutions-matlab-IO-plotting&quot;&gt;Quiz 5: Solutions - MATLAB IO and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on December 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 5: Problems - MATLAB IO and plotting]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/5-problems-matlab-IO-plotting"/>
  <id>http:/ICP2017F/quiz/5-problems-matlab-IO-plotting</id>
  <published>2017-12-01T00:00:00-06:00</published>
  <updated>2017-12-01T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about methods of IO and plotting in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a MATLAB script, named &lt;code&gt;plotGrowthRate.m&lt;/code&gt;, that reads this &lt;a href=&quot;http:/ICP2017F/quiz/5-problems/chain.txt&quot; target=&quot;_blank&quot;&gt;chain.txt&lt;/a&gt; file, and then makes a plot of the fourth column of data (GrowthRate) in this file, that looks like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/5-problems/GrowthRate.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Use whatever MATLAB IO method that you prefer, in order to read the data. Save the plot with the name &lt;code&gt;GrowthRate.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script named, &lt;code&gt;robustWebRead.m&lt;/code&gt; that takes an input string containing a web address, then checks if the web address exists or not, if it exists, it returns the content of the web page as the output of the function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = robustWebRead('https://apod.nasa.gov/apod/image/1711/M33Nagy_tamed.jpg');
Reading data from the web address...
Done.
&amp;gt;&amp;gt; imshow(d)
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; robustWebRead('Chicken or egg? which came first? This is the question')
Reading data from the web address...
Warning: The requested web address does not exist! Gracefully exiting... 
&amp;gt; In robustWebRead (line 7) 
ans =
     []
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
otherwise prints a message like the following and exits the function without breaking the MATLAB (e.g., without any abrupt stop).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; What is the difference between &lt;code&gt;gca&lt;/code&gt; and &lt;code&gt;gcf&lt;/code&gt; keywords in MATLAB? (what does each one do?)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/5-problems-matlab-IO-plotting&quot;&gt;Quiz 5: Problems - MATLAB IO and plotting&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on December 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 6: Problems - MATLAB data analysis and optimization]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/6-problems-matlab-data-analysis-optimization"/>
  <id>http:/ICP2017F/homework/6-problems-matlab-data-analysis-optimization</id>
  <published>2017-11-27T00:00:00-06:00</published>
  <updated>2017-11-27T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Dec 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with image and data analysis and optimization techniques in MATLAB. For this homework, you need to only return two problems of your own choice, out of the three questions. The extra question, if you answer it, will be considered as an extra credit.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Subplots in MATLAB.&lt;/strong&gt; Consider this MATLAB data file &lt;a href=&quot;http:/ICP2017F/homework/6-problems/data3D.mat&quot; target=&quot;_blank&quot;&gt;data3D.mat&lt;/a&gt; which contains a 3-dimensional $41\times 61\times 16$ matrix of the brain of a rat. Write a MATLAB script that  creates and saves a graph of all $X-Y$ information for the 16 slices along the z axis like the following.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/subplots.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; Start from this &lt;a href=&quot;http:/ICP2017F/homework/6-problems/hw6prob1.m&quot; target=&quot;_blank&quot;&gt;MATLAB script&lt;/a&gt; that I have written for you. Play with all the options to understand what they do and see their effects on the resulting plot. This script should generate the following figure for you.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/currentPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Getting the boundary of objects in images.&lt;/strong&gt;. Consider the same dataset as in the previous problem. Write a MATLAB script that delineates the boundary of the tumor in all of the subplots and generates a figure with the tumor boundary highlighted, like the following graph.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/subplotsWithTumorBoundaries.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Regression: obtaining the most likely mean and standard deviation of a set of Standard Normally Distributed Random Variables.&lt;/strong&gt; Consider this dataset, &lt;a href=&quot;http:/ICP2017F/homework/6-problems/Drand.mat&quot; target=&quot;_blank&quot;&gt;Drand.mat&lt;/a&gt;, which contains a set of random numbers. Let’s make a hypothesis with regards to this dataset: We assume that this dataset is well fit by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian distribution&lt;/a&gt;. But, we don’t know the values of the two parameters (mean and standard deviation) of this Normal (Gaussian) distribution. Therefore, write a MATLAB script that constructs an objective function (similar to what we are planning to do for the mathematical modeling section of the project) and then uses MATLAB’s built-in function, &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely values of the mean and standard deviation of this Gaussian distribution. Here is a best-fit Gaussian distribution using the most likely parameters to the histogram of this dataset.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/6-problems/histfit.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hints:&lt;/strong&gt; Our hypothesis is that the data in this histogram comes from a standard Normal distribution with a fixed mean ($\mu$) and standard deviation ($\sigma$). For the moment, let’s assume that we know the values of these two parameters. Then if all of these points, $D$, come from the normal distribution with the given $(\mu,\sigma)$, then the probability of all them coming from the normal distribution with these parameter values can be computed as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \prod^{N=100}_{i=1} \frac{1}{2\pi\sigma^2}\exp\bigg( -\bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 \bigg) ~~,&lt;/script&gt;

&lt;p&gt;where the symbol $\pi$ to the left of equality means &lt;strong&gt;probability&lt;/strong&gt; (but note that $\pi$ on the right hand side of the euqation stands for the number $\pi=3.14\ldots$, and $\boldsymbol D(i)$ refers to the $i$th point in the sample of points. Since probabilities are always extremely small numbers, it is always good to work with their &lt;code&gt;log()&lt;/code&gt; values instead of their raw values (can you guess why?). Therefore, we could take the log of the above equation to write it as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\log\pi\big(\boldsymbol D\big|\mu,\sigma\big) = \sum^{N=100}_{i=1} - \log\big(2\pi\sigma^2\big) - \bigg[ \frac{\boldsymbol D(i)-\mu}{\sqrt{2}\sigma} \bigg]^2 ~~,&lt;/script&gt;

&lt;p&gt;Now our goad is to construct this function (let’s name it &lt;code&gt;getLogProbNorm()&lt;/code&gt;) and pass it to MATLAB’s built-in function &lt;code&gt;fminsearch()&lt;/code&gt; in order to find the most likely $(\mu,\sigma)$ that leads to the highest likelihood value (the maximum of the above equation). Here is one last tip: Note that &lt;code&gt;fminsearch()&lt;/code&gt; minimizes functions, but we want to maximize &lt;code&gt;getLogProbNorm()&lt;/code&gt;, instead of minimizing it. What change could you make to this function to make it work with &lt;code&gt;fminsearch()&lt;/code&gt;? Name your main script &lt;code&gt;findBestFitParameters.m&lt;/code&gt;. Now when you run your script it should call &lt;code&gt;fminsearch()&lt;/code&gt; and then output the best-fit parameters like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; findBestFitParameters
mu: -0.082001 , sigma: 1.0043
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Start your parameter search via &lt;code&gt;fminsearch()&lt;/code&gt; with the following values: $[\mu,\sigma] = [1,10]$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/6-problems-matlab-data-analysis-optimization&quot;&gt;Homework 6: Problems - MATLAB data analysis and optimization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Solutions - MATLAB IO, plotting, and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/5-solutions-matlab-IO-plotting-monte-carlo"/>
  <id>http:/ICP2017F/homework/5-solutions-matlab-IO-plotting-monte-carlo</id>
  <published>2017-11-27T00:00:00-06:00</published>
  <updated>2017-11-27T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;5-problems-matlab-IO-plotting-monte-carlo.html&quot; target=&quot;_blank&quot;&gt;Homework 5: Problems - MATLAB IO, plotting, and Monte Carlo methods&lt;/a&gt;.&lt;/p&gt;

&lt;!--

The following figure illustrates the grade distribution for this homework.  

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework5.png&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

---
---

&lt;br&gt; 

--&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Friday Dec 1, 2017 11:59 PM&lt;/strong&gt;. This homework aims at giving you some experience with data input/output methods in MATLAB as well as plotting graphs and Monte Carlo techniques.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Creating random 3-member student groups for the semester project&lt;/strong&gt; Consider this &lt;a href=&quot;http:/ICP2017F/homework/5-problems/students.csv&quot; target=&quot;_blank&quot;&gt;csv data file&lt;/a&gt; which contains the names of all of the students in this course. Our goal here is to write a MATLAB script that reads all the names in this file, and then creates random triples of names to form student groups who would work collaboratively on the final semester project. To do so you will need MATLAB’s built-in function &lt;code&gt;randperm()&lt;/code&gt; which creates random permutations of student IDs in the range 1-99. Once you create a random permutation, you will have to write a MATLAB for-loop which takes triples of integers from this vector of random permutations and puts the names corresponding to these IDs together in a cell array. Finally, this cell array of 33-by-3 elements could be written to an output Microsoft xlsx file, using MATLAB’s &lt;code&gt;xlswrite()&lt;/code&gt; function. On output your script should yield an excel file like &lt;a href=&quot;http:/ICP2017F/homework/5-problems/nameTriples.xlsx&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;. To get the exact same order and triple of names, you will have to use &lt;code&gt;rng(131313)&lt;/code&gt; at the beginning of your script in order to initialize the seed of MATLAB random number generator to 131313 so that the table can be regenerated every time you run your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of this code: &lt;a href=&quot;http:/ICP2017F/homework/5-solutions/pickStudentTriples.m&quot; target=&quot;_blank&quot;&gt;pickStudentTriples.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Reading scientific data from web using MATLAB&lt;/strong&gt;. Consider the following webpage address &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&lt;/a&gt;. This is an data table (in HTML language) containing data from &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA’s Swift satellite&lt;/a&gt;. Each row in this table represents information about a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift has made in the past years. Now, corresponding to each of event IDs, there (might) exist files that contain some attributes of these events which we wish to plot and understand their behavior. For example, for the first event in this table, contains a data file which is hidden in a directory on this website &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. For each event in this table, there is likely one such table hidden in this web directory.&lt;/p&gt;

&lt;p&gt;Our goal in this question is to fetch all these files from the website, using MATLAB and save them locally in our own computer. Then read their contents one by one and plot the two columns of data in all of them together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a MATLAB script named &lt;code&gt;fetchDataFromWeb.m&lt;/code&gt; that uses this web address: &lt;code&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/triggers.txt&lt;/code&gt; to read a list of all GRB events and then writes the entire table of &lt;code&gt;triggers.txt&lt;/code&gt; to a local file with the same name on your device. For this purpose, you will need MATLAB built-in function &lt;code&gt;webread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Now, add to your script another set of commands that uses the event IDs stored in this file, to generate the corresponding web addresses like: &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&lt;/a&gt;. Then it uses the generated web address to read the content of the page and store it in a local file on your device with the same name as it is stored on the webpage (for example, for the given webpage, the filename would be &lt;code&gt;GRB00745966_ep_flu.txt&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; Some of the web addresses for the given event IDs do not exist. Therefore, you should MATLAB’s try-catch construct to avoid runtime errors in your MATLAB code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now write another MATLAB script named &lt;code&gt;plotDatafromFile.m&lt;/code&gt;, that reads all of these files in your directory, one by one, using MATLAB &lt;code&gt;readtable()&lt;/code&gt; function, and plots the content of all of them together, on a single scatter plot (using MATLAB function &lt;code&gt;scatter()&lt;/code&gt;) like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/SwiftDataPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; again that some the data files stored on your computer are empty and some others have useless data if data in the second column of the file is larger than 0. So you will have to write your script in such a way that it checks for non-emptiness of the file (that is, the file does indeed contain some numerical data) as well as the negativity of the values in the column of data in each file. For example, you could check for the negativity of the values using MATLAB function &lt;code&gt;all(data[:,1]&amp;lt;0.0)&lt;/code&gt; assuming that data is the variable containing the information read from the file.&lt;/p&gt;

&lt;p&gt;Once you have done all these checks, you have to do one final manipulation of data, that is, the data in these files on the second column is actually the log of data, so have to get the &lt;code&gt;exp()&lt;/code&gt; value to plot it (because the plot in the figure above is a log-log plot and we want to exactly regenerate it). To do so you could simply use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;data[:,2] = exp(data[:,2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
as soon as you read from the file, and then finally you make a scatter plot of all data using MATLAB scatter plot. At the end, you will have to set a title for your plot as well and label the axes of the plot, and save your plot using MATLAB’s built-in function &lt;code&gt;saveas()&lt;/code&gt;. In order to find out how many files you have plotted in the figure, you will have to define a variable counter which increases by one unit, each time a new non-empty negative-second-column data file is read and plotted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the next three lectures in order to answer this question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of the two MATLAB scripts: &lt;a href=&quot;http:/ICP2017F/homework/5-solutions/fetchDataFromWeb.m&quot; target=&quot;_blank&quot;&gt;fetchDataFromWeb.m&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/5-solutions/plotDatafromFile.m&quot; target=&quot;_blank&quot;&gt;plotDatafromFile.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Simulating a fun Monte Carlo game.&lt;/strong&gt; Suppose you’re on a game show, and you’re given the choice of three doors:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_1.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Behind one door is a car; behind the two others, goats. You pick a door, say No. 1, and the host of the show opens another door, say No. 3, which has a goat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_open_door.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;He then says to you, “Do you want to pick door No. 2?”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What would you do?&lt;/strong&gt; Is it to your advantage to switch your choice from door 1 to door 2? Is it to your advantage, &lt;strong&gt;in the long run, for a large number of game tries&lt;/strong&gt;, to switch to the other door?&lt;/p&gt;

&lt;p&gt;Now whatever your answer is, I want you to check/prove your answer by a Monte Carlo simulation of this problem. Make a plot of your simulation for &lt;code&gt;nExperiments=100000&lt;/code&gt; repeat of this game, that shows, in the long run, on average, what is the probability of winning this game if you switch your choice, and what is the probability of winning, if you do not switch to the other door.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the lectures this week in order to get help for this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An example code can be downloaded from &lt;a href=&quot;http:/ICP2017F/homework/5-solutions/monteGame.py&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Here is the code’s output figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-solutions/MontyGameResult.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
As you see in the figure, although you may initially win by not switching your choice, but in the long run, on average, you will lose, if you don’t switch your choice.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Monte Carlo approximation of the number $\pi$&lt;/strong&gt;. Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square of unit side, with its diagonal opposite corners extending from the coordinates origin $(0,0)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[0,1]$.&lt;/p&gt;

&lt;p&gt;Now the generated random point $P$ has the coordinate $(x,y)$, so we can calculate its distance from the coordinate origin. Now suppose we also draw a quarter-circle inside of this square whose radius is unit and is centered at the origin $(0,0)$. The ratio of the area of this quarter-circle, $S_C$ to the area of the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{S_C}{S_S} = \frac{\frac{1}{4}\pi r^2}{r^2} = \frac{1}{4}\pi&lt;/script&gt;

&lt;p&gt;This is because the area of the square of unit sides, is just 1. Therefore, if we can somehow measure the area of the quarter $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi = 4S_C&lt;/script&gt;

&lt;p&gt;In order to obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this quarter-circle. This fraction is related to the area of the circle and square by the following equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}&lt;/script&gt;

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi \approx 4\frac{n_C}{n_{\rm total}}&lt;/script&gt;

&lt;p&gt;Now, write a MATLAB script, that takes in the number of points to be simulated, and then calculates an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points simulated, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-solutions/approximatePI.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an example MATLAB code that estimates $\pi$: &lt;a href=&quot;http:/ICP2017F/homework/5-solutions/estimatePi.m&quot; target=&quot;_blank&quot;&gt;estimatePi.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/5-solutions-matlab-IO-plotting-monte-carlo&quot;&gt;Homework 5: Solutions - MATLAB IO, plotting, and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 12: MATLAB - plotting and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo"/>
  <id>http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo</id>
  <published>2017-11-17T00:00:00-06:00</published>
  <updated>2017-11-17T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses some of the most important topics in MATLAB plotting, as well as random numbers and Monte Carlo methods in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as a reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/je1GEkOkEAY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/XZ5U5pZv-Wk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Akbr8K0bL1k&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/lan-3NsCL7Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/rAAjo7jt0po&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;curve-plotting-in-matlab&quot;&gt;Curve plotting in MATLAB&lt;/h2&gt;

&lt;p&gt;One of the most useful methods of outputting the results of your research and MATLAB projects is plotting. MATLAB is truly the unique best language for plotting data, and in my personal view, no other language comes even close to it (except perhaps, the R programming language which is specifically designed for data analysis and plotting). Here in this lecture, we will only review some of the most important and most useful plotting capabilities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;plotting-simple-2d-data&quot;&gt;Plotting simple 2D data&lt;/h3&gt;

&lt;p&gt;One of the most widely used MATLAB plotting functions is &lt;code&gt;plot()&lt;/code&gt;. With this function, plotting x-y data is as simple as it can be. All you need to have is a dataset consisting of X and Y vectors,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; X = 0:0.1:10;
&amp;gt;&amp;gt; plot(X,sin(X));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will open the following MATLAB figure page for you in the MATLAB environment,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sin.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You could also save this figure in almost any format you wish using &lt;code&gt;save()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; saveas(gcf,'sin.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, &lt;code&gt;gcf&lt;/code&gt; refers tothe current figure handle in MATLAB environment. If you wish to add new data to this plot, you could use &lt;code&gt;hold on;&lt;/code&gt; command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X));
&amp;gt;&amp;gt; saveas(gcf,'sinCos.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will save the following figure for you, on your local device,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCos.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;annotating-and-decorating-your-matlab-plots&quot;&gt;Annotating and decorating your MATLAB plots&lt;/h3&gt;

&lt;p&gt;Things you can do with MATLAB plotting functions is virtually endless, and there is no way we could cover all of them here in this course. Nevertheless, here are a few useful commands that help you decorate your plots. For example you could add a plot title as well as X-axis and Y-axis labels to your plots by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Also we could add legends to the plot, explaining what each line represents,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the &lt;code&gt;fontsize&lt;/code&gt; keyword is not necessary. You could simply omit it and MATLAB’s default font size will be used instead.&lt;/p&gt;

&lt;p&gt;You could also change the line-width of the borders of the plot, for example, by,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, &lt;code&gt;gca&lt;/code&gt; is a MATLAB keyword that refers to the current active plot in the current active figure. If you wanted to thicken the curve lines themselves, you could simple add the &lt;code&gt;'linewidth'&lt;/code&gt; keyword when calling &lt;code&gt;plot()&lt;/code&gt;, along with the desired line width value. You could also determine the line color using &lt;code&gt;color&lt;/code&gt; keyword followed by the desired color,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hold off; % this closes access to the old figure
&amp;gt;&amp;gt; figure() % this creates a new figure handle
&amp;gt;&amp;gt; plot(X,sin(X),'linewidth',3, 'color', 'blue');
&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X),'linewidth',3, 'color', 'red');
&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&amp;gt;&amp;gt; saveas(gcf,'sinCosDecorated.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will generate the following figure and save it to your local hard drive,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCosDecorated.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can also plot the data using different line/ point styles. For example, to plot the same data using points instead of lines, all you need to do, is to add the &lt;code&gt;'.'&lt;/code&gt; string to your &lt;code&gt;plot()&lt;/code&gt; functions, indicating that you want a scatter plot, instead of line plot,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; figure() % this creates a new figure handle
&amp;gt;&amp;gt; plot(X,sin(X), '.', 'color', 'blue', 'markersize', 20);
&amp;gt;&amp;gt; hold on;
&amp;gt;&amp;gt; plot(X,cos(X), '.', 'color', 'red', 'markersize', 20);
&amp;gt;&amp;gt; legend( { 'Sin(X)' , 'Cos(X)' } , 'fontsize' , 13 , 'location' , 'southwest' );
&amp;gt;&amp;gt; title('A simple plot of Sin(x) and Cos(X)', 'fontsize', 12)
&amp;gt;&amp;gt; xlabel('X value', 'fontsize', 13);
&amp;gt;&amp;gt; ylabel('Y value', 'fontsize', 13);
&amp;gt;&amp;gt; set( gca , 'linewidth' , 3 );
&amp;gt;&amp;gt; saveas(gcf,'sinCosDecoratedScatter.png')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which will produce and save the following plot,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/sinCosDecoratedScatter.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To learn more about fantastic things you can do with MALTAB plotting functions, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/learn_matlab/basic-plotting-functions.html&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;other-more-complex-plotting-functions-in-matlab&quot;&gt;Other more complex plotting functions in MATLAB&lt;/h3&gt;

&lt;p&gt;MATLAB, as said above, has a tremendous set of plotting functions, which make it an ideally suited programming language for scientific research. We will learn how to use some of these functions in homework 5. &lt;a href=&quot;https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html&quot; target=&quot;_blank&quot;&gt;Here on this page&lt;/a&gt;, you can find a long list of MATLAB plotting functions and types of plots that you can draw using MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;closing-figures-and-plots-in-matlab&quot;&gt;Closing figures and plots in MATLAB&lt;/h3&gt;

&lt;p&gt;for closing the current active figure in MATLAB, you could simply use &lt;code&gt;close(gcf)&lt;/code&gt;. Here, &lt;code&gt;gcf&lt;/code&gt; refers to the current active figure handle. To close all open figures, simply type &lt;code&gt;close all;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;random-numbers-in-matlab&quot;&gt;Random numbers in MATLAB&lt;/h2&gt;

&lt;p&gt;One of the most important topics in today’s science and computer simulation is random number generation and Monte Carlo simulation methods. In the simplest scenario for your research, you may need to generate a sequence of uniformly distributed random numbers in MATLAB. MATLAB has a large set of built-in functions to handle such random number generation problems. All of these functions are collectively named the &lt;strong&gt;statistics and machine learning toolbox&lt;/strong&gt; in MATLAB.&lt;/p&gt;

&lt;p&gt;MATLAB has a long list of random number generators. For example, you can use &lt;code&gt;rand()&lt;/code&gt; to create a random number in the interval (0,1),&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = rand&lt;/code&gt; returns a single uniformly distributed random number in the interval (0,1).&lt;br /&gt;
– &lt;code&gt;X = rand(n)&lt;/code&gt; returns an n-by-n matrix of random numbers.&lt;br /&gt;
– &lt;code&gt;X = rand(n,m)&lt;/code&gt; returns an n-by-m matrix of random numbers.&lt;/p&gt;

&lt;p&gt;For example, suppose you generated 10000 uniform random numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; RandomValues = rand(10000,1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You could test whether the generated random numbers are truly uniformly distributed or not by plotting their histogram,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; histogram(RandomValues)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which will plot the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/unifrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To generate random integer numbers in a given range, you can use &lt;code&gt;randi()&lt;/code&gt; function,&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = randi(imax)&lt;/code&gt; returns a pseudorandom scalar integer between 1 and imax.&lt;br /&gt;
– &lt;code&gt;X = randi(imax,n)&lt;/code&gt; returns an n-by-n matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [1,imax].&lt;br /&gt;
– &lt;code&gt;X = randi(imax,n,m)&lt;/code&gt; returns an n-by-m matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [1,imax].&lt;br /&gt;
– &lt;code&gt;X = randi([imin,imax],n,m)&lt;/code&gt; an n-by-m matrix of pseudorandom integers drawn from the discrete uniform distribution on the interval [imin,imax].&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; randi([10 23], 3,2)
ans =
    20    16
    13    17
    18    11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that so far, we have only generated uniformly distributed float/integer random numbers. We could however, generate random numbers according to any distribution we wish, that is also supported by MATLAB. For example, a very popular distribution choice, is random number from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Normal (Gaussian) distribution&lt;/a&gt;. To get normally distributed random numbers, you can use MATLAB function &lt;code&gt;randn()&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;X = randn&lt;/code&gt; returns a random scalar drawn from the standard normal distribution (mean=0,sigma=1).&lt;br /&gt;
– &lt;code&gt;X = randn(n)&lt;/code&gt; returns an n-by-n matrix of standard-normally distributed random numbers.&lt;br /&gt;
– &lt;code&gt;X = randn(n,m)&lt;/code&gt; returns an n-by-m matrix of standard-normally distributed random numbers.&lt;/p&gt;

&lt;p&gt;Note that this function generated only &lt;strong&gt;standard&lt;/strong&gt;-normally distributed random values. Therefore, a histogram of 10000 of such values produced by &lt;code&gt;randn()&lt;/code&gt; would look something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SNormalValues = randn(10000,1);
&amp;gt;&amp;gt; histogram(SNormalValues);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/snormrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To get normally distributed random numbers with mean and standard deviation other than the standard normal distribution ($\mu=0,\sigma=1$), you will have to use another MATLAB builtin function &lt;code&gt;normrnd()&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;– R = normrnd(mu,sigma) generates random numbers from the normal distribution with mean parameter mu and standard deviation parameter sigma. mu and sigma can be vectors, matrices, or multidimensional arrays that have the same size, which is also the size of R. A scalar input for mu or sigma is expanded to a constant array with the same dimensions as the other input.&lt;br /&gt;
– R = normrnd(mu,sigma,m,n,…) or R = normrnd(mu,sigma,[m,n,…]) generates an m-by-n-by-… array. The mu, sigma parameters can each be scalars or arrays of the same size as R.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;NormalValues = normrnd(100, 10, 10000, 1);
&amp;gt;&amp;gt; histogram(NormalValues)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/12/normrnd.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-deterministic-aspect-of-randomness-in-matlab&quot;&gt;The deterministic aspect of randomness in MATLAB&lt;/h3&gt;

&lt;p&gt;There is a truth about random numbers and random number generators and algorithms, not only in MATLAB, but in all programming languages, and that is, true random numbers do not exist in the world of programming!&lt;/p&gt;

&lt;p&gt;What we call a sequence of random numbers, is simply a sequence of numbers that we, the user, to the best of our knowledge, don’t know how it was generated, and therefore, the sequence looks random to us, but not the to the developer of the algorithm!. To prove this, type the following code in a MATLAB session,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng(135);
&amp;gt;&amp;gt; rand()
ans =
    0.8844
&amp;gt;&amp;gt; rand()
ans =
    0.0771
&amp;gt;&amp;gt; rand()
ans =
    0.5492
&amp;gt;&amp;gt; rand()
ans =
    0.8296
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here, the function &lt;code&gt;rng()&lt;/code&gt; controls the random number generation algorithm using the input positive integer number. The truth is that every algorithm for random number generation is deterministic and starts from an input integer number, called the &lt;strong&gt;seed of random number generator&lt;/strong&gt;, to construct the sequence of random numbers. This means, that if we set the random number seed to a fixed value before we call the random number generator every time, then we will always get the same fixed random value (in fact, it is not random anymore!),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&amp;gt;&amp;gt; rng(135);
rand()
ans =
    0.6613
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, every time you restart MATLAB, the random number generator seed is set back to the default value, nor matter what you set it to in the last time. This means that every time you open MATLAB, type &lt;code&gt;rand()&lt;/code&gt;, you will get the exact same random number as in the last time you opened MATLAB. To avoid this problem, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; rng('shuffle')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which seeds the random number generator based on the current time in the CPU. Thus, rand, randi, and randn will produce a different sequence of numbers after each time you call rng(‘shuffle’).&lt;/p&gt;

&lt;p&gt;Sometimes however, this is not the desired behavior. For example, you want the results of your code to be reproducible. In those cases, it is actually good to initialize the seed of the random number generator in MATLAB to some pre-specified number, so that every time you run your code, you get the exact same result as before. To learn more about the seed of random number generators in MATLAB, visit &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/rng.html?searchHighlight=rng&amp;amp;s_tid=doc_srchtitle&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-random-permutation-of-numbers&quot;&gt;Creating random permutation of numbers&lt;/h3&gt;

&lt;p&gt;There is a useful MATLAB function called &lt;code&gt;randperm()&lt;/code&gt; that generates a &lt;a href=&quot;https://en.wikipedia.org/wiki/Random_permutation&quot; target=&quot;_blank&quot;&gt;random permutation&lt;/a&gt; of numbers for the user,&lt;/p&gt;

&lt;p&gt;– p = randperm(n) returns a row vector containing a random permutation of the integers from 1 to n inclusive.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to get a sequence of random numbers within the range from 1 to a given maximum integer $n$, say $n=10$, in an arbitrary order, we could use this function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; randperm(10)
ans =
     8     5     2     1    10     6     4     3     9     7
&amp;gt;&amp;gt; randperm(10)
ans =
     4     8     1     3    10     2     5     7     9     6
&amp;gt;&amp;gt; randperm(10)
ans =
     6     1     2     4     5     8     7     3    10     9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that every time you call the function, you would get a new random permutation of the requested sequence of numbers.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/12-matlab-plotting-monte-carlo&quot;&gt;Lecture 12: MATLAB - plotting and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 17, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Solutions - MATLAB loops]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/4-solutions-matlab-loops"/>
  <id>http:/ICP2017F/quiz/4-solutions-matlab-loops</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;4-problems-matlab-loops.html&quot; target=&quot;_blank&quot;&gt;Quiz 4: Problems - MATLAB loops&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz4.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This quiz is about for loops, while loops and vectorization in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a function that takes an input integer, and computes its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n!=n\times (n-1) \times (n-2) \cdots \times 2 \times 1 ~,&lt;/script&gt;

&lt;p&gt;in the following ways:&lt;/p&gt;

&lt;p&gt;(a) Write this function using while-loop. Name it &lt;code&gt;getFacWhile(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(b) Write this function using for-loop. Name it &lt;code&gt;getFacFor(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(c) Write this function using the vectorization concept. Name it &lt;code&gt;getFacVec(n)&lt;/code&gt;. (Hint: for the vectorized version of this function, you will have to first create a vector of integers from 1 to n, using MATLAB vector construction notation (This is very simple and easy if you recall from lecture notes). Then use MATLAB’s built-in &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/prod.html&quot;&gt;prod()&lt;/a&gt; function to accomplish the task of computing $n!$ as given by the above equation.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here are the functions: &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacWhile.m&quot; target=&quot;_blank&quot;&gt;getFacWhile.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacFor.m&quot; target=&quot;_blank&quot;&gt;getFacFor.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacVec.m&quot; target=&quot;_blank&quot;&gt;getFacVec.m&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script, &lt;code&gt;timeFacFuncs.m&lt;/code&gt; that times the performance of the three functions you wrote in the previous problem, so that when you run this script, you get an output like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFacFuncs
average runtime for getFacWhile(1700000): 0.0054129 seconds
average runtime for getFacFor(1700000): 0.0080964 seconds
average runtime for getFacVec(1700000): 0.005283 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the script &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/timeFacFuncs.m&quot; target=&quot;_blank&quot;&gt;timeFacFuncs.m&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Extra Credit&lt;/strong&gt; Modify your answer to problem 1.(c) above in such a way that instead of using &lt;code&gt;prod()&lt;/code&gt;, you get the factorial using &lt;code&gt;sum()&lt;/code&gt; and some other elementary mathematical MATLAB functions. (Hint: for this problem, you will need to transform the numbers involved in calculations using some appropriate MATLAB mathematical function and revert the result at the end.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
You can do so, using &lt;code&gt;log()&lt;/code&gt; transformation of the numbers in factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n\times (n-1) \times \cdots \times 1 ~, \\
\Rightarrow \log(n!) = \log(n) + \log(n-1) + \cdots + \log(1) ~.&lt;/script&gt;

&lt;p&gt;Therefore, a possible implementation using &lt;code&gt;sum()&lt;/code&gt; could be this function: &lt;a href=&quot;http:/ICP2017F/quiz/4-solutions/getFacVecSum.m&quot; target=&quot;_blank&quot;&gt;getFacVecSum.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/4-solutions-matlab-loops&quot;&gt;Quiz 4: Solutions - MATLAB loops&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 4: Problems - MATLAB loops]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/4-problems-matlab-loops"/>
  <id>http:/ICP2017F/quiz/4-problems-matlab-loops</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about for loops, while loops and vectorization in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Write a function that takes an input integer, and computes its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n!=n\times (n-1) \times (n-2) \cdots \times 2 \times 1 ~,&lt;/script&gt;

&lt;p&gt;in the following ways:&lt;/p&gt;

&lt;p&gt;(a) Write this function using while-loop. Name it &lt;code&gt;getFacWhile(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(b) Write this function using for-loop. Name it &lt;code&gt;getFacFor(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(c) Write this function using the vectorization concept. Name it &lt;code&gt;getFacVec(n)&lt;/code&gt;. (Hint: for the vectorized version of this function, you will have to first create a vector of integers from 1 to n, using MATLAB vector construction notation (This is very simple and easy if you recall from lecture notes). Then use MATLAB’s built-in &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/prod.html&quot;&gt;prod()&lt;/a&gt; function to accomplish the task of computing $n!$ as given by the above equation.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a MATLAB script, &lt;code&gt;timeFacFuncs.m&lt;/code&gt; that times the performance of the three functions you wrote in the previous problem, so that when you run this script, you get an output like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFacFuncs
average runtime for getFacWhile(1700000): 0.0054129 seconds
average runtime for getFacFor(1700000): 0.0080964 seconds
average runtime for getFacVec(1700000): 0.005283 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Extra Credit&lt;/strong&gt; Modify your answer to problem 1.(c) above in such a way that instead of using &lt;code&gt;prod()&lt;/code&gt;, you get the factorial using &lt;code&gt;sum()&lt;/code&gt; and some other elementary mathematical MATLAB functions. (Hint: for this problem, you will need to transform the numbers involved in calculations using some appropriate MATLAB mathematical function and revert the result at the end.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/4-problems-matlab-loops&quot;&gt;Quiz 4: Problems - MATLAB loops&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 5: Problems - MATLAB IO, plotting, and Monte Carlo methods]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo"/>
  <id>http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Friday Dec 1, 2017 11:59 PM&lt;/strong&gt;. This homework aims at giving you some experience with data input/output methods in MATLAB as well as plotting graphs and Monte Carlo techniques.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;Creating random 3-member student groups for the semester project&lt;/strong&gt; Consider this &lt;a href=&quot;http:/ICP2017F/homework/5-problems/students.csv&quot; target=&quot;_blank&quot;&gt;csv data file&lt;/a&gt; which contains the names of all of the students in this course. Our goal here is to write a MATLAB script that reads all the names in this file, and then creates random triples of names to form student groups who would work collaboratively on the final semester project. To do so you will need MATLAB’s built-in function &lt;code&gt;randperm()&lt;/code&gt; which creates random permutations of student IDs in the range 1-99. Once you create a random permutation, you will have to write a MATLAB for-loop which takes triples of integers from this vector of random permutations and puts the names corresponding to these IDs together in a cell array. Finally, this cell array of 33-by-3 elements could be written to an output Microsoft xlsx file, using MATLAB’s &lt;code&gt;xlswrite()&lt;/code&gt; function. On output your script should yield an excel file like &lt;a href=&quot;http:/ICP2017F/homework/5-problems/nameTriples.xlsx&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;. To get the exact same order and triple of names, you will have to use &lt;code&gt;rng(131313)&lt;/code&gt; at the beginning of your script in order to initialize the seed of MATLAB random number generator to 131313 so that the table can be regenerated every time you run your code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Reading scientific data from web using MATLAB&lt;/strong&gt;. Consider the following webpage address &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/bat_time_table.html&lt;/a&gt;. This is an data table (in HTML language) containing data from &lt;a href=&quot;https://www.nasa.gov/mission_pages/swift/main&quot; target=&quot;_blank&quot;&gt;NASA’s Swift satellite&lt;/a&gt;. Each row in this table represents information about a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot; target=&quot;_blank&quot;&gt;Gamma-Ray Burst (GRB)&lt;/a&gt; detection that Swift has made in the past years. Now, corresponding to each of event IDs, there (might) exist files that contain some attributes of these events which we wish to plot and understand their behavior. For example, for the first event in this table, contains a data file which is hidden in a directory on this website &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. For each event in this table, there is likely one such table hidden in this web directory.&lt;/p&gt;

&lt;p&gt;Our goal in this question is to fetch all these files from the website, using MATLAB and save them locally in our own computer. Then read their contents one by one and plot the two columns of data in all of them together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; Write a MATLAB script named &lt;code&gt;fetchDataFromWeb.m&lt;/code&gt; that uses this web address: &lt;code&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/triggers.txt&lt;/code&gt; to read a list of all GRB events and then writes the entire table of &lt;code&gt;triggers.txt&lt;/code&gt; to a local file with the same name on your device. For this purpose, you will need MATLAB built-in function &lt;code&gt;webread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Now, add to your script another set of commands that uses the event IDs stored in this file, to generate the corresponding web addresses like: &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&quot; target=&quot;_blank&quot;&gt;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/swift/GRB00745966_ep_flu.txt&lt;/a&gt;. Then it uses the generated web address to read the content of the page and store it in a local file on your device with the same name as it is stored on the webpage (for example, for the given webpage, the filename would be &lt;code&gt;GRB00745966_ep_flu.txt&lt;/code&gt;). &lt;strong&gt;Note:&lt;/strong&gt; Some of the web addresses for the given event IDs do not exist. Therefore, you should MATLAB’s try-catch construct to avoid runtime errors in your MATLAB code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; Now write another MATLAB script named &lt;code&gt;plotDatafromFile.m&lt;/code&gt;, that reads all of these files in your directory, one by one, using MATLAB &lt;code&gt;readtable()&lt;/code&gt; function, and plots the content of all of them together, on a single scatter plot (using MATLAB function &lt;code&gt;scatter()&lt;/code&gt;) like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/SwiftDataPlot.png&quot; width=&quot;900&quot; /&gt;  
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; again that some the data files stored on your computer are empty and some others have useless data if data in the second column of the file is larger than 0. So you will have to write your script in such a way that it checks for non-emptiness of the file (that is, the file does indeed contain some numerical data) as well as the negativity of the values in the column of data in each file. For example, you could check for the negativity of the values using MATLAB function &lt;code&gt;all(data[:,1]&amp;lt;0.0)&lt;/code&gt; assuming that data is the variable containing the information read from the file.&lt;/p&gt;

&lt;p&gt;Once you have done all these checks, you have to do one final manipulation of data, that is, the data in these files on the second column is actually the log of data, so have to get the &lt;code&gt;exp()&lt;/code&gt; value to plot it (because the plot in the figure above is a log-log plot and we want to exactly regenerate it). To do so you could simply use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;data[:,2] = exp(data[:,2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
as soon as you read from the file, and then finally you make a scatter plot of all data using MATLAB scatter plot. At the end, you will have to set a title for your plot as well and label the axes of the plot, and save your plot using MATLAB’s built-in function &lt;code&gt;saveas()&lt;/code&gt;. In order to find out how many files you have plotted in the figure, you will have to define a variable counter which increases by one unit, each time a new non-empty negative-second-column data file is read and plotted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the next three lectures in order to answer this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Simulating a fun Monte Carlo game.&lt;/strong&gt; Suppose you’re on a game show, and you’re given the choice of three doors:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_1.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Behind one door is a car; behind the two others, goats. You pick a door, say No. 1, and the host of the show opens another door, say No. 3, which has a goat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-problems/Monty_open_door.png&quot; width=&quot;600&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;He then says to you, “Do you want to pick door No. 2?”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What would you do?&lt;/strong&gt; Is it to your advantage to switch your choice from door 1 to door 2? Is it to your advantage, &lt;strong&gt;in the long run, for a large number of game tries&lt;/strong&gt;, to switch to the other door?&lt;/p&gt;

&lt;p&gt;Now whatever your answer is, I want you to check/prove your answer by a Monte Carlo simulation of this problem. Make a plot of your simulation for &lt;code&gt;nExperiments=100000&lt;/code&gt; repeat of this game, that shows, in the long run, on average, what is the probability of winning this game if you switch your choice, and what is the probability of winning, if you do not switch to the other door.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I strongly urge you to attend the lectures this week in order to get help for this question.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Monte Carlo approximation of the number $\pi$&lt;/strong&gt;. Suppose we did not know the value of $\pi$ and we wanted to estimate its value using Monte Carlo methods. One practical approach is to draw a square of unit side, with its diagonal opposite corners extending from the coordinates origin $(0,0)$ to $(1,1)$. Now we try to simulate uniform random points from inside of this square by generating uniform random points along the $X$ and $Y$ axes, i.e., by generating two random uniform numbers (x,y) from the range $[0,1]$.&lt;/p&gt;

&lt;p&gt;Now the generated random point $P$ has the coordinate $(x,y)$, so we can calculate its distance from the coordinate origin. Now suppose we also draw a quarter-circle inside of this square whose radius is unit and is centered at the origin $(0,0)$. The ratio of the area of this quarter-circle, $S_C$ to the area of the area of the square enclosing it, $S_S$ is,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{S_C}{S_S} = \frac{\frac{1}{4}\pi r^2}{r^2} = \frac{1}{4}\pi&lt;/script&gt;

&lt;p&gt;This is because the area of the square of unit sides, is just 1. Therefore, if we can somehow measure the area of the quarter $S_C$, then we can use the following equation, to get an estimate of $\pi$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi = 4S_C&lt;/script&gt;

&lt;p&gt;In order to obtain, $S_C$, we are going to throw random points in the square, just as described above, and then find the fraction of points, $f=n_C/n_{\rm total}$, that fall inside this quarter-circle. This fraction is related to the area of the circle and square by the following equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\frac{n_C}{n_{\rm total}} = \frac{S_C}{S_S}&lt;/script&gt;

&lt;p&gt;Therefore, one can obtain an estimate of $\pi$ using this fraction,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi \approx 4\frac{n_C}{n_{\rm total}}&lt;/script&gt;

&lt;p&gt;Now, write a MATLAB script, that takes in the number of points to be simulated, and then calculates an approximate value for $\pi$ based on the Monte Carlo algorithm described above.  Write a second function that plot the estimate of $\pi$ versus the number of points simulated, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/5-solutions/approximatePI.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/5-problems-matlab-IO-plotting-monte-carlo&quot;&gt;Homework 5: Problems - MATLAB IO, plotting, and Monte Carlo methods&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Solutions - loops, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/4-solutions-loops-IO"/>
  <id>http:/ICP2017F/homework/4-solutions-loops-IO</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;4-problems-loops-IO.html&quot; target=&quot;_blank&quot;&gt;Homework 4: Problems - loops, IO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this homework.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework4.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Nov 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB for-loops and while-loops as well as input/output functionalities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop.&lt;/strong&gt; Consider the following two vectors of temperatures in Celsius degrees to Fahrenheit, using a for-loop and then prints them on screen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
Fdegrees = [-20, -15, -5, 0, 10, 15, 30, 35, 40]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(A) Write a function that takes an input vector of temperatures, and a string which is either &lt;code&gt;'F2C'&lt;/code&gt; or &lt;code&gt;C2F&lt;/code&gt;. Then, converts the input temperature vector from Fahrenheit to Celsius if the input string is &lt;code&gt;'F2C'&lt;/code&gt;, otherwise converts the input temperature vector from Celsius to Fahrenheit if the input string is &lt;code&gt;'C2F'&lt;/code&gt;, otherwise outputs an error message and aborts the program.&lt;/p&gt;

&lt;p&gt;(A) Write this function using while-loop construct (you can name the function &lt;code&gt;convertTempFor.m&lt;/code&gt;).&lt;br /&gt;
(B) Write this function using for-loop construct (you can name the function &lt;code&gt;convertTempWhile.m&lt;/code&gt;).&lt;br /&gt;
(C) Write this function using vectorization concept (you can name the function &lt;code&gt;convertTempVec.m&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here are some example calls to these functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;InVec = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40];
&amp;gt;&amp;gt; convertTempFor(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempWhile(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempVec(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are the three &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempFor.m&quot; target=&quot;_blank&quot;&gt;convertTempFor.m&lt;/a&gt;, &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempWhile.m&quot; target=&quot;_blank&quot;&gt;convertTempWhile.m&lt;/a&gt;, and &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/convertTempVec.m&quot; target=&quot;_blank&quot;&gt;convertTempVec.m&lt;/a&gt; functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Use MATLAB built-in timing functions to measure the performance of three functions you wrote in question 1 above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timing.m&quot; target=&quot;_blank&quot;&gt;one way (timing.m script)&lt;/a&gt; to time the functions. Here is a test result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timing
Timing for convertTempVec: 0.038723 seconds.
Timing for convertTempFor: 0.03936 seconds.
Timing for convertTempWhile: 0.18011 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following nested cell vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;List = { {'M','A','T','L','A','B'}, {' '}, {'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'}, {', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'} };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a MATLAB script &lt;code&gt;extractLetter.m&lt;/code&gt; that uses for-loop to extract all the letters in the variable list and finally prints them all as a single string like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; extractLetter
MATLAB is a strange, but popular programming language
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/extractLetter.m&quot; target=&quot;_blank&quot;&gt;example implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;The significant impact of round-off errors in numerical computation.&lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you see the behavior observed. In particular, why do you not recover the original value $2.0$ after many repetitions of the same forward and reverse task of taking square root and squaring the result?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
This code (&lt;code&gt;roundoff.m&lt;/code&gt;) will yield the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt; roundoff
With 1 sqrt, then 1 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000004 
With 2 sqrt, then 2 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 3 sqrt, then 3 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999996 
With 4 sqrt, then 4 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 5 sqrt, then 5 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 6 sqrt, then 6 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999964 
With 7 sqrt, then 7 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999999714 
With 8 sqrt, then 8 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 9 sqrt, then 9 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 10 sqrt, then 10 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 11 sqrt, then 11 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000000235 
With 12 sqrt, then 12 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999991336 
With 13 sqrt, then 13 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 14 sqrt, then 14 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 15 sqrt, then 15 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999999973292 
With 16 sqrt, then 16 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000117746 
With 17 sqrt, then 17 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 18 sqrt, then 18 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000000408580 
With 19 sqrt, then 19 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 20 sqrt, then 20 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 21 sqrt, then 21 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000001573586 
With 22 sqrt, then 22 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000010885857 
With 23 sqrt, then 23 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000029511749 
With 24 sqrt, then 24 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 25 sqrt, then 25 times ^2 operations, the number 2.0000000000000000 becomes: 2.0000000066771721 
With 26 sqrt, then 26 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 27 sqrt, then 27 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 28 sqrt, then 28 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 29 sqrt, then 29 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 30 sqrt, then 30 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 31 sqrt, then 31 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999999917775542 
With 32 sqrt, then 32 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999990380770896 
With 33 sqrt, then 33 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 34 sqrt, then 34 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 35 sqrt, then 35 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 36 sqrt, then 36 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 37 sqrt, then 37 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999971307544144 
With 38 sqrt, then 38 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 39 sqrt, then 39 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 40 sqrt, then 40 times ^2 operations, the number 2.0000000000000000 becomes: 1.9999360966436217 
With 41 sqrt, then 41 times ^2 operations, the number 2.0000000000000000 becomes: 1.9994478907329654 
With 42 sqrt, then 42 times ^2 operations, the number 2.0000000000000000 becomes: 1.9984718365144798 
With 43 sqrt, then 43 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 44 sqrt, then 44 times ^2 operations, the number 2.0000000000000000 becomes: 1.9965211562778555 
With 45 sqrt, then 45 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 46 sqrt, then 46 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 47 sqrt, then 47 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 48 sqrt, then 48 times ^2 operations, the number 2.0000000000000000 becomes: 1.9887374575497223 
With 49 sqrt, then 49 times ^2 operations, the number 2.0000000000000000 becomes: 1.8682459487159784 
With 50 sqrt, then 50 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 51 sqrt, then 51 times ^2 operations, the number 2.0000000000000000 becomes: 1.6487212645509468 
With 52 sqrt, then 52 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 53 sqrt, then 53 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 54 sqrt, then 54 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 55 sqrt, then 55 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 56 sqrt, then 56 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 57 sqrt, then 57 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 58 sqrt, then 58 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 59 sqrt, then 59 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
With 60 sqrt, then 60 times ^2 operations, the number 2.0000000000000000 becomes: 1.0000000000000000 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that, 1 is returned for n &amp;gt;= 52 as square root of 2, that is, after 52 times square-root operation, the degree of accuracy required for representing the result goes beyond the degree of accuracy available in a MATLAB double precision number. Consequently, the later squaring operation on 1.00000000000000 will leave the number unchanged and therefore, 2 is not recovered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;eps = 1.0;
while 1.0 ~= 1.0 + eps
    disp(num2str(eps));
    eps = eps / 2.0;
end
disp(['final eps:', num2str(eps)]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 ~= 1.0 + eps&lt;/code&gt; be &lt;code&gt;false&lt;/code&gt;?!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is the output of the code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt; epsError
eps: 1
eps: 0.5
eps: 0.25
eps: 0.125
eps: 0.0625
eps: 0.03125
eps: 0.015625
eps: 0.0078125
eps: 0.0039063
eps: 0.0019531
eps: 0.00097656
eps: 0.00048828
eps: 0.00024414
eps: 0.00012207
eps: 6.1035e-05
eps: 3.0518e-05
eps: 1.5259e-05
eps: 7.6294e-06
eps: 3.8147e-06
eps: 1.9073e-06
eps: 9.5367e-07
eps: 4.7684e-07
eps: 2.3842e-07
eps: 1.1921e-07
eps: 5.9605e-08
eps: 2.9802e-08
eps: 1.4901e-08
eps: 7.4506e-09
eps: 3.7253e-09
eps: 1.8626e-09
eps: 9.3132e-10
eps: 4.6566e-10
eps: 2.3283e-10
eps: 1.1642e-10
eps: 5.8208e-11
eps: 2.9104e-11
eps: 1.4552e-11
eps: 7.276e-12
eps: 3.638e-12
eps: 1.819e-12
eps: 9.0949e-13
eps: 4.5475e-13
eps: 2.2737e-13
eps: 1.1369e-13
eps: 5.6843e-14
eps: 2.8422e-14
eps: 1.4211e-14
eps: 7.1054e-15
eps: 3.5527e-15
eps: 1.7764e-15
eps: 8.8818e-16
eps: 4.4409e-16
eps: 2.2204e-16
final eps:1.1102e-16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
What is happening is that after a certain number of divisions performed on the value of &lt;code&gt;eps&lt;/code&gt;, the value goes beyond the highest float precision representable by Python standard ($0.0000000000000001$), and therefore the value of &lt;code&gt;eps&lt;/code&gt; is eventually rounded to exact zero. The nonzero &lt;code&gt;eps&lt;/code&gt; value computed above is called &lt;strong&gt;machine epsilon&lt;/strong&gt; or &lt;strong&gt;machine zero&lt;/strong&gt; and is an important parameter to know, since it can lead to disasters in your very important complex calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function named &lt;code&gt;getLargestPrime&lt;/code&gt; that does so, using for-loop, break, and MATLAB’s intrinsic function isprime(). Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getLargestPrime(123)
ans =
   113
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function integer = getLargestPrime(upper)
    if (upper&amp;lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Consider the problem number 5 in HW 3, where we wrote a &lt;a href=&quot;http:/ICP2017F/homework/3/fib.m&quot;&gt;function&lt;/a&gt; named &lt;code&gt;fib.m&lt;/code&gt; that used the idea of recursive functions to generate the Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;(A) Download &lt;a href=&quot;http:/ICP2017F/homework/3/fib.m&quot; target=&quot;_blank&quot;&gt;this function fib()&lt;/a&gt; and modify it using MATLAB &lt;code&gt;timeit()&lt;/code&gt; function such that it also returns the average runtime of &lt;code&gt;getFib()&lt;/code&gt; nested function inside &lt;code&gt;fib()&lt;/code&gt;, right after giving the requested Fibonacci number. For example, here is an output from such modified code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 1.0083e-05 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 8.8884e-05 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 0.00095559 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 0.010311 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 0.11575 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 1.2904 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Note that you can use &lt;code&gt;char(9)&lt;/code&gt; at the beginning of your &lt;code&gt;disp()&lt;/code&gt; messages in order to add the &lt;code&gt;tab&lt;/code&gt; character at the beginning of your message, just like the above example.)&lt;/p&gt;

&lt;p&gt;(B) Now copy this function to a new MATLAB M-file named &lt;code&gt;fibLoop.m&lt;/code&gt;. Also modify the name of the function &lt;code&gt;fib()&lt;/code&gt; in this file &lt;code&gt;fibLoop()&lt;/code&gt;. Modify the nested function &lt;code&gt;getFib()&lt;/code&gt; inside of &lt;code&gt;fibLoop()&lt;/code&gt; such that instead of recursive function calls, it uses a for-loop to find the requested Fibonacci number.&lt;/p&gt;

&lt;p&gt;(C) Now time your new function &lt;code&gt;fibLoop()&lt;/code&gt; for the same input integers as in the above example: $10,15,20,25,30,35$. How do the runtimes for &lt;code&gt;fibLoop()&lt;/code&gt; compare with &lt;code&gt;fib()&lt;/code&gt;. Which function is faster and more efficient: &lt;code&gt;fib()&lt;/code&gt; or &lt;code&gt;fibLoop()&lt;/code&gt;? Why is there such huge difference in the performance of the two functions?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an implementation of the &lt;a href=&quot;http:/ICP2017F/homework/4/fib.m&quot; target=&quot;_blank&quot;&gt;modified fib()&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4/fibLoop.m&quot; target=&quot;_blank&quot;&gt;modified fib()&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fibLoop
Please enter a non-negative integer or type stop: 12
	fib(12) = 144
	average runtime: 4.3496e-06 seconds
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 4.5323e-06 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 4.5232e-06 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 4.6357e-06 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 4.6562e-06 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 4.7624e-06 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 4.7889e-06 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
As you see, the for-loop version of the function &lt;code&gt;fibLoop()&lt;/code&gt; is far faster than the recursive function version &lt;code&gt;fib()&lt;/code&gt;. The reason is that the recursive version is not well written and does a lot of redundant calculations. Ask me in class to explain for you why there is such a huge redundancy in this function calculations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; &lt;strong&gt;(A)&lt;/strong&gt; Write two new MATLAB functions &lt;code&gt;timeFib(n)&lt;/code&gt; and &lt;code&gt;timeFibLoop(n)&lt;/code&gt; based on your MATLAB functions &lt;code&gt;fib()&lt;/code&gt; and &lt;code&gt;fibLoop()&lt;/code&gt; that you wrote in problem 6, such that both take an integer and output a structure whose fields are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;output.n
output.fib
output.runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the function should take as input only an integer variable, so you need to modify your old codes to only check whether the input &lt;code&gt;~ischar()&lt;/code&gt;, and &lt;code&gt;isreal()&lt;/code&gt; and &lt;code&gt;n&amp;gt;=0&lt;/code&gt; and &lt;code&gt;round(n)==n&lt;/code&gt;. Here is an example output from the two functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFib(20)
ans = 
          n: 20
        fib: 6765
    runtime: 9.6568e-04
&amp;gt;&amp;gt; timeFib('amir')
Error using timeFib (line 8)
The input argument is not a non-negative integer! 
&amp;gt;&amp;gt; timeFibLoop(20)
ans = 
          n: 20
        fib: 6765
    runtime: 4.4076e-06
&amp;gt;&amp;gt; timeFibLoop('amir')
Error using timeFibLoop (line 8)
The input argument is not a non-negative integer! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Now write a script named &lt;code&gt;writeFibResult.m&lt;/code&gt; that calls these two functions for a range of input $n={10,2,3,\ldots,35}$ values, and then write the output of these two functions in a formatted way in two files like these &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibOutput.txt&quot; target=&quot;_blank&quot;&gt;fibOutput.txt&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibLoopOutput.txt&quot; target=&quot;_blank&quot;&gt;fibLoopOutput.txt&lt;/a&gt;. You can use any of MATLAB IO methods to create the output file with any file extension you prefer: &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.tab&lt;/code&gt;, … .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here the two functions &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timeFib.m&quot; target=&quot;_blank&quot;&gt;timeFib.m&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/timeFibLoop.m&quot; target=&quot;_blank&quot;&gt;timeFibLoop.m&lt;/a&gt;, and here is the script &lt;a href=&quot;http:/ICP2017F/homework/4-solutions/writeFibResult.m&quot; target=&quot;_blank&quot;&gt;writeFibResult.m&lt;/a&gt; that creates the requested output file in the problem.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/4-solutions-loops-IO&quot;&gt;Homework 4: Solutions - loops, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exam final: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/exam/1-semester-project"/>
  <id>http:/ICP2017F/exam/1-semester-project</id>
  <published>2017-11-13T00:00:00-06:00</published>
  <updated>2017-11-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the final semester project that will serve as the final exam for this course. Please submit all your efforts for this project (all files, data and results) in &lt;code&gt;ICP2017F/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by &lt;strong&gt;Friday 9 AM, Dec 15 2017&lt;/strong&gt;.  **Note: I strongly urge you to attend the future lectures until the end of the semester and seek help from the instructor (Amir) to tackle this project.&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;ICP2017F/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/ICP2017F/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all your codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h2&gt;

&lt;p&gt;Our goal in this project is to fit a mathematical model of the growth of living cells to real experimental data for the growth of a cancer tumor in the brain of a rat. You can download the data in the form of a MATLAB data file for this project from &lt;a href=&quot;http:/ICP2017F/exam/1-problems/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a set of separate MATLAB codes that perform the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. Since you have multiple MATLAB codes each in a separate file for different purposes, you should also write a &lt;code&gt;main.m&lt;/code&gt; MATLAB code, such that when the user of your codes runs on MATLAB command line,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
then all the necessary MATLAB codes to generate all the results will be called by this &lt;code&gt;main.m&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Initially at time $t=0 ~\mathrm{[days]}$, $100,000\pm10,000$ brain tumor cells are injected to the brain of the rat. These cells are then allowed to grow for 10 days. Then starting at day 10, the brain of the rat is imaged using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic_resonance_imaging&quot; target=&quot;_blank&quot;&gt;MRI machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each image results in a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for a period of two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1 [days]$.&lt;/p&gt;

&lt;p&gt;Therefore, the vector of times at which we have the number of tumor cells measured would be,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Time = [ 0, 10, 12, 14, 16, 18, 20, 22 ] ~,&lt;/script&gt;

&lt;p&gt;in units of days. Given this data set,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a MATLAB script that reads the input MATLAB file containing cell numbers at different positions in the rat’s brain measured by MRI, on different days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write MATLAB codes that generate a set of figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts). For this part of the project you will MATLAB plotting functions such as &lt;code&gt;plot()&lt;/code&gt;, &lt;code&gt;imagesc()&lt;/code&gt; and the concept subplots in MATLAB.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;obtaining-the-error-in-tumor-cell-count&quot;&gt;Obtaining the error in tumor cell count&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Our assumption here is that the uncertainty in the total number of tumor cells at each time point is given by the number of tumor cells at the boundary of tumor. Therefore, you will have to write a MATLAB code that identifies the boundary of tumor at each time point and then sums over the count cells in all boundary points and uses that as the error in number of tumor cell counts. For this part, you will need MATLAB functions such as &lt;code&gt;bwboundaries()&lt;/code&gt; and &lt;code&gt;errorbar()&lt;/code&gt;. In the end, you should get and save a figure in your project’s figure folder like the following figure,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/growthCurve.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that this part of the project is completely independent of the modeling part described in the following section.&lt;/p&gt;

&lt;h2 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model. To do so, we need to find the best-fit parameters of the model. The mathematical model we will use here is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertzian growth model&lt;/a&gt;. Here, we will use a slightly modified for of the Gompertzian function of the following form,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,\lambda,c) = N_0 \times \exp\bigg( \lambda~\bigg[ 1-\exp(-ct) \bigg] \bigg) ~,&lt;/script&gt;

&lt;p&gt;where $N(t,\lambda,c)$ is the &lt;strong&gt;predicted number&lt;/strong&gt; of tumor cells at time $t$, $N_0$ is the initial number of tumor cells at time $t=0$ days, $\lambda$ is the growth rate parameter of the model, and $c$ is just another parameter of the model. We already know the initial value of the number of tumor cells, $N_0=100,000\pm10,000$. Therefore, we can fix $N_0$ to $100,000$ in the equation of the model given above.&lt;/p&gt;

&lt;p&gt;However, we don’t know the values of the parameters $\lambda$ and $c$. Thus, we would like to find their best values given the input tumor cell data using some MATLAB optimization algorithm.&lt;/p&gt;

&lt;p&gt;This Gompertzian growth model is called our &lt;strong&gt;physical model&lt;/strong&gt; for this problem, because it describes the physics of our problem (The physics/biology of the tumor growth).&lt;/p&gt;

&lt;h3 id=&quot;combining-the-physical-model-with-a-regression-model&quot;&gt;Combining the physical model with a regression model&lt;/h3&gt;

&lt;p&gt;Now, if our physical model was ideally perfect in describing the data, the curve of the model prediction would pass through all the points in the growth curve plot of the above figure, thus providing a prefect description of data. This is however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly.&lt;/p&gt;

&lt;p&gt;Therefore, we have to seek for the parameter values that can bring the model prediction us as close as possible to data. To do so, we define a &lt;strong&gt;statistical model&lt;/strong&gt; in addition to the &lt;strong&gt;physical model&lt;/strong&gt; described above. In other words, we have to define a statistical regression model (the renowned &lt;strong&gt;least-squares method&lt;/strong&gt;) that gives us the probability $\pi(\log N_{obs}|\log N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(\log N_{obs} | \log N(t,\lambda,c),\sigma) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t)-\log N(t,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;Note that our statistical model given above is a Normal probability density function, with its mean parameter represented by &lt;strong&gt;the log&lt;/strong&gt; of the output of our physical model, $\log N(t,\lambda,c)$, and its standard deviation represented by $\sigma$, which is unknown, and we seek to find it. The symbol $\pi$, whenever it appears with parentheses, like $\pi()$, it means probability of the entity inside the parentheses. However, whenever it appears alone, it means the famous number PI, $\pi\approx 3.1415$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we use the logarithm of the number of cells instead of using the number of cells directly?&lt;/strong&gt; The reason behind it is slightly complicated. A simple (but not entirely correct argument) is the following: We do so, because the tumor cell counts at later times become extremely large numbers, on the order of several million cells (For example, look at the number of cells in the late stages of the tumor growth, around $t=20$ days). Therefore, to make sure that we don’t hit any numerical precision limits of the computer when dealing with such huge numbers, we work with the logarithm of the number of tumor cells instead of their true non-logarithmic values.&lt;/p&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together (the time vector and the logarithm of the number of cells at different times) given the parameters of the model, $\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$, is the product of their individual probabilities of observations given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{L}(\mathcal{D}|\lambda,c,\sigma) 
&amp;= \prod_{i=1}^{n=8} \pi(\log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
&amp;= \prod_{i=1}^{n=8} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Frequently however, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$. This is again because the numbers involved are extremely small often below the precision limits of the computer. So, by taking the logarithm of the numbers, we work instead with number’s exponent, which looks just like a normal number (not so big, not so small). So, by taking the log, the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)
    &amp;= \sum_{i=1}^{n=8} \log \pi( \log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
    &amp;= \sum_{i=1}^{n=8} \log \bigg[ \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i) - \log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) \bigg] ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;
Now the goal is to use an optimization algorithm in MATLAB, such as &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely set of the parameters of the model $\lambda,c,\sigma$ that give the highest likelihood of obtaining the available data, which is given by the number $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ from the above equation. So we want to find the set of parameters for which this number given by the above equation is maximized. You can also use any MATLAB optimization function or method that you wish, to obtain the best parameters.&lt;/p&gt;

&lt;p&gt;However, if you use &lt;code&gt;fminsearch()&lt;/code&gt;, then note that this function finds the minimum of an input function, not the maximum. What we want is to find the maximum of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.
What is the solution then? Very simple.
We can multiply the value of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ by a negative, so that the maximum value is converted to minimum. But, note that the position (the set of parameter values) at which this minimum occurs, will remain the same as the maximum position for $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.&lt;/p&gt;

&lt;p&gt;So, now rewrite your likelihood function above by multiplying its final result (which is just number) by a negative sign. Then you pass this modified function to &lt;code&gt;fminsearch()&lt;/code&gt; and you find the optimal parameters. Note that &lt;code&gt;fminsearch()&lt;/code&gt; takes as input also a set of initial staring parameter values to initiate the search for the optimal parameters. You can use $(\lambda,c,\sigma) = [10,0.1,1]$ as your starting point given to &lt;code&gt;fminsearch()&lt;/code&gt; to search for the optimal values of the parameters.&lt;/p&gt;

&lt;p&gt;Then redraw the above tumor evolution curve and show the result from the model prediction as well, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/exam/1-problems/figures/growthCurveFit.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Report also your best fit parameters in a file and submit them with all the figures and your codes to your exam folder repository.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/exam/1-semester-project&quot;&gt;Exam final: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 11: MATLAB - Input/Output (IO)]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/11-matlab-IO"/>
  <id>http:/ICP2017F/lecture/11-matlab-IO</id>
  <published>2017-11-08T00:00:00-06:00</published>
  <updated>2017-11-08T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture discusses topics on data Input/Output processes in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as a reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/fcHoYAeiKiI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/jPWAtLfQthI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So far in this course, we have indirectly discussed several methods of getting input information from the user, and several methods of outputting the result in a MATLAB program. This lecture, attempts at formalizing all the previous discussions and introduce more general efficient methods of code interaction with users.&lt;/p&gt;

&lt;h2 id=&quot;methods-of-data-inputoutput-in-matlab&quot;&gt;Methods of data input/output in MATLAB&lt;/h2&gt;

&lt;p&gt;Let’s begin with an example code, explaining the meaning of input/output (I/O) in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = 0.1;
b = 1;
x = 0.6;
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.1822
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; are examples of input data to a code, and &lt;code&gt;y&lt;/code&gt; is an example of code output. In such cases as in the above, the input data is said to be &lt;strong&gt;hardcoded&lt;/strong&gt; in the program.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;b&gt;In general, in any programming language, including MATLAB, you should avoid hardcoding input information to your program as much as possible.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    If data is hardcoded, then every time that it needs to be changed, the user has to change the content of the code. This is not considered good programming style for software development.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
In general, input data can be fed to a program in four different ways:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;let the user answer questions in a dialog in &lt;strong&gt;MATLAB terminal window&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input on the &lt;strong&gt;operating system command line&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user write input data in a &lt;strong&gt;graphical interface&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;let the user provide input data in a &lt;strong&gt;file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For outputting data, there are two major methods,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;writing to the terminal window, as previously done using print() function, or,&lt;/li&gt;
  &lt;li&gt;writing to an output file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have already extensively discussed printing output to the terminal window. Reading from and writing data to file is also easy as we see in this lecture.&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-from-matlab-terminal-window&quot;&gt;Input/output from MATLAB terminal window&lt;/h3&gt;

&lt;p&gt;We have already introduced and used this method frequently in previous lectures, via the MATLAB’s built-in function &lt;code&gt;input()&lt;/code&gt;. If we were to get the input data for the above code via the terminal window, an example approach would be the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;datain = input('input [a,b,c]: ');
a = datain(1);
b = datain(2);
x = datain(3);
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;input a,b,c: [0.1, 1, 0.6]
y =
    0.1822
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One could also read the input values as string ans then convert them to real values or parse the input using one of MATLAB’s built-in functions, for example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; datain = input('input [a,b,c]: ','s');
input [a,b,c]: [0.1, 1, 0.6]
&amp;gt;&amp;gt; class(datain)
ans =
char
&amp;gt;&amp;gt; datain = str2num(datain)
datain =
    0.1000    1.0000    0.6000
&amp;gt;&amp;gt; class(datain)
ans =
double
&amp;gt;&amp;gt; a = datain(1);
&amp;gt;&amp;gt; b = datain(2);
&amp;gt;&amp;gt; x = datain(3);
&amp;gt;&amp;gt; y = a*exp(b*x)
y =
    0.1822
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-operating-systems-command-line&quot;&gt;Input/output data from operating system’s command line&lt;/h3&gt;

&lt;p&gt;This approach is most popular in Unix-like environments, where most users are accustomed to using Bash command line. However, it can be readily used in &lt;a href=&quot;https://en.wikipedia.org/wiki/Cmd.exe&quot; target=&quot;_blank&quot;&gt;Windows cmd&lt;/a&gt; environment as well. For this approach, we have to invoke MATLAB from the computer operating system’s command line, that is, Bash in Linux systems, and cmd in Windows,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;start matlab -nosplash -nodesktop -r &quot;testIO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then a MATLAB command-line window opens in your computer like the following that runs automatically your code (stored in &lt;code&gt;testIO.m&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/lecture/11/matlab.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
In the above command, we are basically starting MATLAB from the OS command line with our own choice of optional arguments for MATLAB. You can specify startup options (also called &lt;strong&gt;command flags&lt;/strong&gt; or &lt;strong&gt;command-line switches&lt;/strong&gt;) that instruct the MATLAB program to perform certain operations when you start it. On all platforms, specify the options as arguments to the matlab command when you start at the operating system prompt. For example, the following starts MATLAB and suppresses the display of the splash screen (a splash screen is a graphical control element consisting of a window containing an image, a logo, and the current version of the software. A splash screen usually appears while a game or program is launching),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;matlab -nosplash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The flag &lt;code&gt;-nodesktop&lt;/code&gt; result in opening only the MATLAB command line, and no MATLAB Graphical user interface (GUI) just like the figure above. Finally, the flag &lt;code&gt;-r&lt;/code&gt; executes the MATLAB file that appears right after it, specified as a string or as the name of a MATLAB script or function. If statement is MATLAB code, you should enclose the string with double quotation marks. If statement is the name of a MATLAB function or script, &lt;strong&gt;do not specify the file extension&lt;/strong&gt; and &lt;strong&gt;do not use quotation marks&lt;/strong&gt;. Any required file must be on the MATLAB search path or in the startup folder. You can also set MATLAB’s working folder right from the command-line using &lt;code&gt;-sd&lt;/code&gt; flag. You can find find more information about all possible flags &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/matlabwindows.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. On Windows platforms, you can precede a startup option with either a hyphen (&lt;code&gt;-&lt;/code&gt;) or a slash (&lt;code&gt;/&lt;/code&gt;). For example, &lt;code&gt;-nosplash&lt;/code&gt; and &lt;code&gt;/nosplash&lt;/code&gt; are equivalent.&lt;/p&gt;

&lt;p&gt;Note that you can also quote MATLAB on the OS command line, along with the name of the script you want to run. For example, suppose you wanted to run the original script,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = 0.1;
b = 1;
x = 0.6;
y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
but now with &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, given at runtime. You could write a script file &lt;code&gt;test.m&lt;/code&gt; that contains,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;y = a*exp(b*x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and give the variables values at runtime, on OS command line, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;matlab -nosplash -nodesktop -r &quot;a = 0.1; b = 1; x = 0.6; testIO&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The figure below shows a screen-shot illustrarting the output of the above command.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/lecture/11/matlab1.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-a-graphical-user-interface&quot;&gt;Input/output data from a Graphical User Interface&lt;/h3&gt;

&lt;p&gt;This method of inputting data is done by constructing a Graphical User Interface  (GUI) which opens and takes input from the user. This is probably one of the most convenient methods for the users to input data. You can do this in MATLAB for example by using the built-in function &lt;code&gt;inputdlg()&lt;/code&gt; which creates dialog box that gathers user input. But this method of data colleciton is beyond the scope of our class.  More information about this can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/inputdlg.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;inputoutput-data-from-file&quot;&gt;Input/output data from file&lt;/h3&gt;
&lt;p&gt;In cases where the input/output data is large, the command-line arguments and input from terminal window are not efficient anymore. In such cases, the most common approach is to let the code read/write data from a pre-existing file, the path to which is most often given to the code via the OS command line or MATLAB terminal window.&lt;/p&gt;

&lt;p&gt;There are many methods of importing and exporting data to and from MATLAB, only some of which we will discuss here. For more information see &lt;a href=&quot;https://www.mathworks.com/help/matlab/import_export/ways-to-import-text-files.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-import-and-export.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;https://www.mathworks.com/help/matlab/text-files.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. The following table shows some of the most important import functions in MATLAB, which we will discuss here as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Common Methods for Importing Data from a File to MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Function&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;load()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Load MATLAB variables from file into MATLAB workspace&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;save()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; save MATLAB variables from MATLAB workspace into a MATLAB `.mat` file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fscanf()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read data from text file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fprintf()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write data to a text file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dlmread()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read ASCII-delimited file of numeric data into matrix&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dlmwrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write a numeric matrix into ASCII-delimited file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;csvread()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read comma-separated value (CSV) file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;csvwrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write values of a matrix into a comma-separated (CSV) file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;xlswrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read Microsoft Excel spreadsheet file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;xlswrite()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; write data into a Microsoft Excel spreadsheet file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;readtable()  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Create table from file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;writetable() &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write table to file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;imread()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read image from graphics file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;imwrite()    &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write image to graphics file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;importdata() &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Load data from file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;textscan()   &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read formatted data from text file or string&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fgetl()      &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read line from file, removing newline characters&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fread()      &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Read data from binary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fwrite()     &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Write data to binary file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;type()       &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Display contents of file&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;loadingsaving-matlab-workspace-variables&quot;&gt;Loading/saving MATLAB workspace variables&lt;/h4&gt;

&lt;p&gt;MATLAB has two useful functions that can save the workspace variables into special MATLAB &lt;code&gt;.mat&lt;/code&gt; files, to be later load again into the same or another MATLAB workspace for further work or manipulation. The function &lt;code&gt;save()&lt;/code&gt; saves workspace variables to a given file. The most useful options for this function are the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;save(filename)
save(filename,variables)
save(filename,variables,fmt)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;save(filename)&lt;/code&gt; saves all variables from the current workspace in a MATLAB formatted binary file called &lt;strong&gt;MAT-file&lt;/strong&gt; with the given name &lt;code&gt;filename&lt;/code&gt;. If the file &lt;code&gt;filename&lt;/code&gt; exists, &lt;code&gt;save()&lt;/code&gt; overwrites the file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;save(filename,variables)&lt;/code&gt; saves only the variables or fields of a structure array specified by &lt;code&gt;variables&lt;/code&gt;. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;p = rand(1,10);
q = ones(10);
save('pqfile.mat','p','q')
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
will create the binary MAT file &lt;a href=&quot;http:/ICP2017F/lecture/11/pqfile.mat&quot; target=&quot;_blank&quot;&gt;pqfile.mat&lt;/a&gt; which contains the two variables.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;save(filename,variables,fmt)&lt;/code&gt; saves the requested variables with the file format specified by &lt;code&gt;fmt&lt;/code&gt;. The variables argument is optional. If you do not specify variables, the save function saves all variables in the workspace. File format, specified as one of the following. When using the command form of save, you do not need to enclose the input in single or double quotes, for example, save myFile.txt -ascii -tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Common Methods for Importing Data from a File to MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Value of fmt&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;File Format&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-mat'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Binary MAT-file format.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Text format with 8 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-tabs'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Tab-delimited text format with 8 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-double'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Text format with 16 digits of precision.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'-ascii','-double','-tabs'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Tab-delimited text format with 16 digits of precision.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;p = rand(1,10);
q = ones(10);
save('pqfile.txt','p','q','-ascii')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will create an ASCII text file &lt;a href=&quot;http:/ICP2017F/lecture/11/pqfile.txt&quot; target=&quot;_blank&quot;&gt;pqfile.txt&lt;/a&gt; which contains the two variables &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, one can reload the same files into MATLAB workspace again if needed, for example using MATLAB &lt;code&gt;load()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; load('pqfile.txt')
&amp;gt;&amp;gt; pqfile
pqfile =
  Columns 1 through 8
    0.0975    0.2785    0.5469    0.9575    0.9649    0.1576    0.9706    0.9572
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000
  Columns 9 through 10
    0.4854    0.8003
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
    1.0000    1.0000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But note that upon loading the Ascii file, the information about the individual variables is lost. By contrast, loading data using the MAT file will preserve the variables structure,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; load('pqfile.mat')
&amp;gt;&amp;gt; p
p =
  Columns 1 through 8
    0.1419    0.4218    0.9157    0.7922    0.9595    0.6557    0.0357    0.8491
  Columns 9 through 10
    0.9340    0.6787
&amp;gt;&amp;gt; q
q =
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-a-formatted-file-using-fscanf-and-fprintf&quot;&gt;Reading/writing a formatted file using &lt;code&gt;fscanf()&lt;/code&gt; and &lt;code&gt;fprintf()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;There are numerous methods of reading the contents of a file in MATLAB. The most trivial and probably least pleasing method is through MATLAB’s built-in function &lt;code&gt;fscanf()&lt;/code&gt;. To read a file, say &lt;a href=&quot;http:/ICP2017F/lecture/11/data.in&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, you will have to first open it in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;fileID = fopen('data.in','r');
formatSpec = '%f';
A = fscanf(fileID,formatSpec)
fclose(fileID);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A =
    1
    3
    4
    5
    6
    7
    88
    65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that unlike the C language’s &lt;code&gt;fscanf()&lt;/code&gt;, in MATLAB &lt;code&gt;fscanf()&lt;/code&gt; is vectorized meaning that it can read multiple lines all at once. Here, the attribute &lt;code&gt;'r'&lt;/code&gt; states that the file is opened for the purpose of reading it (vs writing, or some other purpose). A list of available options for &lt;code&gt;fopen()&lt;/code&gt; are the following,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Attributes for MATLAB function &lt;code&gt;fopen()&lt;/code&gt;.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Attribute&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;'r' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for reading.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'w' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for writing. Discard existing contents, if any.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'a' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for writing. Append data to the end of the file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'r+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for reading and writing.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'w+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for reading and writing. Discard existing contents, if any.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'a+'&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open or create new file for reading and writing. Append data to the end of the file.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'A' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for appending without automatic flushing of the current output buffer.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;'W' &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Open file for writing without automatic flushing of the current output buffer.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The general syntax for reading an array from an input file using &lt;code&gt;fscanf()&lt;/code&gt; is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;array = fscanf(fid,format)
[array, count] = fscanf(fid,format,size)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where the optional argument &lt;code&gt;size&lt;/code&gt; specifies the amount of data to be read from the file. There are three versions of this argument,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;n&lt;/code&gt;: Reads exactly &lt;code&gt;n&lt;/code&gt; values. After this statement, &lt;code&gt;array&lt;/code&gt; will be a column vector containing &lt;code&gt;n&lt;/code&gt; values read from the file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Inf&lt;/code&gt;: Reads until the end of the file. After this statement, &lt;code&gt;array&lt;/code&gt; will be a column vector containing all of the data until the end of the file.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[n m]&lt;/code&gt;: Reads exactly, $n\times m$ values, and format the data as an $n\times m$ array. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/nums2.txt&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;, which contains two columns of numeric data. One could read this data using &lt;code&gt;fscanf()&lt;/code&gt; like the following,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; formatSpec = '%d %f';
&amp;gt;&amp;gt; sizeA = [2 Inf];
&amp;gt;&amp;gt; fileID = fopen('nums2.txt','r');
&amp;gt;&amp;gt; A = transpose(fscanf(fileID,formatSpec,sizeA))
&amp;gt;&amp;gt; fclose(fileID);
A =
  1.0000    2.0000    3.0000    4.0000    5.0000
  0.8147    0.9058    0.1270    0.9134    0.6324
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
Now suppose you perform some on operation on &lt;code&gt;A&lt;/code&gt;, say the elemental multiplication of &lt;code&gt;A&lt;/code&gt; by itself. Then you want to store (append) the result into another file. You can do this using MATLAB function &lt;code&gt;fprintf()&lt;/code&gt;,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; formatSpec = '%d %f \n';
&amp;gt;&amp;gt; fileID = fopen('nums3.txt','w+');
&amp;gt;&amp;gt; fprintf(fileID,formatSpec,A.*A);
&amp;gt;&amp;gt; fclose(fileID);
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The option &lt;code&gt;w+&lt;/code&gt; tells MATLAB to store the result in a file named &lt;a href=&quot;http:/ICP2017F/lecture/11/nums3.txt&quot; target=&quot;_blank&quot;&gt;num3.txt&lt;/a&gt;, and if the file does already exist, then append the result to the end of the current existing file. To see what formatting specifiers you can use with MATLAB &lt;code&gt;fscanf()&lt;/code&gt; and &lt;code&gt;fprintf()&lt;/code&gt;, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/fprintf.html&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MATLAB also has some rules to skip characters that are unwanted in the text file. These rules are really details that are specific to your needs and the best approach is to seek the solution to your specific problem by searching MATLAB’s  manual or the web. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/temperature.dat&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt; which contains a set of temperature values in degrees (including the Celsius degrees symbol). One way to read this file and skipping the degrees symbol in MATLAB could be then the following set of commands,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fileID = fopen('temperature.dat','r');
&amp;gt;&amp;gt; degrees = char(176);
&amp;gt;&amp;gt; [A,count] = fscanf(fileID, ['%d' degrees 'C'])
&amp;gt;&amp;gt; fclose(fileID);
A =
    78
    72
    64
    66
    49
count =
     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This method of reading a file is very powerful but rather detailed, low-level and cumbersome, specially that you have to define the format for the content of the file appropriately. Most often, other higher-level MATLAB’s built-in function come to rescue us from the hassles of using &lt;code&gt;fscanf()&lt;/code&gt;. For more information about this function though, if you really want to stick to it, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/fscanf.html#buaio_v-5&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Some important MATLAB special characters (&lt;strong&gt;escape characters&lt;/strong&gt;) that can also appear in &lt;code&gt;fprintf()&lt;/code&gt; are also given in the following table.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of escape characters in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Effect on Text&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single quotation mark&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;%%&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single percent sign&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Single backslash&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;&lt;td&gt;New line&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Horizontal tab&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Vertical tab&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-dlmreaddlmwrite-and-csvreadcsvwrite&quot;&gt;Reading/writing data using &lt;code&gt;dlmread()/dlmwrite()&lt;/code&gt; and &lt;code&gt;csvread()/csvwrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The methods discussed above are rather primitive, in that they require a bit of effort by the user to know something about the structure of the file and its format. MATLAB has a long list of advanced IO functions that can handle a wide variety of data file formats. Two of the most common functions are dedicated specifically to read data files containing delimited data sets: &lt;code&gt;csvread()&lt;/code&gt; and &lt;code&gt;dlmread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the field of scientific computing, a &lt;strong&gt;Comma-Separated Values (CSV)&lt;/strong&gt; data file is a type of file with extension &lt;code&gt;.csv&lt;/code&gt;, which stores tabular data (numbers and text) in plain text format. Each line of the file is called a &lt;strong&gt;data record&lt;/strong&gt; and each record consists of one or more &lt;strong&gt;fields, separated by commas&lt;/strong&gt;. The use of the &lt;strong&gt;comma&lt;/strong&gt; as a &lt;strong&gt;field separator&lt;/strong&gt; is the source of the name for this file format.&lt;/p&gt;

&lt;p&gt;Now suppose you wanted to read two matrices whose elements were stored in CSV format in two csv data files &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix1.csv&quot; target=&quot;_blank&quot;&gt;matrix1.csv&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix2.csv&quot; target=&quot;_blank&quot;&gt;matrix2.csv&lt;/a&gt;. You can accomplish this task simply by calling MATLAB’s built-in csv-reader function called &lt;code&gt;csvread(filename)&lt;/code&gt;. Here the word &lt;code&gt;filename&lt;/code&gt; is the path to the file in your local hard drive. For example, download these two given csv files above in your MATLAB working directory and then try,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Mat1 = csvread('matrix1.csv');
&amp;gt;&amp;gt; Mat2 = csvread('matrix2.csv');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then suppose you want to multiply these two vectors and store the result in a new variable and write it to new output csv file. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Mat3 = Mat1 * Mat2;
&amp;gt;&amp;gt; csvwrite('matrix3.csv',Mat3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which would output &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix3.csv&quot; target=&quot;_blank&quot;&gt;this file: matrix3.csv&lt;/a&gt; for you.&lt;/p&gt;

&lt;p&gt;Alternatively, you could also use MATLAB’s built-in functions &lt;code&gt;dlmread()&lt;/code&gt; and &lt;code&gt;dlmwrite()&lt;/code&gt; functions to do the same things as above. These two functions read and write ASCII-delimited file of numeric data. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Mat1 = dlmread('matrix1.csv');
&amp;gt;&amp;gt; Mat2 = dlmread('matrix2.csv');
&amp;gt;&amp;gt; Mat3 = Mat1 * Mat2;
&amp;gt;&amp;gt; dlmwrite('matrix3.dat',Mat3);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, &lt;code&gt;dlmread()&lt;/code&gt; and &lt;code&gt;dlmwrite()&lt;/code&gt; come with an optional argument &lt;code&gt;delimiter&lt;/code&gt; of the following format,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dlmread(filename,delimiter)
&amp;gt;&amp;gt; dlmwrite(filename,matrixObject,delimiter)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where the argument &lt;code&gt;delimiter&lt;/code&gt; is the &lt;strong&gt;field delimiter character&lt;/strong&gt;, specified as a character vector or string. For, example in the above case, the delimiter is comma &lt;code&gt;','&lt;/code&gt;. In other cases, you could for example use white space &lt;code&gt;' '&lt;/code&gt;, or &lt;code&gt;'\t'&lt;/code&gt; to specify a tab delimiter, and so on. For example, you could have equally written,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dlmwrite('matrix4.dat',Mat3,'\t');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to create a tab-delimited file named &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix4.csv&quot; target=&quot;_blank&quot;&gt;matrix4.dat&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-xlsread-and-xlswrite&quot;&gt;Reading/writing data using &lt;code&gt;xlsread()&lt;/code&gt; and &lt;code&gt;xlswrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Once data becomes more complex than simple numeric matrices or vectors, then we need more complex MATLAB functions for IO. An example of such case, is when you have stored your information in Microsoft Excel file. For such cases, you can use &lt;code&gt;xlsread(filename)&lt;/code&gt; to read the file specified by the input argument &lt;code&gt;filename&lt;/code&gt; to this function. We will later on see some example usages of this function in homework. Similarly, you could write data into an excel file using &lt;code&gt;xlswrite()&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = {1, 2, 3 ; 4, 5, 'x' ; 7, 8, 9};
&amp;gt;&amp;gt; headers = {'First','Second','Third'};
&amp;gt;&amp;gt; xlswrite('XlsExample.xlsx',[headers; values]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
would create this &lt;a href=&quot;http:/ICP2017F/lecture/11/XlsExample.xlsx&quot; target=&quot;_blank&quot;&gt;Microsoft Excel file&lt;/a&gt; for you.&lt;/p&gt;

&lt;h4 id=&quot;readingwriting-data-using-readtable-and-writetable&quot;&gt;Reading/writing data using &lt;code&gt;readtable()&lt;/code&gt; and &lt;code&gt;writetable()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Another important and highly useful set of MATLAB functions for IO are &lt;code&gt;readtable()&lt;/code&gt; and &lt;code&gt;writetable()&lt;/code&gt;. The function &lt;code&gt;readtable()&lt;/code&gt; is used to read data into MATLAB in the form of a MATLAB table data type. For example, you could read the same Excel file that we created above into MATLAB using &lt;code&gt;readtable()&lt;/code&gt; instead of &lt;code&gt;xlsread()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; XlsTable = readtable('XlsExample.xlsx')
XlsTable = 
    First    Second    Third
    _____    ______    _____

    1        2         '3'  
    4        5         'x'  
    7        8         '9'  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reading-and-writing-image-files-using-imread-and-imwrite&quot;&gt;Reading and writing image files using &lt;code&gt;imread()&lt;/code&gt; and &lt;code&gt;imwrite()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;MATLAB has a really wide range of input/output methods of data. We have already discussed some of the most useful IO approaches in the previous sections. For graphics files however, none of the previous functions are useful. Suppose you wanted to import a &lt;strong&gt;jpg&lt;/strong&gt; or &lt;strong&gt;png&lt;/strong&gt; or some other type graphics file into MATLAB in order to further process it. For this purpose MATLAB has the built-in function &lt;code&gt;imread()&lt;/code&gt; which can read image from an input graphics file. For example, to read &lt;a href=&quot;http:/ICP2017F/lecture/11/homer.jpg&quot; target=&quot;_blank&quot;&gt;this image file&lt;/a&gt; in MATLAB, you could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; homer = imread('homer.jpg');
&amp;gt;&amp;gt; imshow(homer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to get the following figure in MATLAB,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/11/homerScreenShot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Now suppose you want to convert this figure to black-and-white and save it as a new figure. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; homerBW = rgb2gray(homer);
&amp;gt;&amp;gt; imshow(homerBW)
&amp;gt;&amp;gt; imwrite(homerBW,'homerBW.png');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to get this &lt;a href=&quot;http:/ICP2017F/lecture/11/homerBW.png&quot; target=&quot;_blank&quot;&gt;black and white version of the above image&lt;/a&gt;, now in &lt;strong&gt;png&lt;/strong&gt; format (or in any format you may wish, that is also supported by MATLAB).&lt;/p&gt;

&lt;h4 id=&quot;reading-a-file-using-importdata&quot;&gt;Reading a file using &lt;code&gt;importdata()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Probably, the most general MATLAB function for data input is &lt;code&gt;importdata()&lt;/code&gt;. This function can be used to import almost any type of data and MATLAB is capable of automatically recognizing the correct format for reading the file, based on its extension and content. For example, you could read the same image file above, using &lt;code&gt;importdata()&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newHomer = importdata('homer.jpg');
&amp;gt;&amp;gt; imshow(newHomer)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
to import it to MATLAB. At the same time, you could also use it to import data from the excel file that we created above, &lt;a href=&quot;http:/ICP2017F/lecture/11/XlsExample.xlsx&quot; target=&quot;_blank&quot;&gt;XlsExample.xlsx&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newXls = importdata('XlsExample.xlsx')
newXls = 
          data: [3x3 double]
      textdata: {3x3 cell}
    colheaders: {'First'  'Second'  'Third'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or similarly, read a csv-delimited file like &lt;a href=&quot;http:/ICP2017F/lecture/11/matrix3.csv&quot; target=&quot;_blank&quot;&gt;matrix3.csv&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newMat3 = importdata('matrix3.csv')
newMat3 =
  Columns 1 through 7
       62774      103230       77362       87168       65546       64837      100700
      104090      143080      104700      116500      108250      105400      111110
       80351      112850       89506      113890      106030       70235      110620
       99522      134130       73169      134190      117710       92878       94532
       59531      102750       91679      111350       80539       84693       96078
       58504       76982       52076       91449       80797       69246       61569
       76170      104310       93950      114860       89779      101530       87014
       91610      118380       90636      107840       91120       90247       84871
       85943      110670       73451      114410      100840      111660       77908
       82570       94427       57213       81175       79305       78718       68662
  Columns 8 through 10
       79446       78102      106570
      102950      116850      137810
      113210      108800      128700
       93013      119130      132700
       95750      100980      100450
       67044       80635       78006
       86355      103760      119710
       92649       98589      132660
       73117      109270       99401
       65283       66888      114030
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In general, you can use &lt;code&gt;importdata()&lt;/code&gt; to read MATLAB binary files (MAT-files), ASCII files and Spreadsheets, as well as images and audio files.&lt;/p&gt;

&lt;h4 id=&quot;reading-a-file-using-fgetl&quot;&gt;Reading a file using &lt;code&gt;fgetl()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Another useful MATLAB function for reading the content of a file is &lt;code&gt;fgetl()&lt;/code&gt; which can read a file line by line, removing the new line characters &lt;code&gt;\n&lt;/code&gt; from the end of each line. The entire line is read as a string. For example, consider &lt;a href=&quot;http:/ICP2017F/lecture/11/text.txt&quot; target=&quot;_blank&quot;&gt;this file&lt;/a&gt;. One could read the content of this text file using the function &lt;code&gt;fgetl()&lt;/code&gt; like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fid = fopen('text.txt');
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
The main benefit of using a weakly-typed language is the ability to do rapid prototyping. The number of lines of code required to declare and use a dynamically allocated array in C (and properly clean up after its use) are much greater than the number of lines required for the same process in MATLAB.
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
     ''
&amp;gt;&amp;gt; line = fgetl(fid)  % read line excluding newline character
line =
Weak typing is also good for code-reuse. You can code a scalar algorithm in MATLAB and with relatively little effort modify it to work on arrays as well as scalars. The fact that MATLAB is a scripted instead of a compiled language also contributes to rapid prototyping.
&amp;gt;&amp;gt; fclose(fid);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reading-data-from-web-using-webread&quot;&gt;Reading data from web using &lt;code&gt;webread()&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In today’s world, it often happens that the data you need for your research is already stored somewhere on the world-wide-web. For such cases MATLAB has built-in methods and functions to read and import data or even a webpage. For example, consider &lt;a href=&quot;https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/triggers.txt&quot; target=&quot;_blank&quot;&gt;this page&lt;/a&gt; on this course’s website. It is indeed a text file containing a set of IDs for some astrophysical events. Suppose, you needed to read and store these IDs locally on your own device. You could simply try the following code in MATLAB to fetch all of the table’s information in a single string via,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = webread('https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/triggers.txt')
webContent =
    '00745966
     00745090
     00745022
     00744791
     00741528
     00741220
     00739517
     00737438
     ...
     00100319'
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now if we wanted to get the individual IDs, we could simply use &lt;code&gt;strplit()&lt;/code&gt; function to split the IDs at the line break characters &lt;code&gt;'\n'&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = strsplit(webContent,'\n')
webContent =
  1×1019 cell array
  Columns 1 through 11
    {'00745966'}    {'00745090'}    {'00745022'} ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We will see more sophisticated usages of this MATLAB function in the first problem of homework 5.&lt;/p&gt;

&lt;h2 id=&quot;handling-io-errors&quot;&gt;Handling IO errors&lt;/h2&gt;

&lt;p&gt;A good code has to be able to handle exceptional situations that may occur during the code execution. These exceptions may occur during data input from either command line, terminal window, or an input file. They may also occur as a result of repeated operations on the input data, inside the code. For example, in previous homework assignments, we have learned some simple ways of handling the wrong number of input arguments, for example in Fibonacci sequence problem. This and similar measures to handle nicely the unexpected runtime errors are collectively called &lt;strong&gt;error and exception handling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple way of error handling is to write multiple if-blocks, each of which handles a special exceptional situation. That is, to let the code execute some statements, and if something goes wrong, write the program in such a way that can detect this and jump to a set of statements that handle the erroneous situation as desired.&lt;/p&gt;

&lt;p&gt;A more modern and flexible way of handling such potential errors in MATLAB is through MATLAB’s &lt;strong&gt;try/catch&lt;/strong&gt; construction. You can use a try/catch statement to execute code after your program encounters an error. try/catch statements can be useful when you Want to finish the program in another way that avoids errors (which could lead to abrupt interruption of the program), or when you want to nicely control the effects of error (for example, when a division by zero happens in your calculations), or you have a function that could take many problematic parameters or commands as input, just like the fib function we wrote in the previous homework assignments.&lt;/p&gt;

&lt;p&gt;The general syntax for try/catch statements is like the following pseudocode,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;try
  try statements (all the normal things you would want to do)...
catch exception
  catch block (things to do when the try statements go wrong) ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If an error occurs within the try block, MATLAB skips any remaining commands in the try block and executes the commands in the catch block. If no error occurs within try block, MATLAB skips the entire catch block.&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to read data from a webpage that does not exist,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; webContent = webread('https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/')
Error using readContentFromWebService (line 45)
The server returned the status 404 with message &quot;Not Found&quot; in response to the request to URL https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/.
Error in webread (line 125)
[varargout{1:nargout}] = readContentFromWebService(connection, options); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In such cases, it would be nice to control the behavior of the problem, and not allow MATLAB to end the program abruptly. We could therefore say,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; try
    webContent = webread('https://www.cdslab.orghttp:/ICP2017F/homework/5-problems/')
catch
    disp('The requested page does not exist! Gracefully exiting...')
end
The requested page does not exist! Gracefully exiting...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, the true advantage of this error handling construct would become clear to you when you use it in functions. We will see more of this in homework 5.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/11-matlab-IO&quot;&gt;Lecture 11: MATLAB - Input/Output (IO)&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on November 08, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 4: Problems - loops, IO]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/4-problems-loops-IO"/>
  <id>http:/ICP2017F/homework/4-problems-loops-IO</id>
  <published>2017-10-30T00:00:00-05:00</published>
  <updated>2017-10-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Nov 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB for-loops and while-loops as well as input/output functionalities in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; &lt;strong&gt;The while-loop implementation of a for-loop.&lt;/strong&gt; Consider the following two vectors of temperatures in Celsius degrees to Fahrenheit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Cdegrees = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40]
Fdegrees = [-20, -15, -5, 0, 10, 15, 30, 35, 40]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Our goal in this problem is to write functions that take such vectors as input and perform some actions on them. The functions take as input, a vector of temperatures just like &lt;code&gt;Cdegrees&lt;/code&gt; and &lt;code&gt;Fdegrees&lt;/code&gt; above, as well as an input string which is either &lt;code&gt;'F2C'&lt;/code&gt; or &lt;code&gt;C2F&lt;/code&gt;. Then, converts the input temperature vector from Fahrenheit to Celsius if the input string is &lt;code&gt;'F2C'&lt;/code&gt;, otherwise converts the input temperature vector from Celsius to Fahrenheit if the input string is &lt;code&gt;'C2F'&lt;/code&gt;, otherwise outputs an error message and aborts the program.&lt;/p&gt;

&lt;p&gt;(A) Write the requested function using while-loop construct (you can name the function &lt;code&gt;convertTempFor.m&lt;/code&gt;).&lt;br /&gt;
(B) Write the requested function using for-loop construct (you can name the function &lt;code&gt;convertTempWhile.m&lt;/code&gt;).&lt;br /&gt;
(C) Write the requested function using vectorization concept (you can name the function &lt;code&gt;convertTempVec.m&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here are some example calls to these functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;InVec = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40];
&amp;gt;&amp;gt; convertTempFor(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempWhile(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&amp;gt;&amp;gt; convertTempVec(InVec,'C2F')
ans =
    -4     5    14    23    32    41    50    59    68    77    86    95   104
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Use MATLAB built-in timing functions to measure the performance of three functions you wrote in question 1 above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Consider the following nested cell vector,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;List = { {'M','A','T','L','A','B'}, {' '}, {'i','s'}, {' '}, {'a'}, {' '}, {'s','t','r','a','n','g','e'}, {', '}, {'b','u','t',' '}, {'p','o','p','u','l','a','r'}, {' '}, {'p','r','o','g','r','a','m','m','i','n','g',' ','l','a','n','g','u','a','g','e'} };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Write a MATLAB script &lt;code&gt;extractLetter.m&lt;/code&gt; that uses for-loop to extract all the letters in the variable list and finally prints them all as a single string like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; extractLetter
MATLAB is a strange, but popular programming language
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;The significant impact of round-off errors in numerical computation.&lt;/strong&gt; Consider the following program,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;formatSpec = 'With %d sqrt, then %d times ^2 operations, the number %.16f becomes: %.16f \n'; % the string format for fprintf function
for n = 1:60
    r_original = 2.0;
    r = r_original;
    for i = 1:n
        r = sqrt(r);
    end
    for i = 1:n
        r = r^2;
    end
    fprintf(formatSpec,n,n,r_original,r);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain what this code does. Then run the code, and explain why do you see the behavior observed. In particular, why do you not recover the original value $2.0$ after many repetitions of the same forward and reverse task of taking square root and squaring the result?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Consider the following code,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;eps = 1.0;
while 1.0 ~= 1.0 + eps
    disp(num2str(eps));
    eps = eps / 2.0;
end
disp(['final eps:', num2str(eps)]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Explain what the code is doing. Run the code and observe the output. How could &lt;code&gt;1.0 ~= 1.0 + eps&lt;/code&gt; be &lt;code&gt;false&lt;/code&gt;?!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function named &lt;code&gt;getLargestPrime&lt;/code&gt; that does so, using for-loop, break, and MATLAB’s intrinsic function isprime(). Here is a test,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getLargestPrime(123)
ans =
   113
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Consider the problem number 5 in HW 3, where we wrote a &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot;&gt;function&lt;/a&gt; named &lt;code&gt;fib.m&lt;/code&gt; that used the idea of recursive functions to generate the Fibonacci numbers.&lt;/p&gt;

&lt;p&gt;(A) Download &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot; target=&quot;_blank&quot;&gt;this function fib()&lt;/a&gt; and modify it using MATLAB &lt;code&gt;timeit()&lt;/code&gt; function such that it also returns the average runtime of &lt;code&gt;getFib()&lt;/code&gt; nested function inside &lt;code&gt;fib()&lt;/code&gt;, right after giving the requested Fibonacci number. For example, here is an output from such modified code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: 10
	fib(10) = 55
	average runtime: 1.0083e-05 seconds
Please enter a non-negative integer or type stop: 15
	fib(15) = 610
	average runtime: 8.8884e-05 seconds
Please enter a non-negative integer or type stop: 20
	fib(20) = 6765
	average runtime: 0.00095559 seconds
Please enter a non-negative integer or type stop: 25
	fib(25) = 75025
	average runtime: 0.010311 seconds
Please enter a non-negative integer or type stop: 30
	fib(30) = 832040
	average runtime: 0.11575 seconds
Please enter a non-negative integer or type stop: 35
	fib(35) = 9227465
	average runtime: 1.2904 seconds
Please enter a non-negative integer or type stop: stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(Note that you can use &lt;code&gt;char(9)&lt;/code&gt; at the beginning of your &lt;code&gt;disp()&lt;/code&gt; messages in order to add the &lt;code&gt;tab&lt;/code&gt; character at the beginning of your message, just like the above example.)&lt;/p&gt;

&lt;p&gt;(B) Now copy this function to a new MATLAB M-file named &lt;code&gt;fibLoop.m&lt;/code&gt;. Also modify the name of the function &lt;code&gt;fib()&lt;/code&gt; in this file &lt;code&gt;fibLoop()&lt;/code&gt;. Modify the nested function &lt;code&gt;getFib()&lt;/code&gt; inside of &lt;code&gt;fibLoop()&lt;/code&gt; such that instead of recursive function calls, it uses a for-loop to find the requested Fibonacci number.&lt;/p&gt;

&lt;p&gt;(C) Now time your new function &lt;code&gt;fibLoop()&lt;/code&gt; for the same input integers as in the above example: $10,15,20,25,30,35$. How do the runtimes for &lt;code&gt;fibLoop()&lt;/code&gt; compare with &lt;code&gt;fib()&lt;/code&gt;. Which function is faster and more efficient: &lt;code&gt;fib()&lt;/code&gt; or &lt;code&gt;fibLoop()&lt;/code&gt;? Why is there such huge difference in the performance of the two functions?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;(A)&lt;/strong&gt; Write two new MATLAB functions &lt;code&gt;timeFib(n)&lt;/code&gt; and &lt;code&gt;timeFibLoop(n)&lt;/code&gt; based on your MATLAB functions &lt;code&gt;fib()&lt;/code&gt; and &lt;code&gt;fibLoop()&lt;/code&gt; that you wrote in problem 6, such that both take an integer and output a structure whose fields are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;output.n
output.fib
output.runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that the function should take as input only an integer variable, so you need to modify your old codes to only check whether the input &lt;code&gt;~ischar()&lt;/code&gt;, and &lt;code&gt;isreal()&lt;/code&gt; and &lt;code&gt;n&amp;gt;=0&lt;/code&gt; and &lt;code&gt;round(n)==n&lt;/code&gt;. Here is an example output from the two functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeFib(20)
ans = 
          n: 20
        fib: 6765
    runtime: 9.6568e-04
&amp;gt;&amp;gt; timeFib('amir')
Error using timeFib (line 8)
The input argument is not a non-negative integer! 
&amp;gt;&amp;gt; timeFibLoop(20)
ans = 
          n: 20
        fib: 6765
    runtime: 4.4076e-06
&amp;gt;&amp;gt; timeFibLoop('amir')
Error using timeFibLoop (line 8)
The input argument is not a non-negative integer! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;(B)&lt;/strong&gt; Now write a script named &lt;code&gt;writeFibResult.m&lt;/code&gt; that calls these two functions for a range of input $n={10,2,3,\ldots,35}$ values, and then write the output of these two functions in a formatted way in two files like these &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibOutput.txt&quot; target=&quot;_blank&quot;&gt;fibOutput.txt&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/4-problems/fibLoopOutput.txt&quot; target=&quot;_blank&quot;&gt;fibLoopOutput.txt&lt;/a&gt;. You can use any of MATLAB IO methods to create the output file with any file extension you prefer: &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;, &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.tab&lt;/code&gt;, … .&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/4-problems-loops-IO&quot;&gt;Homework 4: Problems - loops, IO&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Solutions - structures, branching and functions in MATLAB]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions"/>
  <id>http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions</id>
  <published>2017-10-30T00:00:00-05:00</published>
  <updated>2017-10-30T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;3-problems-matlab-structures-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Homework 3: Problems - structures, branching and functions in MATLAB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this homework.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework3.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus question, is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 30, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with structure types in MATLAB as well as branching and function concepts and their usage syntax. Write your MATLAB scripts with the corresponding &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 3 folder of your ICP2017F repository if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function ($\mu\in[-\infty,+\infty]$, $\sigma&amp;gt;0$) are prescribed real numbers. Write a MATLAB script for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine, also by using MATLAB’s builtin function &lt;a href=&quot;https://www.mathworks.com/help/stats/normpdf.html&quot; target=&quot;_blank&quot;&gt;normpdf($x$,$\mu$,$\sigma$)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An example implementation can be found &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getNormPDF.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; As an egg cooks, the protein molecules in the egg first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a MATLAB program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to use MATLAB’s builtin function &lt;code&gt;log()&lt;/code&gt;, and the predefined variable &lt;code&gt;pi&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An example implementation can be found &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/protein.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Converting polar and Cartesian vector representations using functions and structures.&lt;/strong&gt; A vector is a mathematical quantity that has both magnitude and direction. A 2-dimensional vector can be represented as a displacement along $x$ and $y$ axes in rectangular (Cartesian) coordinates or, by a distance $r$ and an angle $\phi$ in polar coordinates,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/3-problems/vector.png&quot; height=&quot;400&quot; width=&quot;400&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conversion rule between the Cartesian and Polar representations of a vector.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The relationships between the Cartesian $(x,y)$ and polar $(r,\phi)$ coordinates are given by the following equations,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    x &amp;= r\cos(\phi) \\
    y &amp;= r\sin(\phi) \\
    r &amp;= \sqrt{x^2 + y^2} \\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt; that takes a structure &lt;code&gt;inputCartesianStruct&lt;/code&gt; as input, that has two components &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Then on output, it returns another structure that has to components &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. Write another function &lt;code&gt;getCart(inputPolarStruct)&lt;/code&gt; that does the inverse of &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt;. Make sure that both functions are robust to wrong input structures by checking whether the input structures have the required fields: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, or &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. You can do so by using MATLAB’s builtin function &lt;code&gt;isfield()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getPolar.m&quot; target=&quot;_blank&quot;&gt;getPolar.m&lt;/a&gt; and &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getCart.m&quot; target=&quot;_blank&quot;&gt;getCart.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Calculating the size of a directory&lt;/strong&gt; The MATLAB function &lt;code&gt;dir&lt;/code&gt; returns the contents of a specified directory. It returns the result in the form of an structure array with four fields, for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = dir
s = 
123x1 struct array with fields:
    name
    date
    bytes
    isdir
    datenum
&amp;gt;&amp;gt; size(s)
ans =
   123     1
&amp;gt;&amp;gt; fieldnames(s)
ans = 
    'name'
    'date'
    'bytes'
    'isdir'
    'datenum'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where here, the directory contains 123 objects. Write a MATLAB function that takes the path to a directory and outputs the total size of all files in the directory in units of bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getBytes.m&quot; target=&quot;_blank&quot;&gt;getBytes.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n$th number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: -123
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: a
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: amir
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: -12.3
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 0
fib(0) = 0
Please enter a non-negative integer or type stop: 1
fib(1) = 1
Please enter a non-negative integer or type stop: 2
fib(2) = 1
Please enter a non-negative integer or type stop: 3
fib(3) = 2
Please enter a non-negative integer or type stop: 4
fib(4) = 3
Please enter a non-negative integer or type stop: 5
fib(5) = 5
Please enter a non-negative integer or type stop: 6
fib(6) = 8
Please enter a non-negative integer or type stop: 7
fib(7) = 13
Please enter a non-negative integer or type stop: 8
fib(8) = 21
Please enter a non-negative integer or type stop: 9
fib(9) = 34
Please enter a non-negative integer or type stop: 10
fib(10) = 55
Please enter a non-negative integer or type stop: 11
fib(11) = 89
Please enter a non-negative integer or type stop: 12
fib(12) = 144
Please enter a non-negative integer or type stop: 22
fib(22) = 17711
Please enter a non-negative integer or type stop: 32
fib(32) = 2178309
Please enter a non-negative integer or type stop: stop
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;getFib(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a &lt;em&gt;strictly&lt;/em&gt; non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another MATLAB function &lt;code&gt;fib()&lt;/code&gt;&lt;/strong&gt; that asks the user to input a number (which could be potentially anything: a string, a real number, a complex number, or an integer). You can do this using MATLAB’s builtin function &lt;code&gt;input()&lt;/code&gt;. Read the input value as a &lt;code&gt;string&lt;/code&gt; using this MATLAB function. Then check if the user’s input string is equivalent to &lt;strong&gt;‘stop’&lt;/strong&gt; or not. If it is ‘stop’, then the program must return, otherwise, use &lt;code&gt;str2double()&lt;/code&gt; to convert this string to MATLAB numeric type. Then check is the numeric-converted input value is real number (as opposed to complex number) via MATLAB’s function &lt;code&gt;isreal()&lt;/code&gt;. If the value is real, then check if it is a non-negative real number. Also check if it is an &lt;strong&gt;integer&lt;/strong&gt; by comparing the value with its rounded value using MATLAB’s function &lt;code&gt;round()&lt;/code&gt;. Thus is the user-input number is really a non-negative integer, then your code should display the result message as given in the above output (by calling your nested function &lt;code&gt;getFib(n_int)&lt;/code&gt;), and then call this function &lt;code&gt;fib&lt;/code&gt; to ask the user to input another number again, to repeat this procedure. If the user-input number is not a non-negative integer, then your code should display the requested message above, and call the function &lt;code&gt;fib&lt;/code&gt; again to ask the user for another input.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/fib.m&quot; target=&quot;_blank&quot;&gt;fib.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1 \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;getTriangleArea(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/getTriangleArea.m&quot; target=&quot;_blank&quot;&gt;getTriangleArea.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;isPrime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prime_number&quot; target=&quot;_blank&quot;&gt;Prime number&lt;/a&gt; or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use a &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using &lt;strong&gt;recursive function&lt;/strong&gt; concept. You can verify the accuracy of your MATLAB script via by checking its output against MATLAB’s builtin function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/isPrime.m&quot; target=&quot;_blank&quot;&gt;isPrime.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;Function generators.&lt;/strong&gt; Write a nested function that evaluates a polynomial of the form $y = ax^2+bx+c$. The host function &lt;code&gt;genFunc()&lt;/code&gt; should be able to take varying number of arguments using &lt;code&gt;varargin&lt;/code&gt; with maximum of 3 arguments (&lt;code&gt;a,b,c&lt;/code&gt;) to initialize the coefficients of the polynomial. If there is only one argument, then &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; must be set to zero. If there are two input arguments, then &lt;code&gt;c&lt;/code&gt; is set to zero. If none are given on input, then the returned function should be zero. If more than 3 arguments exist, then the function should display an error and stop. Also, if the input arguments are not real numbers, then the function should return and error and stop.&lt;/p&gt;

&lt;p&gt;On output, the host function should create and return a function handle for the nested function &lt;code&gt;evalFunc()&lt;/code&gt;. The nested function should calculate a value of $y$ for a given value of $x$, using the values of $a$, $b$, and $c$ stored in the host function. This is called a &lt;strong&gt;function generator&lt;/strong&gt;, since the host function generates and outputs another function that can be called and used later on in the program. Once you create your function generator, test it in the following way: Call &lt;code&gt;genFunc(1,2,0)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h1&lt;/code&gt;. Call &lt;code&gt;genFunc(1,2)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h2&lt;/code&gt;. Then these two function handles, should give the same result, given the same input &lt;code&gt;x&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example implementation of &lt;a href=&quot;http:/ICP2017F/homework/3-solutions/genFunc.m&quot; target=&quot;_blank&quot;&gt;genFunc.m&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/3-solutions-matlab-structures-branching-functions&quot;&gt;Homework 3: Solutions - structures, branching and functions in MATLAB&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 10: MATLAB - loops and vectorization]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/10-matlab-loops-vectorization"/>
  <id>http:/ICP2017F/lecture/10-matlab-loops-vectorization</id>
  <published>2017-10-27T00:00:00-05:00</published>
  <updated>2017-10-27T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains the concept of for-loops and while-loops in MATLAB and different of types of it in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/GvIYiE59YgE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/h2sYfv4DRd8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/kNH9iZAI9CU&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/jed9DCFzXTc&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops-in-matlab&quot;&gt;Loops in MATLAB&lt;/h2&gt;

&lt;p&gt;Many programming algorithms require iteration, that is, the repetitive execution of a block of program statements. Similar to other programming languages, MATLAB also has built-in tools for iterative tasks in codes.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For-loop&lt;/h3&gt;

&lt;p&gt;The for-loop is among the most useful MATLAB constructs. The general syntax of for-loop is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for variable = expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Usually, &lt;code&gt;expression&lt;/code&gt; is a vector of the form &lt;code&gt;istart:stepSize:iend&lt;/code&gt; where &lt;code&gt;fix((iend-istart)/stepSize+1)&lt;/code&gt; gives the number of iterations requested by the user, assuming &lt;code&gt;iend&amp;gt;istart&lt;/code&gt;. The &lt;code&gt;statements&lt;/code&gt; are the set of programming tasks that have to be repeated. For example consider a script named &lt;code&gt;forLoop.m&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for index = istart:stepSize:iend
    disp(index);
end
disp( [ 'number of iterations: ', num2str( fix((iend-istart)/stepSize+1) ) ] );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = -2;
iend = 10;
stepSize = 3;
forLoop
    -2
     1
     4
     7
    10
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also iterate in reverse order,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = 10;
iend = -2;
stepSize = -3;
forLoop
    10
     7
     4
     1
    -2
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;breaking-a-for-loop-immaturely&quot;&gt;Breaking a for-loop immaturely&lt;/h4&gt;

&lt;p&gt;You can also use &lt;code&gt;break&lt;/code&gt; inside a for-loop to get out of it, even before the for-loop finishes the full number of iterations. This is specially useful when you want to ensure if a condition has happened, and if so, then terminate the for-loop. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    disp(integer)
    if (integer==5)
        break
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 1
 2
 3
 4
 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function that does so, using for-loop, &lt;code&gt;break&lt;/code&gt;, and MATLAB’s intrinsic function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function integer = getPrime(upper)
    if (upper&amp;lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;continue-statement-within-for-loops&quot;&gt;Continue statement within for-loops&lt;/h4&gt;

&lt;p&gt;To skip the rest of the instructions in a loop and begin the next iteration, you can use a &lt;code&gt;continue&lt;/code&gt; statement. For example, the following code prints only integers that are primes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    if ~isprime(integer)
        continue
    end
    disp(['prime detected! ',num2str(integer)])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;prime detected! 2
prime detected! 3
prime detected! 5
prime detected! 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;iterating-over-vectors-matrices-and-cell-using-for-loops&quot;&gt;Iterating over vectors, matrices, and cell using for-loops&lt;/h4&gt;

&lt;p&gt;Note that the index of for-loop must not necessarily be an integer. Basically you can use the for-loop index to iterate over anything that is iterable in MATLAB. For example, consider the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1,0,2,3,7,-1];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of this script is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;double
    1
double
    0
double
    2
double
    3
double
    7
double
    -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, see what happens if we defined &lt;code&gt;a&lt;/code&gt; as a matrix,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1, 2, 3; 4, 5, 6; 7, 8, 9];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;double
    1
    4
    7
double
    2
    5
    8
double
    3
    6
    9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is happening here? The answer is that, MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Row-_and_column-major_order&quot; target=&quot;_blank&quot;&gt;column-wise programming language&lt;/a&gt;, just like Fortran, and unlike C, C++ and all of their descendants. &lt;strong&gt;MATLAB, by default, iterates over elements of row vectors&lt;/strong&gt;. Therefore, when you use a matrix as the iterator in for-loops, MATLAB considers an entire column as the index of for-loop. The same is also true for other multidimensional arrays in MATLAB, for example cell arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
    [4]
    [7]
cell
    [2]
    [5]
    [8]
cell
    [3]
    [6]
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, if you want to iterate over elements of a multidimensional matrix or array, you have to first reshape them using MATLAB’s built-in &lt;code&gt;reshape()&lt;/code&gt; function to convert them to vector format, then iterating over them. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
a = reshape(a,[1,9]);
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
cell
    [4]
cell
    [7]
cell
    [2]
cell
    [5]
cell
    [8]
cell
    [3]
cell
    [6]
cell
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;some-general-advice-on-for-loop-index&quot;&gt;Some general advice on for-loop index&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoid using $i$ and $j$ as index variables in for-loops.&lt;/strong&gt; Note that &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; have special meanings in MATLAB, as described in previous lectures. They are used to define complex numbers. Using these variable names as indices in MATLAB for-loops, would overwrite the default meaning of these variables.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid assigning a value to the index variable within the loop statements.&lt;/strong&gt; The for statement overrides any changes made to index within the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While-loop&lt;/h3&gt;

&lt;p&gt;There is another iteration construct in MATLAB, called &lt;strong&gt;while-loop&lt;/strong&gt; which has the following general syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;while expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;statements&lt;/code&gt; within the while-loop are executed as long as &lt;code&gt;expression&lt;/code&gt; is true. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = realmax();
while x&amp;gt;0
    xmin = x
    x = log(x)
end
xmin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;xmin =
1.7977e+308
x =
709.7827
xmin =
709.7827
x =
    6.5650
xmin =
    6.5650
x =
    1.8817
xmin =
    1.8817
x =
    0.6322
xmin =
    0.6322
x =
-0.4585
xmin =
    0.6322
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be used in while-loops in the same fashion as they are used in for-loops, described above. The condition is evaluated before the body is executed, so it is possible to get zero iterations. It’s often a good idea to limit the number of repetitions to avoid infinite loops (as could happen above if x is infinite). This can be done in a number of ways, but the most common is to use &lt;code&gt;break&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;n = 0;
while abs(x) &amp;gt; 1
    x = x/2;
    n = n+1;
    if n &amp;gt; 50, break, end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A break immediately jumps execution to the first statement after the loop. It’s good practice to include some diagnostic output or other indication that an abnormal loop exit has occurred once the code reach the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Write function &lt;code&gt;getFac(n)&lt;/code&gt; using while-loop, that calculates the factorial of an input number &lt;code&gt;n&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getFac(4)
4! = 24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**
```matlab
function getFac(n)
    nOrg = n;
    fac = n;
    while n &gt; 1
        n = n-1;
        fac = fac*n;
    end
    disp([num2str(nOrg),'! = ' num2str(fac)])
end
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;some-general-advice-on-while-loops&quot;&gt;Some general advice on while-loops&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If you inadvertently create an infinite loop (that is, a loop that never ends on its own), stop execution of the loop by pressing Ctrl+C.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;If the conditional expression evaluates to a matrix, MATLAB evaluates the statements only if &lt;strong&gt;all&lt;/strong&gt; elements in the matrix are true (nonzero). To execute statements if any element is true, wrap the expression in the &lt;code&gt;any()&lt;/code&gt; function.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;To exit the loop, use a &lt;code&gt;break&lt;/code&gt; statement as discussed above. To skip the rest of the instructions in the loop and begin the next iteration, use a &lt;code&gt;continue&lt;/code&gt; statement.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;When nesting a number of while statements, each while statement requires an &lt;code&gt;end&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vectorization-in-matlab&quot;&gt;Vectorization in MATLAB&lt;/h2&gt;

&lt;p&gt;Experienced programmers who are concerned with producing compact and fast code try to avoid for loops wherever possible in their MATLAB codes. There is a reason for this: for-loops and while-loops have significant overhead in interpreted languages such as MATLAB and Python.&lt;/p&gt;

&lt;p&gt;There is of course, a remedy for this inefficiency. Since MATLAB is a matrix language, many of the matrix-level operations and functions are carried out internally using compiled C, Fortran, or assembly codes and are therefore executed at near-optimum efficiency. This is true of the arithmetic operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;\&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and of relational and logical operators. However, for loops may be executed
relatively slowly—depending on what is inside the loop, MATLAB may or may not
be able to optimize the loop. One of the most important tips for producing efficient M-files is to avoid for -loops in favor of vectorized constructs, that is, to convert for-loops into equivalent vector or matrix operations. Vectorization has important benefits beyond simply increasing speed of execution. It can lead to shorter and more readable MATLAB code. Furthermore, it expresses algorithms in terms of high-level constructs that are more appropriate for high-performance computing. For example, consider the process of summation of a random vector in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; n = 5e7; x = randn(n,1);
&amp;gt;&amp;gt; tic, s = 0; for i=1:n, s = s + x(i)^2; end, toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.581945 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now doing the same thing, using array notation would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; tic, s = sum(x.^2); toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.200450 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazing! isn’t it? You get almost 3x speedup in your MATLAB code if you use vectorized computation instead of for-loops. Later on in this course, we will see that MATLAB has inherited these excellent vectorization techniques and syntax for matrix calculations from its high-performance ancestor, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
How do you vectorize the following code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;i = 0;
for t = 0:.01:10
    i = i + 1;
    y(i) = sin(t);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;t = 0:.01:10;
y = sin(t);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vectorization-of-array-operations&quot;&gt;Vectorization of array operations&lt;/h3&gt;

&lt;p&gt;Vectorization of arrays can be done through &lt;strong&gt;array operators&lt;/strong&gt;, which perform the same operation for all elements in the data set. These types of operations are useful for repetitive calculations. For example, suppose you collect the volume (V) of various cones by recording their diameter (D) and height (H). If you collect the information for just one cone, you can calculate the volume for that single cone as,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = 0.2;
&amp;gt;&amp;gt; H = 0.04;
&amp;gt;&amp;gt; V = 1/12*pi*(D^2)*H
V =
   4.1888e-04
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, suppose we collect information on 10,000 cones. The vectors &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; each contain 10,000 elements, and you want to calculate 10,000 volumes. In most programming languages (except Fortran and R which have similar vectorization capabilities to MATLAB), you need to set up a loop similar to this MATLAB code (here instead of 10000, I am using 7):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 9.0000 1.0000 17.6400 9.8596];
for n = 1:7
   V(n) = 1/12*pi*(D(n)^2)*H(n);
end
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With MATLAB, you can perform the calculation for each element of a vector with similar syntax as the scalar case,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; V = 1/12*pi*(D.^2).*H;  % Vectorized Calculation
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Placing a period (&lt;code&gt;.&lt;/code&gt;) before the operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;^&lt;/code&gt;, transforms them into array operators.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;logical-array-operations&quot;&gt;Logical array operations&lt;/h3&gt;

&lt;p&gt;MATLAB comparison operators also accept vector inputs and return vector outputs. For example, suppose while collecting data from 10,000 cones, you record several negative values for the diameter. You can determine which values in a vector are valid with the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; D &amp;gt;= 0
ans =
     0     1     1     1     0     1     1
&amp;gt;&amp;gt; class(ans)
ans =
logical
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can directly exploit the logical indexing power of MATLAB to select the valid cone volumes, &lt;code&gt;Vgood&lt;/code&gt;, for which the corresponding elements of D are nonnegative,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Vgood = V(D &amp;gt;= 0) % removing all data corresponding to negative diameters
Vgood =
    0.2618    1.3254   21.2058   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB allows you to perform a logical AND or OR on the elements of an entire vector with the functions all and any, respectively. You can throw a warning if all values of &lt;code&gt;D&lt;/code&gt; are below zero,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if all(D &amp;lt; 0) % gives no warning because not all values are negative
   warning('All values of diameter are negative.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; if (D &amp;lt; 0)
   warning('Some values of diameter are negative.')
end
Warning: Some values of diameter are negative. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB can also compare two vectors of the same size, allowing you to impose further restrictions. This code finds all the values where &lt;code&gt;V&lt;/code&gt; is nonnegative and &lt;code&gt;D&lt;/code&gt; is greater than &lt;code&gt;H&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 1.5000 1.0000 0.6400 9.8596];
&amp;gt;&amp;gt; V((V &amp;gt;= 0) &amp;amp; (D &amp;gt; H))
ans =
   21.2058   81.4640
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&amp;gt;&amp;gt; (V &amp;gt;= 0) &amp;amp; (D &amp;gt; H)
ans =
     0     0     0     1     0     1     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The resulting vector is the same size as the inputs. To aid comparison, MATLAB contains special values to denote &lt;strong&gt;overflow&lt;/strong&gt;, &lt;strong&gt;underflow&lt;/strong&gt;, and &lt;strong&gt;undefined operators&lt;/strong&gt;, such as &lt;strong&gt;inf&lt;/strong&gt; and &lt;strong&gt;nan&lt;/strong&gt;. Logical operators &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isinf.html&quot; target=&quot;_blank&quot;&gt;isinf&lt;/a&gt; and &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isnan.html&quot; target=&quot;_blank&quot;&gt;isnan&lt;/a&gt; exist to help perform logical tests for these special values. For example, it is often useful to exclude &lt;code&gt;NaN&lt;/code&gt; values from computations,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = [2 -1 0 3 NaN 2 NaN 11 4 Inf];
&amp;gt;&amp;gt; xvalid = x(~isnan(x))
xvalid =
     2    -1     0     3     2    11     4   Inf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that &lt;code&gt;Inf == Inf&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;; however, &lt;code&gt;NaN == NaN&lt;/code&gt; always returns &lt;code&gt;false&lt;/code&gt; in MATLAB.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;matrix-operations&quot;&gt;Matrix Operations&lt;/h3&gt;

&lt;p&gt;Matrix operations act according to the rules of linear algebra. These operations are most useful in vectorization if you are working with multidimensional data. Suppose you want to evaluate a function, $F$, of two variables, $x$ and $y$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x,y) = x*\exp(-x2 - y2) ~.&lt;/script&gt;

&lt;p&gt;To evaluate this function at every combination of points in the $x$ and $y$, you need to define a grid of values,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = -2:0.2:2;
&amp;gt;&amp;gt; y = -1.5:0.2:1.5;
&amp;gt;&amp;gt; [X,Y] = meshgrid(x,y);
&amp;gt;&amp;gt; F = X.*exp(-X.^2-Y.^2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Without &lt;code&gt;meshgrid()&lt;/code&gt;, you might need to write two for loops to iterate through vector combinations. The function &lt;code&gt;ndgrid()&lt;/code&gt; also creates number grids from vectors, but unlike &lt;code&gt;meshgrid()&lt;/code&gt;, it can construct grids beyond three dimensions. &lt;code&gt;meshgrid()&lt;/code&gt; can only construct 2-D and 3-D grids.&lt;/p&gt;

&lt;p&gt;The following table contains a list of MATLAB functions that are commonly used in vectorized codes,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's most-widely used vectorization functions.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Function&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are nonzero or true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if any array elements are nonzero&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cumsum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Cumulative sum&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Differences and Approximate Derivatives&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;find&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find indices and values of nonzero elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ind2sub&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Subscripts from linear index&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ipermute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inverse permute dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;logical&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert numeric values to logicals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;meshgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in 2-D and 3-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ndgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in N-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;permute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rearrange dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;prod&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Product of array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;repmat&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Repeat copies of array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Reshape array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;shiftdim&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Shift dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sort array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;squeeze&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove singleton dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sub2ind&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert subscripts to linear indices&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sum of array elements&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-is-vectorized-code-faster-than-for-loops&quot;&gt;Why is vectorized code faster than for-loops?&lt;/h3&gt;

&lt;p&gt;The reason for the speedup in vectorized has to sought in the way the memory of computer is built. The figure below represents a schematic diagram of the Central Processing Unit (CPU) of every modern computer in relationship with computer memory.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/10/cpu-memory.jpg&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The hierarchy of memory in most modern computers and its relationship with the CPU.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At the highest level of memory hierarchy, closest to the CPU, we have the CPU register. A processor register is a quickly accessible location available to a computer’s CPU. Registers usually consist of a small amount of fast storage and may be read-only or write-only. The CPU has super fast access to data stored in register. But the problem is that this memory is very small, typically on the orders of bits of information.&lt;/p&gt;

&lt;p&gt;At the second level of the hierarchy of memory, we have the CPU cache, typically comprised of three different levels L1, L2, L3, which rank from fastest to slowest respectively, in terms of CPU access. However, the faster the cache memory, the smaller it is. Therefore, L1 is the fastest of the three, but also the smallest of the three levels.&lt;/p&gt;

&lt;p&gt;CPU Caching was invented to solve a significant problem. In the early decades of computing, main memory was extremely slow and incredibly expensive — but CPUs weren’t particularly fast, either. Starting in the 1980s, the gap began to widen quickly. Microprocessor clock speeds took off, but memory access times improved far less dramatically. As this gap grew, it became increasingly clear that a new type of fast memory was needed to bridge the gap. See the figure below.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/10/CPU-DRAM.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The growing gap between the speed of DRAM memories and CPUs in time.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After CPU cache, there the Random Access Memory (RAM) which you hear the most about, when you go to buy a new computer. Typical computers contain 4-32 Gb of RAM. When you open MATLAB and create some variables, all of your data is stored on this memory. However, this memory is the slowest of all in terms of access to CPU.&lt;/p&gt;

&lt;p&gt;When you use for-loops in MATLAB to perform some specific calculations on a vector, you are asking MATLAB to go to this memory at each loop iteration to fetch an element of the loop, bring it to the CPU, perform the set of operations requested, and send it back to memory. However, the CPU is much more capable than doing a single calculation at a time. Therefore, if you could somehow tell MATLAB to fetch a bulk of elements from your vector and bring them to CPU to perform the requested operations, your code would become much faster. The way to tell MATLAB to do so, is called &lt;strong&gt;vectorization&lt;/strong&gt;. By vectorizing your code, you tell MATLAB to bring as much information as possible to the highest memory level close to CPU, in order to perform the operations on all of them simultaneously and return the result for all of them back to the memory all together. This results in much faster code, since nowadays, as the figure above shows, the bottleneck in code performance is not the CPU speed, but the memory access.&lt;/p&gt;

&lt;h2 id=&quot;measuring-the-performance-of-your-matlab-functions-and-scripts&quot;&gt;Measuring the performance of your MATLAB functions and scripts&lt;/h2&gt;

&lt;p&gt;MATLAB has several built-in methods of timing how long it takes to run a MATLAB function or script. The &lt;code&gt;timeit()&lt;/code&gt; function as well as &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;, are in particular very useful. Use the &lt;code&gt;timeit()&lt;/code&gt; function for a rigorous measurement of your function’s execution time. Use &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; to estimate time for smaller portions of code that are not complete functions.&lt;/p&gt;

&lt;p&gt;For additional details about the performance of your code, such as function call information and execution time of individual lines of code, MATLAB has more sophisticated tools such as &lt;em&gt;MATLAB® Profiler&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;timing-matlab-functions&quot;&gt;Timing MATLAB functions&lt;/h3&gt;

&lt;p&gt;To measure the time required to run a function, whether built-in or your own, you can use the &lt;code&gt;timeit()&lt;/code&gt; function. The &lt;code&gt;timeit()&lt;/code&gt; function calls the user-specified function multiple times, and returns the median of the time measurements. This function takes &lt;strong&gt;a handle to the function whose performance is to be measured&lt;/strong&gt; and returns the typical execution time, in seconds.&lt;/p&gt;

&lt;p&gt;For example, suppose that you want to measure the performance of MATLAB’s built-in function, &lt;code&gt;isprime()&lt;/code&gt; for a given input value to this function. You can compute the time to execute the function using &lt;code&gt;timeit()&lt;/code&gt; like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeit( @()isprime(10^14) ) % pass the function as a handle to timeit()
ans =
    0.0787
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that, this function &lt;code&gt;isprime()&lt;/code&gt; will have different performance given different input numbers,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; timeit( @()isprime(10^4) ) % pass the function as a handle to timeit()
ans =
   2.0402e-05
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;time-portions-of-code&quot;&gt;Time Portions of Code&lt;/h3&gt;

&lt;p&gt;To estimate how long a portion of your program takes to run or to compare the speed of different implementations of portions of your program, you can use MATLAB stopwatch timer functions: &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;. Invoking &lt;code&gt;tic&lt;/code&gt; starts the timer, and the next &lt;code&gt;toc&lt;/code&gt; reads the elapsed time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;tic
   % The program section to time. 
toc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Sometimes programs run too fast for &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt; to provide useful data. If your code is faster than &lt;strong&gt;1/10 second&lt;/strong&gt;, consider timing it while running in a loop, and then average the result to find the time for a single run of the loop.&lt;/p&gt;

&lt;h4 id=&quot;the-cputime-function-vs-tictoc-and-timeit&quot;&gt;The &lt;code&gt;cputime()&lt;/code&gt; function vs. &lt;code&gt;tic/toc&lt;/code&gt; and &lt;code&gt;timeit()&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;There is another MATLAB function that can do timing of your scripts or your functions: The &lt;code&gt;cputime()&lt;/code&gt; function measures the total CPU time and &lt;strong&gt;sums across all threads (cores) in the CPU&lt;/strong&gt;. This measurement is different from the &lt;strong&gt;wall-clock time&lt;/strong&gt; that &lt;code&gt;timeit()&lt;/code&gt; or &lt;code&gt;tic/toc&lt;/code&gt; return, and could be misleading. For example, the CPU time for the pause function is typically small, but the wall-clock time accounts for the actual time that MATLAB execution is paused. Therefore, the wall-clock time might be longer.&lt;/p&gt;

&lt;p&gt;If your function uses four processing cores equally, the CPU time could be approximately four times higher than the wall-clock time.&lt;/p&gt;

&lt;p&gt;Frequently, your best choice to measure the performance of your code is &lt;code&gt;timeit()&lt;/code&gt; or &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;. These functions return wall-clock time. Note that, unlike &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;, the &lt;code&gt;timeit()&lt;/code&gt; function calls your code multiple times, and, therefore, considers the cost of first-time calls to your functions, which are typically more time-consuming than subsequent calls.&lt;/p&gt;

&lt;h3 id=&quot;some-tips-for-measuring-performance&quot;&gt;Some tips for Measuring Performance&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Always time a &lt;strong&gt;significant enough&lt;/strong&gt; portion of code. Normally, the code that you are timing should &lt;strong&gt;take more than 1/10 second to run&lt;/strong&gt;, otherwise the timing may not be very accurate.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Put the code you are trying to time into a function instead of timing it at the command line or inside a script.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Unless you are trying to measure &lt;strong&gt;first-time cost of running your code&lt;/strong&gt;, run your code multiple times. Use the &lt;code&gt;timeit()&lt;/code&gt; function for multiple calls timing of your function.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Avoid &lt;code&gt;clear all&lt;/code&gt; when measuring performance of your MATLAB scripts. This will add additional time to wipe MATLAB workspace from all current existing variable definitions, and therefore contaminate the timing measurements of the actual code in your MATLAB scripts.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;When performing timing measurements, assign your output to a variable instead of letting it default to &lt;code&gt;ans()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/10-matlab-loops-vectorization&quot;&gt;Lecture 10: MATLAB - loops and vectorization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 3: Midterm Exam Date and Schedule]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/3-midterm-exam-schedule"/>
  <id>http:/ICP2017F/announcement/3-midterm-exam-schedule</id>
  <published>2017-10-25T00:00:00-05:00</published>
  <updated>2017-10-25T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to find out the most popular vote in class for the midterm exam and its date.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type=&quot;text/javascript&quot;,c.async=!0,c.id=n,c.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd_2BAklP6IRJLSSnZF_2FQhOsoqlzlxX39RgVUO8eiKa9A61.js&quot;].join(&quot;&quot;),a.parentNode.insertBefore(c,a))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;survey-results&quot;&gt;Survey results&lt;/h2&gt;

&lt;p&gt;A slight majority (52.87%) of the class voted for cancelling the midterm exam and redistributing its grade to homework, quiz, and the final semester project.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/3/results.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/3/numbers.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/3-midterm-exam-schedule&quot;&gt;Announcement 3: Midterm Exam Date and Schedule&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 25, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Solutions - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-solutions-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-solutions-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;3-problems-matlab-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz3.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.*&lt;/code&gt; multiplies two arrays A and B element by element and returns the result in C, if &lt;code&gt;C = A .* B&lt;/code&gt;. By contrast, the operator &lt;code&gt;*&lt;/code&gt; is understood by MATLAB as &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_multiplication&quot; target=&quot;_blank&quot;&gt;matrix multiplication (or cross product)&lt;/a&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A.*B
C =
    2     0    21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
We discussed in question 1 above, that the operator &lt;code&gt;*&lt;/code&gt; in MATLAB performs matrix multiplication. So, all you need to do is to convert the vector &lt;code&gt;B&lt;/code&gt; to a column vector using the transpose operator &lt;code&gt;'&lt;/code&gt;, in order to get the dot-product result,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A * B'
C =
    23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to &lt;code&gt;'MATLAB&lt;/code&gt;’. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an &lt;a href=&quot;http:/ICP2017F/quiz/3-solutions/testString.m&quot; target=&quot;_blank&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; testString('MATLAB')
ans =
     1
&amp;gt;&amp;gt; testString('matlab')
ans =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The MATLAB built-in function for string comparison is &lt;code&gt;strcmp()&lt;/code&gt;. This is the correct way of string comparison. The logical &lt;code&gt;==&lt;/code&gt; operator is an elemental function, meaning that it assumes the two string being compared are arrays of characters, and therefore, the output of the comparison is also an array of logical values. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; '1' == 'amir'
ans =
     0     0     0     0
&amp;gt;&amp;gt; '12' == 'amir'
Error using  == 
Matrix dimensions must agree. 
&amp;gt;&amp;gt; strcmp('1','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('12','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('amir','amir')
ans =
     1
&amp;gt;&amp;gt; 'amir' == 'amir'
ans =
     1     1     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Recall from our discussions in class that &lt;code&gt;||&lt;/code&gt; does short-circuiting, meaning that, if the first element is true, the result of the expression involving OR operator will be true regardless of the rest of the logical expression. For example, &lt;code&gt;true OR x&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; whatever logical value &lt;code&gt;x&lt;/code&gt; might have. Therefore, MATLAB has a special operator &lt;code&gt;||&lt;/code&gt; for the logical operator OR, that avoids the calculation of the rest of the logical OR expression, if it is not needed, thus, increasing the speed of your code by avoiding unnecessary logical calculations. The second difference is that,  the operator &lt;code&gt;||&lt;/code&gt; is for scalar operations, for example, the following logical operation will lead to an error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] || [true false]
Operands to the || and &amp;amp;&amp;amp; operators must be convertible to logical scalar values. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The correct operator for elemental logical OR operation is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] | [true false]
ans =
     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = (b~=0) &amp;amp;&amp;amp; (a/b&amp;gt;10.0)
x =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This way, the expression &lt;code&gt;(a/b&amp;gt;10.0)&lt;/code&gt; will not be evaluated when $b=0$, and &lt;code&gt;(b~=0)&lt;/code&gt; will be returned as the value of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t need to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Structure of arrays&lt;/em&gt; is much more efficient for storing grade data. As we discussed repeatedly in class, this is due to the fact that data is stored sequentially in computer memory. Therefore, it would be much easier for the computer to fetch data from memory when all grade data is stored in an array sequentially in memory, than when each grade is separated from the next student’s grade by their names, just as in &lt;em&gt;array of structures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x1,x2] = getRoot(a,b,c)
    d = sqrt(b^2 - 4*a*c);
    x1 = (-b + d) / (2*a);
    x2 = (-b - d) / (2*a);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [r1,r2] = getRoot(1,1,1)
r1 =
  -0.5000 + 0.8660i
r2 =
  -0.5000 - 0.8660i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = @(in) (integral(@(x) (x.^2 + in.c*x + 1),in.a,in.b));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result=getFactorial(x)
    if (x&amp;lt;=0)
        result=1;
    else
        result=x*getFactorial(x-1);
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-solutions-matlab-branching-functions&quot;&gt;Quiz 3: Solutions - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Problems - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-problems-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-problems-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to string &lt;code&gt;'MATLAB'&lt;/code&gt;. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;br /&gt;
&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t need to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-problems-matlab-branching-functions&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>

</feed>
