<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/ICP2017F/feed.xml" />
<link rel="alternate" type="text/html" href="http:/ICP2017F/" />
<updated>2017-10-23T13:10:17-05:00</updated>
<id>http:/ICP2017F/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/ICP2017F/</uri>
  <email>amir@ices.utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Lecture 10: MATLAB - loops and vectorization]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/10-matlab-loops-vectorization"/>
  <id>http:/ICP2017F/lecture/10-matlab-loops-vectorization</id>
  <published>2017-10-27T00:00:00-05:00</published>
  <updated>2017-10-27T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains the concept of for-loops and while-loops in MATLAB and different of types of it in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;!--

## Lecture Videos

This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/4Fx4ulZt0_c&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;

--&gt;

&lt;h2 id=&quot;loops-in-matlab&quot;&gt;Loops in MATLAB&lt;/h2&gt;

&lt;p&gt;Many programming algorithms require iteration, that is, the repetitive execution of a block of program statements. Similar to other programming languages, MATLAB also has built-in tools for iterative tasks in codes.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For-loop&lt;/h3&gt;

&lt;p&gt;The for-loop is among the most useful MATLAB constructs. The general syntax of for-loop is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for variable = expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Usually, &lt;code&gt;expression&lt;/code&gt; is a vector of the form &lt;code&gt;istart:stepSize:iend&lt;/code&gt; where &lt;code&gt;fix((iend-istart)/stepSize+1)&lt;/code&gt; gives the number of iterations requested by the user, assuming &lt;code&gt;iend&amp;gt;istart&lt;/code&gt;. The &lt;code&gt;statements&lt;/code&gt; are the set of programming tasks that have to be repeated. For example consider a script named &lt;code&gt;forLoop.m&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for index = istart:stepSize:iend
    disp(index);
end
disp( [ 'number of iterations: ', num2str( fix((iend-istart)/stepSize+1) ) ] );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = -2;
iend = 10;
stepSize = 3;
forLoop
    -2
     1
     4
     7
    10
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also iterate in reverse order,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; istart = 10;
iend = -2;
stepSize = -3;
forLoop
    10
     7
     4
     1
    -2
number of iterations: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;breaking-a-for-loop-immaturely&quot;&gt;Breaking a for-loop immaturely&lt;/h4&gt;

&lt;p&gt;You can also use &lt;code&gt;break&lt;/code&gt; inside a for-loop to get out of it, even before the for-loop finishes the full number of iterations. This is specially useful when you want to ensure if a condition has happened, and if so, then terminate the for-loop. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    disp(integer)
    if (integer==5)
        break
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 1
 2
 3
 4
 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
suppose you want to find the largest prime number that is smaller than a given input value by the user. Write a function that does so, using for-loop, &lt;code&gt;break&lt;/code&gt;, and MATLAB’s intrinsic function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
function integer = getPrime(upper)
    if (upper&lt;1)
        disp('input value cannot be less than 1. Goodbye!')
        return
    end
    for integer = upper:-1:1
        if isprime(integer)
            break
        end
    end
end
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;continue-statement-within-for-loops&quot;&gt;Continue statement within for-loops&lt;/h4&gt;

&lt;p&gt;To skip the rest of the instructions in a loop and begin the next iteration, you can use a &lt;code&gt;continue&lt;/code&gt; statement. For example, the following code prints only integers that are primes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;for integer = 1:10
    if ~isprime(integer)
        continue
    end
    disp(['prime detected! ',num2str(integer)])
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;prime detected! 2
prime detected! 3
prime detected! 5
prime detected! 7
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;iterating-over-vectors-matrices-and-cell-using-for-loops&quot;&gt;Iterating over vectors, matrices, and cell using for-loops&lt;/h4&gt;

&lt;p&gt;Note that the index of for-loop must not necessarily be an integer. Basically you can use the for-loop index to iterate over anything that is iterable in MATLAB. For example, consider the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1,0,2,3,7,-1];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The output of this script is,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;double
    1
double
    0
double
    2
double
    3
double
    7
double
    -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, see what happens if we defined &lt;code&gt;a&lt;/code&gt; as a matrix,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = [1, 2, 3; 4, 5, 6; 7, 8, 9];
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;double
    1
    4
    7
double
    2
    5
    8
double
    3
    6
    9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is happening here? The answer is that, MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Row-_and_column-major_order&quot; target=&quot;_blank&quot;&gt;column-wise programming language&lt;/a&gt;, just like Fortran, and unlike C, C++ and all of their descendants. &lt;strong&gt;MATLAB, by default, iterates over elements of row vectors&lt;/strong&gt;. Therefore, when you use a matrix as the iterator in for-loops, MATLAB considers an entire column as the index of for-loop. The same is also true for other multidimensional arrays in MATLAB, for example cell arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
    [4]
    [7]
cell
    [2]
    [5]
    [8]
cell
    [3]
    [6]
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, if you want to iterate over elements of a multidimensional matrix or array, you have to first reshape them using MATLAB’s built-in &lt;code&gt;reshape()&lt;/code&gt; function to convert them to vector format, then iterating over them. For exzmple,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = {1, 2, 3; 4, 5, 6; 7, 8, 9};
a = reshape(a,[1,9]);
for index = a
    disp(class(index))
    disp(index)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cell
    [1]
cell
    [4]
cell
    [7]
cell
    [2]
cell
    [5]
cell
    [8]
cell
    [3]
cell
    [6]
cell
    [9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;some-general-advice-on-for-loop-index&quot;&gt;Some general advice on for-loop index&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoid using $i$ and $j$ as index variables in for-loops.&lt;/strong&gt; Note that &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; have special meanings in MATLAB, as described in previous lectures. They are used to define complex numbers. Using these variable names as indices in MATLAB for-loops, would overwrite the default meaning of these variables.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid assigning a value to the index variable within the loop statements.&lt;/strong&gt; The for statement overrides any changes made to index within the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While-loop&lt;/h3&gt;

&lt;p&gt;There is another iteration construct in MATLAB, called &lt;strong&gt;while-loop&lt;/strong&gt; which has the following general syntax,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;while expression
    statements
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;statements&lt;/code&gt; within the while-loop are executed as long as &lt;code&gt;expression&lt;/code&gt; is true. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = realmax();
while x&amp;gt;0
    xmin = x
    x = log(x)
end
xmin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;xmin =
1.7977e+308
x =
709.7827
xmin =
709.7827
x =
    6.5650
xmin =
    6.5650
x =
    1.8817
xmin =
    1.8817
x =
    0.6322
xmin =
    0.6322
x =
-0.4585
xmin =
    0.6322
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; can be used in while-loops in the same fashion as they are used in for-loops, described above. The condition is evaluated before the body is executed, so it is possible to get zero iterations. It’s often a good idea to limit the number of repetitions to avoid infinite loops (as could happen above if x is infinite). This can be done in a number of ways, but the most common is to use &lt;code&gt;break&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;n = 0;
while abs(x) &amp;gt; 1
    x = x/2;
    n = n+1;
    if n &amp;gt; 50, break, end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A break immediately jumps execution to the first statement after the loop. It’s good practice to include some diagnostic output or other indication that an abnormal loop exit has occurred once the code reach the &lt;code&gt;break&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Write function &lt;code&gt;getFac(n)&lt;/code&gt; using while-loop, that calculates the factorial of an input number &lt;code&gt;n&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getFac(4)
4! = 24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--  
**Answer:**
```matlab
function getFac(n)
    nOrg = n;
    fac = n;
    while n &gt; 1
        n = n-1;
        fac = fac*n;
    end
    disp([num2str(nOrg),'! = ' num2str(fac)])
end
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;some-general-advice-on-while-loops&quot;&gt;Some general advice on while-loops&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If you inadvertently create an infinite loop (that is, a loop that never ends on its own), stop execution of the loop by pressing Ctrl+C.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;If the conditional expression evaluates to a matrix, MATLAB evaluates the statements only if &lt;strong&gt;all&lt;/strong&gt; elements in the matrix are true (nonzero). To execute statements if any element is true, wrap the expression in the &lt;code&gt;any()&lt;/code&gt; function.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;To exit the loop, use a &lt;code&gt;break&lt;/code&gt; statement as discussed above. To skip the rest of the instructions in the loop and begin the next iteration, use a &lt;code&gt;continue&lt;/code&gt; statement.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;When nesting a number of while statements, each while statement requires an &lt;code&gt;end&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vectorization-in-matlab&quot;&gt;Vectorization in MATLAB&lt;/h2&gt;

&lt;p&gt;Experienced programmers who are concerned with producing compact and fast code try to avoid for loops wherever possible in their MATLAB codes. There is a reason for this: for-loops and while-loops have significant overhead in interpreted languages such as MATLAB and Python.&lt;/p&gt;

&lt;p&gt;There is of course, a remedy for this inefficiency. Since MATLAB is a matrix language, many of the matrix-level operations and functions are carried out internally using compiled C, Fortran, or assembly codes and are therefore executed at near-optimum efficiency. This is true of the arithmetic operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;\&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and of relational and logical operators. However, for loops may be executed
relatively slowly—depending on what is inside the loop, MATLAB may or may not
be able to optimize the loop. One of the most important tips for producing efficient M-files is to avoid for -loops in favor of vectorized constructs, that is, to convert for-loops into equivalent vector or matrix operations. Vectorization has important benefits beyond simply increasing speed of execution. It can lead to shorter and more readable MATLAB code. Furthermore, it expresses algorithms in terms of high-level constructs that are more appropriate for high-performance computing. For example, consider the process of summation of a random vector in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; n = 5e7; x = randn(n,1);
&amp;gt;&amp;gt; tic, s = 0; for i=1:n, s = s + x(i)^2; end, toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.581945 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now doing the same thing, using array notation would yield,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; tic, s = sum(x.^2); toc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Elapsed time is 0.200450 seconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Amazing! isn’t it? You get almost 3x speedup in your MATLAB code f you use vectorized computation instead of fol-loops. Later on in this course, we will see that MATLAB has inherited these vectorization excellent techniques and syntax for matrix calculations, from its high-performance ancestor, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
How do you vectorize the following code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;i = 0;
for t = 0:.01:10
    i = i + 1;
    y(i) = sin(t);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
t = 0:.01:10;
y = sin(t);
```
&lt;br&gt;
--&gt;

&lt;h3 id=&quot;vectorization-of-array-operations&quot;&gt;Vectorization of array operations&lt;/h3&gt;

&lt;p&gt;Vectorization of arrays can be done through &lt;strong&gt;array operators&lt;/strong&gt;, which perform the same operation for all elements in the data set. These types of operations are useful for repetitive calculations. For example, suppose you collect the volume (V) of various cones by recording their diameter (D) and height (H). If you collect the information for just one cone, you can calculate the volume for that single cone as,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = 0.2;
&amp;gt;&amp;gt; H = 0.04;
&amp;gt;&amp;gt; V = 1/12*pi*(D^2)*H
V =
   4.1888e-04
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, suppose we collect information on 10,000 cones. The vectors &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; each contain 10,000 elements, and you want to calculate 10,000 volumes. In most programming languages (except Fortran and R which have similar vectorization capabilities to MATLAB), you need to set up a loop similar to this MATLAB code (here instead of 10000, I am using 7):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 9.0000 1.0000 17.6400 9.8596];
for n = 1:7
   V(n) = 1/12*pi*(D(n)^2)*H(n);
end
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
With MATLAB, you can perform the calculation for each element of a vector with similar syntax as the scalar case,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; V = 1/12*pi*(D.^2).*H;  % Vectorized Calculation
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Placing a period (&lt;code&gt;.&lt;/code&gt;) before the operators &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;^&lt;/code&gt;, transforms them into array operators.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;logical-array-operations&quot;&gt;Logical array operations&lt;/h3&gt;

&lt;p&gt;MATLAB comparison operators also accept vector inputs and return vector outputs. For example, suppose while collecting data from 10,000 cones, you record several negative values for the diameter. You can determine which values in a vector are valid with the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; D &amp;gt;= 0
ans =
     0     1     1     1     0     1     1
&amp;gt;&amp;gt; class(ans)
ans =
logical
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can directly exploit the logical indexing power of MATLAB to select the valid cone volumes, &lt;code&gt;Vgood&lt;/code&gt;, for which the corresponding elements of D are nonnegative,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Vgood = V(D &amp;gt;= 0) % removing all data corresponding to negative diameters
Vgood =
    0.2618    1.3254   21.2058   81.4640   25.4500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB allows you to perform a logical AND or OR on the elements of an entire vector with the functions all and any, respectively. You can throw a warning if all values of &lt;code&gt;D&lt;/code&gt; are below zero,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if all(D &amp;lt; 0) % gives no warning because not all values are negative
   warning('All values of diameter are negative.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; if (D &amp;lt; 0)
   warning('Some values of diameter are negative.')
end
Warning: Some values of diameter are negative. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
MATLAB can also compare two vectors of the same size, allowing you to impose further restrictions. This code finds all the values where &lt;code&gt;V&lt;/code&gt; is nonnegative and &lt;code&gt;D&lt;/code&gt; is greater than &lt;code&gt;H&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; D = [-0.2 1.0 1.5 3.0 -1.0 4.2 3.14];
&amp;gt;&amp;gt; H = [0.0400 1.0000 2.2500 1.5000 1.0000 0.6400 9.8596];
&amp;gt;&amp;gt; V((V &amp;gt;= 0) &amp;amp; (D &amp;gt; H))
ans =
   21.2058   81.4640
&amp;gt;&amp;gt; V
V =
    0.0004    0.2618    1.3254   21.2058    0.2618   81.4640   25.4500
&amp;gt;&amp;gt; (V &amp;gt;= 0) &amp;amp; (D &amp;gt; H)
ans =
     0     0     0     1     0     1     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The resulting vector is the same size as the inputs. To aid comparison, MATLAB contains special values to denote &lt;strong&gt;overflow&lt;/strong&gt;, &lt;strong&gt;underflow&lt;/strong&gt;, and &lt;strong&gt;undefined operators&lt;/strong&gt;, such as &lt;strong&gt;inf&lt;/strong&gt; and &lt;strong&gt;nan&lt;/strong&gt;. Logical operators &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isinf.html&quot; target=&quot;_blank&quot;&gt;isinf&lt;/a&gt; and &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/isnan.html&quot; target=&quot;_blank&quot;&gt;isnan&lt;/a&gt; exist to help perform logical tests for these special values. For example, it is often useful to exclude &lt;code&gt;NaN&lt;/code&gt; values from computations,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = [2 -1 0 3 NaN 2 NaN 11 4 Inf];
&amp;gt;&amp;gt; xvalid = x(~isnan(x))
xvalid =
     2    -1     0     3     2    11     4   Inf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;NOTE&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Note that &lt;code&gt;Inf == Inf&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;; however, &lt;code&gt;NaN == NaN&lt;/code&gt; always returns &lt;code&gt;false&lt;/code&gt; in MATLAB.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;matrix-operations&quot;&gt;Matrix Operations&lt;/h3&gt;

&lt;p&gt;Matrix operations act according to the rules of linear algebra. These operations are most useful in vectorization if you are working with multidimensional data. Suppose you want to evaluate a function, $F$, of two variables, $x$ and $y$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(x,y) = x*\exp(-x2 - y2) ~.&lt;/script&gt;

&lt;p&gt;To evaluate this function at every combination of points in the $x$ and $y$, you need to define a grid of values,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = -2:0.2:2;
&amp;gt;&amp;gt; y = -1.5:0.2:1.5;
&amp;gt;&amp;gt; [X,Y] = meshgrid(x,y);
&amp;gt;&amp;gt; F = X.*exp(-X.^2-Y.^2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Without &lt;code&gt;meshgrid()&lt;/code&gt;, you might need to write two for loops to iterate through vector combinations. The function &lt;code&gt;ndgrid()&lt;/code&gt; also creates number grids from vectors, but unlike &lt;code&gt;meshgrid()&lt;/code&gt;, it can construct grids beyond three dimensions. &lt;code&gt;meshgrid()&lt;/code&gt; can only construct 2-D and 3-D grids.&lt;/p&gt;

&lt;p&gt;The following table contains a list of MATLAB functions that are commonly used in vectorized codes,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's most-widely used vectorization functions.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Function&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are nonzero or true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if any array elements are nonzero&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cumsum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Cumulative sum&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Differences and Approximate Derivatives&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;find&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find indices and values of nonzero elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ind2sub&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Subscripts from linear index&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ipermute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Inverse permute dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;logical&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert numeric values to logicals&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;meshgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in 2-D and 3-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;ndgrid&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rectangular grid in N-D space&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;permute&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Rearrange dimensions of N-D array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;prod&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Product of array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;repmat&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Repeat copies of array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Reshape array&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;shiftdim&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Shift dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sort array elements&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;squeeze&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Remove singleton dimensions&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sub2ind&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Convert subscripts to linear indices&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Sum of array elements&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/10-matlab-loops-vectorization&quot;&gt;Lecture 10: MATLAB - loops and vectorization&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Solutions - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-solutions-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-solutions-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;3-problems-matlab-branching-functions.html&quot; target=&quot;_blank&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt;.&lt;/p&gt;

&lt;!--
The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz2.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.*&lt;/code&gt; multiplies two arrays A and B element by element and returns the result in C, if &lt;code&gt;C = A .* B&lt;/code&gt;. By contrast, the operator &lt;code&gt;*&lt;/code&gt; is understood by MATLAB as &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_multiplication&quot; target=&quot;_blank&quot;&gt;matrix multiplication (or cross product)&lt;/a&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A.*B
C =
    2     0    21
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
We discussed in question 1 above, that the operator &lt;code&gt;*&lt;/code&gt; in MATLAB performs matrix multiplication. So, all you need to do is to convert the vector &lt;code&gt;B&lt;/code&gt; to a column vector using the transpose operator &lt;code&gt;'&lt;/code&gt;, in order to get the dot-product result,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; A = [1 0 3];
&amp;gt;&amp;gt; B = [2 3 7];
&amp;gt;&amp;gt; C = A * B'
C =
    23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to &lt;code&gt;'MATLAB&lt;/code&gt;’. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Here is an &lt;a href=&quot;http:/ICP2017F/quiz/3-solutions/testString.m&quot; target=&quot;_blank&quot;&gt;implementation&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; testString('MATLAB')
ans =
     1
&amp;gt;&amp;gt; testString('matlab')
ans =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The MATLAB built-in function for string comparison is &lt;code&gt;strcmp()&lt;/code&gt;. This is the correct way of string comparison. The logical &lt;code&gt;==&lt;/code&gt; operator is an elemental function, meaning that it assumes the two string being compared are arrays of characters, and therefore, the output of the comparison is also an array of logical values. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; '1' == 'amir'
ans =
     0     0     0     0
&amp;gt;&amp;gt; '12' == 'amir'
Error using  == 
Matrix dimensions must agree. 
&amp;gt;&amp;gt; strcmp('1','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('12','amir')
ans =
     0
&amp;gt;&amp;gt; strcmp('amir','amir')
ans =
     1
&amp;gt;&amp;gt; 'amir' == 'amir'
ans =
     1     1     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Recall from our discussions in class that &lt;code&gt;||&lt;/code&gt; does short-circuiting, meaning that, if the first element is true, the result of the expression involving OR operator will be true regardless of the rest of the logical expression. For example, &lt;code&gt;true OR x&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; whatever logical value &lt;code&gt;x&lt;/code&gt; might have. Therefore, MATLAB has a special operator &lt;code&gt;||&lt;/code&gt; for the logical operator OR, that avoids the calculation of the rest of the logical OR expression, if it is not needed, thus, increasing the speed of your code by avoiding unnecessary logical calculations. The second difference is that,  the operator &lt;code&gt;||&lt;/code&gt; is for scalar operations, for example, the following logical operation will lead to an error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] || [true false]
Operands to the || and &amp;amp;&amp;amp; operators must be convertible to logical scalar values. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The correct operator for elemental logical OR operation is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [true true] | [true false]
ans =
     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = (b~=0) &amp;amp;&amp;amp; (a/b&amp;gt;10.0)
x =
     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This way, the expression &lt;code&gt;(a/b&amp;gt;10.0)&lt;/code&gt; will not be evaluated when $b=0$, and &lt;code&gt;(b~=0)&lt;/code&gt; will be returned as the value of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Structure of arrays&lt;/em&gt; is much more efficient for storing grade data. As we discussed repeatedly in class, this is due to the fact that data is stored sequentially in computer memory. Therefore, it would be much easier for the computer to fetch data from memory when all grade data is stored in an array sequentially in memory, than when each grade is separated from the next student’s grade by their names, just as in &lt;em&gt;array of structures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x1,x2] = getRoot(a,b,c)
    d = sqrt(b^2 - 4*a*c);
    x1 = (-b + d) / (2*a);
    x2 = (-b - d) / (2*a);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [r1,r2] = getRoot(1,1,1)
r1 =
  -0.5000 + 0.8660i
r2 =
  -0.5000 - 0.8660i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = @(in) (integral(@(x) (x.^2 + in.c*x + 1),in.a,in.b));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result=getFactorial(x)
    if (x&amp;lt;=0)
        result=1;
    else
        result=x*getFactorial(x-1);
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-solutions-matlab-branching-functions&quot;&gt;Quiz 3: Solutions - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 3: Problems - MATLAB branching, functions]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/3-problems-matlab-branching-functions"/>
  <id>http:/ICP2017F/quiz/3-problems-matlab-branching-functions</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz is about branching, if blocks and functions in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Describe, with an example MATLAB script, the difference between &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;.*&lt;/code&gt; operators (basically what is the role of &lt;code&gt;.&lt;/code&gt; in the later operator? (Hint: describe your answer by multiplying two matrices with each other.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; &lt;strong&gt;Vector Dot-Product&lt;/strong&gt; Vector dot-product in algebra is defined as the summation of the product of the elements of two vectors of the same size. For example,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
a &amp;= [a_1, a_2, ..., a_n] ~, \\
b &amp;= [b_1, b_2, ..., b_n] ~, \\
a . b &amp;= \sum^n_{i=1} a_i b_i
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;where $\sum$ denotes summation notation and $n$ is the number of elements of the vectors. Now, given your current knowledge of mathematical operators in MATLAB, what is the simplest way to get the result of the following dot-product of the two vectors $A$ and $B$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = [1, 0, 3] \\
B = [2, 3, 7]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (A) Write a MATLAB function named &lt;code&gt;testString&lt;/code&gt; that takes as input, a string and then checks if the input string by the user is the equivalent to string &lt;code&gt;'MATLAB'&lt;/code&gt;. If it is the correct string, then returns logical value &lt;code&gt;true&lt;/code&gt; as the function output, otherwise it returns &lt;code&gt;false&lt;/code&gt;. Provide two tests of your function which result in &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; output.&lt;br /&gt;
&lt;br /&gt;
(B) One can argue that there are two basic ways of comparing two strings in MATLAB. one is using &lt;code&gt;==&lt;/code&gt; operator, and the other is with the use of a MATLAB built-in function that we have repeatedly used in our lectures and homework. What is this function, and what is its difference with &lt;code&gt;==&lt;/code&gt; operator. If you don’t remember this function’s name, then at least you should be able to explain the major flaw with string comparison using &lt;code&gt;==&lt;/code&gt;. Explain it with an example MATLAB script.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; If you recall from the lectures, MATLAB has two operators corresponding to logical operator &lt;strong&gt;OR&lt;/strong&gt;: &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. There are two minor differences between the two if you recall from our discussions in class. One is about code efficiency, and the other relates to whether we are operating on logical &lt;em&gt;vectors&lt;/em&gt; or &lt;em&gt;scalars&lt;/em&gt;. Describe which operator improves code efficiency and why. For the second difference, you could also provide an example to describe what each operator does.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Recall that in MATLAB &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are equivalent to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true == 1
ans =
     1
&amp;gt;&amp;gt; false == 0
ans =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now knowing this, consider the following MATLAB calculation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1;
&amp;gt;&amp;gt; b = 0;
&amp;gt;&amp;gt; x = a/b&amp;gt;10.0
x =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that $1/0$ is mathematically undefined (but MATLAB by convention, assumes that $1/0\equiv\infty$). Suppose MATLAB’s default behavior is not what you would like to get, that is, you don’t want $x=1$ when $b=0$, but instead $x=0$. What would be the simplest change to the logical expression &lt;code&gt;x=a/b&amp;gt;10.0&lt;/code&gt; such that the result is $x=0$ whenever $b=0$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; &lt;strong&gt;Array of Structures vs. Structures of Arrays.&lt;/strong&gt; Suppose you would like to store information about students in a class. You create a array of structures like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 20;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).grade = 30;
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(1).name = 'foobar2';
&amp;gt;&amp;gt; AOS(1).name = 'foobar1';
&amp;gt;&amp;gt; AOS(1).grade = 90;
&amp;gt;&amp;gt; AOS(2).name = 'foobar2';
&amp;gt;&amp;gt; AOS(2).grade = 100;
&amp;gt;&amp;gt; AOS(3).name = 'foobar3';
&amp;gt;&amp;gt; AOS(3).grade = 85;
&amp;gt;&amp;gt; AOS
AOS = 
1x3 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Alternatively, you could create a structure array for the same data, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; SOA.names = {'foobar1','foobar2','foobar3'};
&amp;gt;&amp;gt; SOA.grades = [90,100,85];
&amp;gt;&amp;gt; SOA
SOA = 
     names: {'foobar1'  'foobar2'  'foobar3'}
    grades: [90 100 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Suppose you have 10000 students in your class. Which one of these representations do you think would be more computationally efficient to represent the student data, in order to calculate the average grade in you class? Why? (the explanation is brief, you don’t to write a paragraph.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a function &lt;code&gt;getRoot()&lt;/code&gt; that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and outputs the roots of this equation as the function output result.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Write a MATLAB anonymous function that calculates the following integral, for arbitrary input integration limits $[a,b]$ and coefficient $c$,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b,c) = \int^b_a \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;Write your function such that it takes the three variables collectively as a structure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. &lt;/strong&gt; Write a function &lt;code&gt;getFac()&lt;/code&gt; that calculates the factorial of an input integer $n$ (no need for robust coding, assume the input variable is indeed a positive integer).&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/3-problems-matlab-branching-functions&quot;&gt;Quiz 3: Problems - MATLAB branching, functions&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 2: Course Progress Evaluation]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/announcement/2-course-progress-evaluation"/>
  <id>http:/ICP2017F/announcement/2-course-progress-evaluation</id>
  <published>2017-10-23T00:00:00-05:00</published>
  <updated>2017-10-23T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your progress so far in this class, and to make improvements for the rest of the semester, if needed. I rely on your answers and comments to plan for the rest of the semester, so your accurate response and time is appreciated.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
    &lt;script&gt;
        (function(t,e,s,n){var o,a,c;t.SMCX=t.SMCX||[],e.getElementById(n)||(o=e.getElementsByTagName(s),a=o[o.length-1],c=e.createElement(s),c.type=&quot;text/javascript&quot;,c.async=!0,c.id=n,c.src=[&quot;https:&quot;===location.protocol?&quot;https://&quot;:&quot;http://&quot;,&quot;widget.surveymonkey.com/collect/website/js/tRaiETqnLgj758hTBazgd7kUVH_2BT6kl87P5KEhCQYsiCC8k14kAlx5SRs_2BEZLQT4.js&quot;].join(&quot;&quot;),a.parentNode.insertBefore(c,a))})(window,document,&quot;script&quot;,&quot;smcx-sdk&quot;);
    &lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

## Survey results
The following are the results of the 9 questions of the survey as well as comments. The total number of respondents was 18.  

**SUMMARY:**  

- There is **significant heterogeneity** in the abilities of individuals **in this class**, such that some find this course too difficult, and some find it too easy and lame.  
&lt;br&gt;
- However, despite the great student-heterogeneity, the course-homework-quiz **speed and load are on average fair**, so far in this class.  
&lt;br&gt;
- The online **web design of the course** material is a **great aid to students' learning** in this class.  
&lt;br&gt;
- The entire class unanimously prefer **a Python project instead of final exam**.  
&lt;br&gt;
- **one-hour per week** is **not enough** for this course.  

&lt;br&gt;

---
---

&lt;br&gt;


&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q1.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q2.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q3.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q4.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q5.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q6.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q7.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q8.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/announcement/2/q9.PNG&quot; width=&quot;700&quot;&gt;
&lt;/figure&gt;

&lt;br&gt;
**Comments:**  

Just a bit slow. I would like to just stop babying people, it's homework, things should be done by the time we get here or else we're just debugging problems here.  
2/22/2017 9:06 AM

Please end the class on time! I have class at 10 AM sharp and must leave no later than 9:50.  
2/22/2017 9:02 AM

At this point, assignments with Python are needed to start improving upon programming and computation based skills, since I feel like not much has been accomplished in the class. The most useful yet easiest change would be to publish the lectures ahead of time, so I have a better idea of what the next class will be over.  
2/22/2017 1:38 AM

I would really love class time to be spent exclusively on python and the jupyter environment. I really dislike the use of Git for this class, and I feel it detracts from our learning of the real material. I wish we could just submit our stuff to you via canvas or some other means. I feel like we haven't adequately covered github, and yet just about all classtime thus far has been dedicated to it. I was hoping for this class to teach me python but I honestly feel bogged down by github and the means of submission- I feel we are spending time on the wrong thing. I think github has a time and place, but I don't feel that it is appropriate for this class. Overall though, I think you are doing an excellent job teaching and I look forward to learning more with you.  
2/22/2017 1:26 AM

I am impressed with how much I have been able to get out of a 1 hour course so far.  
2/21/2017 11:20 PM

Not your fault, but simply 1 hour a week of lecture time is not enough.  
2/21/2017 10:17 PM

Homework instructions are very clear but I'm confused on the way to present the outputs.  
2/21/2017 9:20 PM

I only wish this course was more like a real computing course instead of a 1hr lab. It would be a lot more useful if we could meet 2x a week and had more 1-on-1 time.  
2/21/2017 7:00 PM

Love the course so far. Learning so much. The grades worry me though - there needs to be a clearer understanding of what's going to be on a quiz and the homeworks need to be a little more well defined. The first two quizzes and first homework were rough but quiz 3 and homework 2 already got so much better. Thanks so much!  
2/21/2017 6:38 PM

Ask more concept based questions rather than memory. Other than that, I really like this class.  
2/20/2017 11:48 PM

All the information we are supposed to get out of this course is so critical. Version Control, python programming, learning linux.. it's all perfect. We just need more time. If this were a 2 or 3 hours course that would be incredible. If we met MWF 9-10, this class would be my favorite, and I would be so confident in my computer science ability.  
2/17/2017 12:34 AM

This class definitely needs more time per week than 1 hour. This is not enough time at all to give out all the information needed.   
2/16/2017 7:32 PM

--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/announcement/2-course-progress-evaluation&quot;&gt;Announcement 2: Course Progress Evaluation&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 23, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 8-9: MATLAB - functions II & III]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/8-9-matlab-functions-II-III"/>
  <id>http:/ICP2017F/lecture/8-9-matlab-functions-II-III</id>
  <published>2017-10-13T00:00:00-05:00</published>
  <updated>2017-10-13T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains the concept of functions and different of types of it in MATLAB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful link:&lt;/strong&gt; &lt;a href=&quot;https://www.mathworks.com/help/matlab/functionlist.html&quot; target=&quot;_blank&quot;&gt;Comprehensive MATLAB function list&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/4Fx4ulZt0_c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/E674aXSMHJY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;function-handles-in-matlab&quot;&gt;Function handles in MATLAB&lt;/h2&gt;

&lt;p&gt;Function Handles are variables that allow you to invoke a function indirectly. A &lt;strong&gt;function handle&lt;/strong&gt; is a &lt;strong&gt;data type&lt;/strong&gt; that &lt;strong&gt;stores an association to a function&lt;/strong&gt;. For example, you can use a function handle to construct &lt;a href=&quot;#anonymous-functions&quot;&gt;anonymous functions&lt;/a&gt; or specify &lt;a href=&quot;https://www.mathworks.com/help/matlab/creating_plots/callback-definition.html&quot; target=&quot;_blank&quot;&gt;call-back functions&lt;/a&gt;. Also, you can use a function handle to &lt;strong&gt;pass a function to another function&lt;/strong&gt;, or call local functions from outside the main function (see below).&lt;/p&gt;

&lt;p&gt;Indirectly calling a function enables you to invoke the function regardless of where you call it from. Typical uses of function handles include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pass a function to another function (often called &lt;a href=&quot;#function-functions&quot;&gt;function functions&lt;/a&gt;). For example, passing a function to integration or optimization functions as we will see later in this course, such as &lt;code&gt;integral&lt;/code&gt; and &lt;code&gt;fzero&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Construct handles to functions defined inline instead of stored in a program file (anonymous functions).&lt;/li&gt;
  &lt;li&gt;Call &lt;a href=&quot;#local-functions&quot;&gt;local functions&lt;/a&gt; from outside the main function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see if a variable, say &lt;code&gt;h&lt;/code&gt;, is a function handle using &lt;code&gt;isa(h,'function_handle')&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-function-handle&quot;&gt;Creating function handle&lt;/h3&gt;

&lt;p&gt;The general method for creating a function handle is to precede the function name with an &lt;code&gt;@&lt;/code&gt; sign. For example, if you have a function called &lt;code&gt;myfunc&lt;/code&gt;, you can create a handle named &lt;code&gt;f&lt;/code&gt; for it as follows,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = @myfunc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function out = getSq(x)
    out = x.^2;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Then you can create a function handle on MATLAB command line like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; f = @getSq;
&amp;gt;&amp;gt; a = 4;
&amp;gt;&amp;gt; b = f(a)
b =
    16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If the function does not require any inputs, then you can call the function with empty parentheses. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; h = @ones;
&amp;gt;&amp;gt; a = h()
a =
     1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you don’t add &lt;code&gt;()&lt;/code&gt; at the time of call, then simply another function handle will be created, now assigned to &lt;code&gt;a&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; h = @ones;
&amp;gt;&amp;gt; a = h
a = 
    @ones
&amp;gt;&amp;gt; class(a)
ans =
function_handle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Function handles can be passed as variables to other functions. For example, to calculate the integral of $f(x)=x^2$, as implemented in &lt;code&gt;getSq()&lt;/code&gt; above, on the range $[0,1]$ define,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; f = @getSq; 
&amp;gt;&amp;gt; q = integral(f,0,1)
q =
    0.3333
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;arrays-of-function-handles&quot;&gt;Arrays of function handles&lt;/h3&gt;

&lt;p&gt;You can also create an array of function handles by collecting them into a cell or structure array. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fset = {@sin, @cos, @tan, @cot};
&amp;gt;&amp;gt; fset{1}(pi)
ans =
   1.2246e-16
&amp;gt;&amp;gt; fset{2}(pi)
ans =
    -1
&amp;gt;&amp;gt; fset{3}(pi)
ans =
  -1.2246e-16
&amp;gt;&amp;gt; fset{4}(pi)
ans =
  -8.1656e+15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To get general information about a function handle on MATLAB command line, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; functions(fset{4})
ans = 
    function: 'cot'
        type: 'simple'
        file: ''
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;function-types-in-matlab&quot;&gt;Function types in MATLAB&lt;/h2&gt;

&lt;p&gt;There are several types of functions in MATLAB. These include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;local functions,&lt;/li&gt;
  &lt;li&gt;nested functions,&lt;/li&gt;
  &lt;li&gt;private functions,&lt;/li&gt;
  &lt;li&gt;function functions,&lt;/li&gt;
  &lt;li&gt;anonymous functions&lt;/li&gt;
  &lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;anonymous-functions&quot;&gt;Anonymous functions&lt;/h3&gt;

&lt;p&gt;Anonymous functions allow you to create a MATLAB file without the need to put the function in a separate &lt;code&gt;.m&lt;/code&gt; file dedicated to the function. This function is associated with a variable whose data type is &lt;strong&gt;function_handle&lt;/strong&gt;. Anonymous functions can accept inputs and return outputs, just as standard functions do. However, they can &lt;strong&gt;contain only a single executable statement&lt;/strong&gt;. The concept of anonymous function is similar to &lt;a href=&quot;https://www.programiz.com/python-programming/anonymous-function&quot; target=&quot;_blank&quot;&gt;lambda functions in Python&lt;/a&gt;, if you are already familiar with this language. For example, consider the following handle to an anonymous function that finds the square of a number,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; sq = @(x) x.^2;
&amp;gt;&amp;gt; sq(2)
ans =
     4
&amp;gt;&amp;gt; sq([2,3,4])
ans =
     4     9    16
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;variables-in-the-anonymous-function-expressions&quot;&gt;Variables in the anonymous function expressions&lt;/h4&gt;

&lt;p&gt;Function handles can store not only an expression, but also variables that the expression requires for evaluation. For example, you can create a function handle to an anonymous function that requires coefficients &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1.3;
&amp;gt;&amp;gt; b = .2;
&amp;gt;&amp;gt; c = 30;
&amp;gt;&amp;gt; parabola = @(x) a*x.^2 + b*x + c;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; are available at the time you create parabola, the function handle includes those values. The values persist within the function handle even if you clear the variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; clear a b c
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = parabola(x)
y =
   31.5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
But note that in order to supply different values for the coefficients, you must create a new (e.g., redefine the) function handle,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = -3.9;
&amp;gt;&amp;gt; b = 52;
&amp;gt;&amp;gt; c = 0;
&amp;gt;&amp;gt; parabola = @(x) a*x.^2 + b*x + c;
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = parabola(x)
y =
   48.1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-nested-anonymous-functions&quot;&gt;Multiple (nested) anonymous functions&lt;/h4&gt;

&lt;p&gt;The expression in an anonymous function can include another anonymous function. This is useful for passing different parameters to a function that you are evaluating over a range of values. For example, suppose you want to solve the following equation for varying values of the variable &lt;code&gt;c&lt;/code&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(c) = \int^1_0 \big( x^2 + cx + 1 \big) \operatorname{d}x&lt;/script&gt;

&lt;p&gt;You can do so by combining two anonymous functions,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;g = @(c) (integral(@(x) (x.^2 + c*x + 1),0,1));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the steps to derive the above nested anonymous function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write the integrand as an anonymous function,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;@(x) (x.^2 + c*x + 1)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluate the function from zero to one by passing the function handle to integral,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;integral(@(x) (x.^2 + c*x + 1),0,1)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Supply the value for c by constructing an anonymous function for the entire equation,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;g = @(c) (integral(@(x) (x.^2 + c*x + 1),0,1));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final function allows you to solve the equation for any value of &lt;code&gt;c&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; g(10)
ans =
    6.3333
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;anonymous-functions-with-no-input&quot;&gt;Anonymous functions with no input&lt;/h4&gt;

&lt;p&gt;If your function does not require any inputs, use empty parentheses when you define and call the anonymous function. Otherwise, as stated above in &lt;a href=&quot;#function-handles&quot;&gt;function handles&lt;/a&gt;, you will simply create a new function handle. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; t = @() datestr(now);
&amp;gt;&amp;gt; d = t()
d =
23-May-2017 19:54:07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
and omitting the parentheses in the assignment statement creates another function handle, and does not execute the function,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = t
d = 
    @()datestr(now)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;anonymous-functions-with-multiple-inputs-or-outputs&quot;&gt;Anonymous functions with multiple inputs or outputs&lt;/h4&gt;

&lt;p&gt;Anonymous functions require that you explicitly specify the input arguments, as many as it may be, just the way you would for a standard function, separating multiple inputs with commas. For example, the following function accepts two inputs, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; myfunc = @(x,y) (x^2 + y^2 + x*y);
&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = 10;
&amp;gt;&amp;gt; z = myfunc(x,y)
z =
   111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
However, you do not explicitly define output arguments when you create an anonymous function. If the expression in the function returns multiple outputs, then you can request them when you call the function. In that case, you should enclose multiple output variables in square brackets &lt;code&gt;[]&lt;/code&gt;. For example, MATLAB’s &lt;code&gt;ndgrid&lt;/code&gt; function can return as many outputs as the number of input vectors. This anonymous function that calls &lt;code&gt;ndgrid&lt;/code&gt; can also return multiple outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;mygrid = @(x,y,c) ndgrid((-x:x/c:x),(-y:y/c:y));
[X,Y] = mygrid(pi,2*pi,10);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can use the output from &lt;code&gt;mygrid&lt;/code&gt; to create a mesh or surface plot, like the following, as we will further discuss in future lectures on plotting in MATLAB,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Z = sin(X) + cos(Y);
mesh(X,Y,Z)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/8-9/mesh.png&quot; width=&quot;800&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;arrays-of-anonymous-functions&quot;&gt;Arrays of anonymous functions&lt;/h4&gt;

&lt;p&gt;As we did above for MATLAB &lt;a href=&quot;#arrays-of-function-handles&quot;&gt;function handles&lt;/a&gt;, you can also store multiple anonymous functions in a cell array or structure array. The most common approach is to use a cell array, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = {@(x)x.^2;
     @(y)y+10;
     @(x,y)x.^2+y+10
     };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create the cell array, &lt;strong&gt;keep in mind&lt;/strong&gt; that &lt;strong&gt;MATLAB interprets spaces as column separators for the cell array&lt;/strong&gt;. Either omit spaces from expressions, as shown in the previous code, or enclose expressions in parentheses, such as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;f = {@(x) (x.^2);
     @(y) (y + 10);
     @(x,y) (x.^2 + y + 10)
     };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Access the contents of a cell using curly braces. For example, f{1} returns the first function handle. To execute the function, pass input values in parentheses after the curly braces:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = 1;
&amp;gt;&amp;gt; y = 10;
&amp;gt;&amp;gt; f{1}(x)
ans =
     1
&amp;gt;&amp;gt; f{2}(y)
ans =
    20
&amp;gt;&amp;gt; f{3}(x,y)
ans =
    21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;local-functions&quot;&gt;Local functions&lt;/h3&gt;

&lt;p&gt;MATLAB program files can contain code for more than one function. In a function file, the first function in the file is called the &lt;strong&gt;main function&lt;/strong&gt;. This function is &lt;strong&gt;visible to functions in other files&lt;/strong&gt;, or you can call it from the command line. Additional functions within the file are called &lt;strong&gt;local functions&lt;/strong&gt;, and they can occur in any order after the main function. Local functions are &lt;strong&gt;only visible to other functions in the same file&lt;/strong&gt;. They are equivalent to subroutines in other programming languages, and are &lt;strong&gt;sometimes called subfunctions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As of R2016b, you can also create local functions in a script file, as long as they all appear after the last line of script code. For more information, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/local-functions-in-scripts.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Create a function file named &lt;code&gt;mystats.m&lt;/code&gt; that takes as input a given vector of real numbers, and outputs the mean and median of the vector. The &lt;code&gt;.m&lt;/code&gt; file for this function should contain contains a main function &lt;code&gt;mystats()&lt;/code&gt;, and two local functions, &lt;code&gt;mymean&lt;/code&gt; and &lt;code&gt;mymedian&lt;/code&gt;. Test your main function using an input vector like,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; myvec = [10:3:100];
&amp;gt;&amp;gt; mystats(myvec)
ans =
    55
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
function [avg, med] = mystats(x)
    n = length(x);
    avg = mymean(x,n);
    med = mymedian(x,n);
end

function a = mymean(v,n)
    % MYMEAN Example of a local function.
    a = sum(v)/n;
end

function m = mymedian(v,n)
    % MYMEDIAN Another example of a local function.
    
    w = sort(v);
    if rem(n,2) == 1
        m = w((n + 1)/2);
    else
        m = (w(n/2) + w(n/2 + 1))/2;
    end
end
```
&lt;br&gt;
Note that you cannot call the local functions, because local functions are not visible to any other place or function in MATLAB other than `mystats()`.  
```matlab
&gt;&gt; mymean(myvec,length(myvec))
Undefined function or variable 'mymean'. 
Did you mean:
&gt;&gt; mean(myvec,length(myvec))
```
&lt;br&gt;
--&gt;

&lt;h4 id=&quot;collective-function-handle-for-all-local-functions&quot;&gt;Collective function handle for all local functions&lt;/h4&gt;

&lt;p&gt;MATLAB has a built-in function &lt;code&gt;localfunctions&lt;/code&gt; that returns a cell array of all local functions in the scope of the current function or script (i.e., in the current MATLAB file). This is very useful, when you want to write a function that returns to the main program, a list of functions local to this function. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function fh = computeEllipseVals
    fh = localfunctions;
end

function f = computeFocus(a,b)
    f = sqrt(a^2-b^2);
end

function e = computeEccentricity(a,b)
    f = computeFocus(a,b);
    e = f/a;
end

function ae = computeArea(a,b)
    ae = pi*a*b;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, if you call &lt;code&gt;computeEllipseVals&lt;/code&gt; on the command prompt, you will get a cell array to all functions local to &lt;code&gt;computeEllipseVals&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fhcell = computeEllipseVals
ans = 
    @computeFocus       
    @computeEccentricity
    @computeArea
&amp;gt;&amp;gt; fhcell{3}(1,1) % get the area of an ellipse with semi-axes (1,1).
ans =
    3.1416
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;function-functions&quot;&gt;Function functions&lt;/h3&gt;

&lt;p&gt;Function-functions are functions that operate on other functions that are passed to it as input arguments. The function that is passed to the function-function is usually referred to as &lt;em&gt;passed function&lt;/em&gt;. A simple example is MATLAB’s built-in function &lt;code&gt;fplot(func,lim)&lt;/code&gt;, which plots the given input function &lt;code&gt;func&lt;/code&gt; to it within the limit &lt;code&gt;lim&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;fplot(@sin,[-2*pi 2*pi])
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/8/sin.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;nested-functions&quot;&gt;Nested functions&lt;/h3&gt;

&lt;p&gt;Nested functions, as implicitly described by their names, are completely contained within a parent function. Any function in a program file can include a nested function. For example, consider the following simple function &lt;code&gt;nestedfunc()&lt;/code&gt; inside of its parent function &lt;code&gt;parent()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function parent
    disp('This is the parent function')
    nestedfunc
    function nestedfunc
       disp('This is the nested function')
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; parent
This is the parent function
This is the nested function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The primary difference between nested functions and other types of functions is that they can &lt;strong&gt;access and modify variables that are defined in their parent functions&lt;/strong&gt;. Therefore, nested functions can use variables that are not explicitly passed as input arguments. In a parent function, you can create a handle to a nested function that contains the data necessary to run the nested function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements for Nested Functions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Although MATLAB functions do not typically require an &lt;code&gt;end&lt;/code&gt; statement, in order to nest any function in a program file, all functions in that file &lt;strong&gt;must use an &lt;code&gt;end&lt;/code&gt; statement&lt;/strong&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;You cannot define a nested function inside any of the MATLAB program control statements, such as &lt;code&gt;if/elseif/else&lt;/code&gt;, &lt;code&gt;switch/case&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;try/catch&lt;/code&gt;.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;You must call a nested function either directly by name (without using &lt;code&gt;feval&lt;/code&gt;), or using a function handle that you created using the &lt;code&gt;@&lt;/code&gt; operator (and not &lt;code&gt;str2func&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;All of the variables in nested functions or the functions that contain them must be explicitly defined. That is, you cannot call a function or script that assigns values to variables unless those variables already exist in the function workspace.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In general, variables in one function workspace are not available to other functions. However, &lt;strong&gt;nested functions can access and modify variables in the workspaces of the functions that contain them&lt;/strong&gt;. This means that both a nested function and the parent function that contains it can modify the same variable without passing that variable as an argument. For example, in each of these functions, &lt;code&gt;main1()&lt;/code&gt; and &lt;code&gt;main2&lt;/code&gt;, both parent functions and the nested functions can access variable &lt;code&gt;x&lt;/code&gt;,&lt;br /&gt;
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main1
  x = 5;
  nestfun1
  function nestfun1 
      x = x + 1;
  end
  disp(['x = ',num2str(x)])
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main2
  nestfun2
  function nestfun2
      x = 5;
  end 
  x = x + 1;
  disp(['x = ',num2str(x)])
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main1
x = 5
&amp;gt;&amp;gt; main1()
x = 6
&amp;gt;&amp;gt; main2()
x = 6
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
When the parent function does not use a given variable, the variable remains local to the nested function. This is rather subtle and complicated. So pay attention. For example, in this function named main, the two nested functions have their own versions of &lt;code&gt;externFunc&lt;/code&gt; that cannot interact with each other, and calling &lt;code&gt;main&lt;/code&gt;, gives a syntax error in &lt;code&gt;nestedfun2&lt;/code&gt;, since &lt;code&gt;myvar&lt;/code&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main
  nestedfun1
  nestedfun2
  function nestedfun1
      myvar = 10;
      xyz = 5;
  end
  function nestedfun2
      myvar = myvar + 2;
  end
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
Undefined function or variable 'myvar'.
Error in main/nestedfun2 (line 10)
      myvar = myvar + 2;
Error in main (line 3)
  nestedfun2
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, even the slightest mention of the variable &lt;code&gt;myvar&lt;/code&gt;, like the following, makes it accessible in the scope of both main and nested functions.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function main
  nestedfun1
  nestedfun2
    
  function nestedfun1
      myvar = 10;
  end

  function nestedfun2
      myvar = myvar + 2;
  end
  disp(['myvar = ',num2str(myvar)]);
  disp(['class(myvar) = ',class(myvar)]);
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
myvar = 12
class(myvar) = double
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, if there is any other function in MATLAB path that has the same name as this variable &lt;code&gt;myvar&lt;/code&gt;, then MATLAB by default will call the function, instead of invoking the value for this variable given by the nested functions. For example if the following function is in MATLAB path,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = myvar
  result = -13;
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
then calling the same function &lt;code&gt;main&lt;/code&gt; as above would give,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; main
myvar = -13
class(myvar) = double
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
The scope of variables in MATLAB functions, especially nested functions, can become a significant source of error and confusion in your MATLAB code, if you are not careful. As a result, MATLAB’s code editor, has special syntax-highlighting features for variables that are shared between nested functions, and is very smart in automatically detecting syntax or semantic errors in your codes. So, I always recommend you to use MATLAB’s own editor and debugger. You can find more information about this issue &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/check-variable-scope-in-editor.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;private-functions&quot;&gt;Private Functions&lt;/h2&gt;

&lt;p&gt;A typical modern MATLAB contains thousands of M-files on the user’s path, all
accessible just by typing the name of the M-file. While this ease of accessing M-files is
an advantage, it can lead to clutter and clashes of names, not least due to the presence
of “helper functions” that are used by other functions but not intended to be called
directly by the user. Private functions provide an elegant way to avoid these problems.
Any functions residing in a directory called private are visible only to functions in
the parent directory. They can therefore have the same names as functions in other
directories. When MATLAB looks for a function it searches subfunctions, then private
functions (relative to the directory in which the function making the call is located),
then the current directory and the path. Hence if a private function has the same
name as a nonprivate function (even a built-in function), the private function will be
found first.&lt;/p&gt;

&lt;h3 id=&quot;recursive-functions&quot;&gt;Recursive functions&lt;/h3&gt;

&lt;p&gt;In programming, a recursive function is a function that calls itself. Recursion is needed frequently in programming, although there might be better, more efficient ways of implementing many of the simple explanatory recursion examples that you find in programming books. A prominent and sometimes more efficient alternative to &lt;strong&gt;recursive programming&lt;/strong&gt; is &lt;strong&gt;iterative methods&lt;/strong&gt; (e.g., loops and vectorization, which is the topic of the next lecture). Nontrivial examples that require recursive programming are abundant, but go beyond the scope of this course. Ask me in person and I will give you some examples from my own research.&lt;/p&gt;

&lt;p&gt;To begin, let’s write a simple function that takes in one positive integer $n$, and calculates its factorial,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n! = n \times (n-1) \times \cdots \times 1 ~.&lt;/script&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result=getFactorial(x)
    if (x&amp;lt;=0)
        result=1;
    else
        result=x*getFactorial(x-1);
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; getFactorial(3)
ans =
     6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt;&lt;br /&gt;
Consider the MATLAB intrinsic function &lt;a href=&quot;&quot;&gt;&lt;code&gt;strtok&lt;/code&gt;&lt;/a&gt;, which returns the first token (word) in a given string (sentence). Now, write a recursive MATLAB function that reverses the input sentence given by the user like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; reverseSentence('MATLAB is a rather strange but very powerful programming language')
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;language programming powerful very but strange rather a is MATLAB 
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
**Answer:**  
```matlab
function reverseSentence(string)
    % reverseSentence recursively prints the words in a string in reverse order    
    getToken(string)
    function getToken(string)
        [word, rest] = strtok(string);
        if ~isempty(rest)
            getToken(rest);
        end
        fprintf([word,' '])
    end
    fprintf('\n')
end
```
--&gt;

&lt;h2 id=&quot;matlabs-intrinsic-functions&quot;&gt;MATLAB’s intrinsic functions&lt;/h2&gt;

&lt;p&gt;You may have already notices that functions are among the most useful concepts in programming. In fact, MATLAB owes its popularity to more 10000 built-in functions that contains,  and the number is growing every year. That means we don’t need to write programs for more than 10000 important general tasks that we may need to do everyday, for example, integration, differentiation, various types of plotting, root finding and many more.&lt;/p&gt;

&lt;p&gt;A comprehensive list of MATLAB’s built-in functions is available in &lt;a href=&quot;https://www.mathworks.com/help/matlab/functionlist.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;. I recommend you to bookmark this link on your personal computer, in order to get help from it whenever you need. As reminder, the following list contains some useful MATLAB functions, some of which we also discussed in the previous sections. Search for their cool functionalities in MATLAB manual!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;doc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;func2str&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;str2func&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fplot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;feval&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fzero&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;which&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that you can use the first one (&lt;code&gt;doc&lt;/code&gt;) to view the information all the rest, even itself!&lt;/p&gt;

&lt;h2 id=&quot;scope-of-variables-in-matlab&quot;&gt;Scope of variables in MATLAB&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Variable scope&lt;/strong&gt; refers to the extent of the code in which a variable can be referenced, accessed or modified, without resulting in an access error. We have already discussed that variables inside functions are local to the functions and not visible to other functions in MATLAB.  Variables defined inside a function are called &lt;strong&gt;local variables&lt;/strong&gt;. They reside in the corresponding &lt;strong&gt;workspaces&lt;/strong&gt; of the functions. The scope of &lt;strong&gt;local variables&lt;/strong&gt; and &lt;strong&gt;dummy arguments&lt;/strong&gt; is &lt;strong&gt;limited to the function&lt;/strong&gt; (that is, to their workspace) in which they are defined. If the function contains nested functions, the code in the nested functions can access all variables defined in their parent function.&lt;/p&gt;

&lt;p&gt;Occasionally it is convenient to create variables that exist in more than one workspace including, possibly, the main workspace. This can be done using the global statement. Variables stored in the &lt;strong&gt;MATLAB workspace&lt;/strong&gt; (i.e., &lt;strong&gt;global memory&lt;/strong&gt;) are called &lt;strong&gt;global variables&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;global-vs-local-variables&quot;&gt;Global vs local variables&lt;/h3&gt;

&lt;p&gt;Frequently, we need data (variable) protection (encapsulation) provided by local variables defined inside functions. In general, &lt;strong&gt;you should always do your best to avoid using global variables everywhere in your codes as much as possible&lt;/strong&gt;. For small projects and problems, this may not be a significant issue. However, in large scale problems, the use of global variables can cause significant confusion, poor efficiency of your code, and even wrong results!&lt;/p&gt;

&lt;p&gt;Occasionally, it may be useful to access global variables from within a function, for example,  when the global variables contain large amounts of data and passing them to through the function arguments may lead to significant consumption of computer memory and time.&lt;/p&gt;

&lt;h3 id=&quot;global-variable-usage-syntax&quot;&gt;Global variable usage syntax&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;To access a global variable from within a function, one should explicitly label the variable as &lt;code&gt;global&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A global variable must be declared global before it is used the first time in a function.&lt;/li&gt;
  &lt;li&gt;Global variable declarations should be placed at the beginning of a function definition.&lt;/li&gt;
  &lt;li&gt;For making a variable global in MATLAB’s base workspace, you should also first declare it as global.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, consider the following code,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function setGlobalx(val)
    global x
    x = val;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; setGlobalx(10)
&amp;gt;&amp;gt; x
Undefined function or variable 'x'. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The problem here is that &lt;code&gt;x&lt;/code&gt; is not declared as global in MATLAB’s base workspace. To do so,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; global x
&amp;gt;&amp;gt; setGlobalx(10)
&amp;gt;&amp;gt; x
x =
    10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Exercise&lt;/strong&gt;:&lt;br /&gt;
Consider the same &lt;code&gt;reverseSentence&lt;/code&gt; function that we discussed above, but this time instead of giving it an input argument, we want to use a global variable string from MATLAB’s base workspace. How would you implement this, such that the following commands lead to the same output from the new global function?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; global globalString
&amp;gt;&amp;gt; globalString = 'MATLAB is a rather strange but very powerful programming language';
&amp;gt;&amp;gt; reverseSentenceGlobal()
language programming powerful very but strange rather a is MATLAB 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
**Answer:**  
```matlab
function reverseSentenceGlobal()
    % reverseSentence recursively prints the words in a string in reverse order
    global globalString
    getToken(globalString)
    function getToken(string)
        [word, rest] = strtok(string);
        if ~isempty(rest)
            getToken(rest);
        end
        fprintf([word,' '])
    end
    fprintf('\n')
end
```
--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;persistent-variables&quot;&gt;persistent variables&lt;/h3&gt;

&lt;p&gt;Sometimes you may need to keep a variable inside a function local, but still you want the variable to retain its value from the last call of the function in the most recent function call. This is very useful, in particular makes your code immune to pitfalls of declaring variables &lt;code&gt;global&lt;/code&gt;. The way to it is through the use of &lt;code&gt;persistent&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;When you declare a variable within a function as persistent, the variable retains its value from one function call to the next. Other local variables retain their value only during the current execution of a function. Persistent variables are equivalent to static variables in other programming languages. Like &lt;code&gt;global&lt;/code&gt; attribute inside functions, you have to declare variables using the &lt;code&gt;persistent&lt;/code&gt; keyword before you use them inside the function. For example, consider the following function that adds an input value to some older value that already exists in the function from the old calls. If it is the first function call, then simply the input value is returned.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = findSum(inputvalue)
    persistent summ
    if isempty(summ)
    summ = 0;
    end
    summ = summ + inputvalue;
    result = summ;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; findSum(10)
ans =
    10
&amp;gt;&amp;gt; findSum(10)
ans =
    20
&amp;gt;&amp;gt; findSum(10)
ans =
    30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to clean the workspace of the function from these persistent variables, either of the two following methods work,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;    clear all % dangerous! clears all objects in the MATLAB workspace.
    clear &amp;lt;functionName&amp;gt; % clears only this specific function's workspace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To prevent clearing persistent variables, lock the function file using mlock.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/variables-in-nested-and-anonymous-functions.html&quot; target=&quot;_blank&quot;&gt;Here&lt;/a&gt; are some advanced general advice by MATLAB developers on defining new variables and the scope of variables in MATLAB functions.&lt;/p&gt;

&lt;h2 id=&quot;matlab-functions-vs-matlab-scripts&quot;&gt;MATLAB functions vs. MATLAB scripts&lt;/h2&gt;

&lt;p&gt;MATLAB scripts are m-files containing MATLAB statements. MATLAB &lt;code&gt;functions&lt;/code&gt; are another type of m-file, which were comprehensively discussed above. The biggest difference between scripts and functions are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;functions can have input and output parameters. Script files can only operate on the variables that are hard-coded into their m-file.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;functions much more flexible than scripts. They are therefore more suitable for general purpose tasks, or for writing a scientific software. Scripts are useful for tasks that don’t change. They are also a way to document a specific sequence of actions, say a function call with special parameter values, that may be hard to remember.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;A script can be thought of as a keyboard macro: when you type the name of the script, all of the commands contained in it are executed just as if you had typed these commands into the command window. Thus, all variables created in the script are added to the workspace for the current session. Also, if any of the variables in the script file have the same name as the ones in your current workspace, the values of those variables in the workspace are changed by the actions in the script. This can be used to your advantage. It can also cause unwanted &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; target=&quot;_blank&quot;&gt;side-effects&lt;/a&gt;. In contrast, function variables are local to the function. (with the exception that you could declare and use global variables with explicit &lt;code&gt;global&lt;/code&gt; attribute.) The local scope of function variables gives you greater security and flexibility. To summarize, the workspace of MATLAB scripts is the base MATLAB workspace, whereas functions, have their own individual workspaces.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/8-9-matlab-functions-II-III&quot;&gt;Lecture 8-9: MATLAB - functions II & III&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 13, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 7: MATLAB - functions I]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/7-matlab-functions-I"/>
  <id>http:/ICP2017F/lecture/7-matlab-functions-I</id>
  <published>2017-10-11T00:00:00-05:00</published>
  <updated>2017-10-11T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains the concept of functions in programming, in particular in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/oKvgOGgmNIg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Functions in programming languages are self-contained modules of code that accomplish a specific task. They &lt;em&gt;usually&lt;/em&gt; (but not always) take some data as &lt;strong&gt;input&lt;/strong&gt;, &lt;strong&gt;process&lt;/strong&gt; the input data, and &lt;strong&gt;return&lt;/strong&gt; a result. Therefore, the definition of function in programming goes far beyond the mathematical definition of function. For example, programming functions can have no input or output.&lt;/p&gt;

&lt;p&gt;The main reason for writing functions is to reduce coding redundancy and increase code reuse. Once a function is written, it can be used over and over and over again. Whenever a function is needed, it can be &lt;strong&gt;called&lt;/strong&gt; from the inside of the main program or from inside of other functions.&lt;/p&gt;

&lt;p&gt;In MATLAB, like most other programming languages, &lt;strong&gt;function&lt;/strong&gt; is a collection of programming statements that can be executed whenever and wherever  requested. Both MATLAB scripts and functions allow you to reuse sequences of commands by storing them in program files. &lt;strong&gt;Scripts&lt;/strong&gt; are the simplest type of program, since they store commands exactly as you would type them at the command line. &lt;strong&gt;Functions&lt;/strong&gt; provide more flexibility, primarily because you can pass input values and return output values. The general syntax for a MATLAB function is the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [y1,...,yN] = myfunc(x1,...,xM)
    % here is the body of function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above declares a function named &lt;code&gt;myfunc&lt;/code&gt; that accepts inputs &lt;code&gt;x1,...,xM&lt;/code&gt; and returns outputs &lt;code&gt;y1,...,yN&lt;/code&gt;. This declaration statement must be the first executable line of the function. Just like MATLAB variables, valid function names begin with an alphabetic character, and can contain letters, numbers, or underscores.&lt;/p&gt;

&lt;p&gt;You can save your function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In a function file which contains only function definitions. The name of the file should match the name of the first function in the file.&lt;/li&gt;
  &lt;li&gt;In a script file which contains commands and function definitions. Functions must be at the end of the file. This may seem a bit odd to you, if you already know other programming languages, for example, Python. Script files cannot have the same name as a function in the file. &lt;strong&gt;Functions in scripts&lt;/strong&gt; are supported only in &lt;strong&gt;MATLAB R2016b or later&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Files can include multiple local functions or nested functions. For readability, use the optional &lt;code&gt;end&lt;/code&gt; keyword to indicate the end of each function in a file. The &lt;strong&gt;end keyword is required when&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Any function in the file contains a nested function.&lt;/li&gt;
  &lt;li&gt;The function is a local function within a function file, and any local function in the file uses the end keyword.&lt;/li&gt;
  &lt;li&gt;The function is a local function within a script file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, it is always good to add the &lt;code&gt;end&lt;/code&gt; keyword to all functions, for better readability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br /&gt;
Let’s write a MATLAB function that takes in a temperature value in Centigrads and converts it to Fahrenheit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [F] = c2f(C)
    F = (9.0/5)*C + 32;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;c_temp = 70.7; % The hottest place on Earth, Lut Desert in Iran 
f_temp = c2f(c_temp);
disp(['Temperature in Fahrenheit: ',num2str(f_temp)])
disp( ['The hottest place on Earth as of 2005 is in the Lut Desert in Iran at ' ...
      , num2str(70.7) ...
      , ' degrees Celsius.',char(10) ...
      , 'This corresponds to a temperature of ', num2str(159.26), ' degrees Fahrenheits!' ...
      ] );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Temperature in Fahrenheit: 159.26
The hottest place on Earth as of 2005 is in the Lut Desert in Iran at 70.7 degrees Celsius.
This corresponds to a temperature of 159.26 degrees Fahrenheits!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-input-arguments&quot;&gt;Functions with no input arguments&lt;/h3&gt;

&lt;p&gt;We can define functions that take no input argument, yet do something predefined for us. Consider the following function which gives information about the ICP course, when called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function info = get_ICP_info()
    info = 'ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.';
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; out = get_ICP_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;functions-with-no-output-return-value&quot;&gt;Functions with no output (return value)&lt;/h3&gt;

&lt;p&gt;We can also modify the above function such that it does not return anything specifically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function get_ICP_info()
    disp('ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.');
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; get_ICP_info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ASE/COE 301: Introduction to Computer Programming (ICP) is a 3-hours credit course offered as part of the undergraduate coursework in the Aerospace and the Computational Engineering programs at The University of Texas at Austin.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is almost equivalent to the word &lt;strong&gt;void&lt;/strong&gt; in languages like Java, C, and C++. If you set a variable equal to this function, you will get an error message, because the function does not return anything as output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; out = get_ICP_info()
Error using get_ICP_info
Too many output arguments.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;functions-with-multiple-input-arguments&quot;&gt;Functions with multiple input arguments&lt;/h3&gt;

&lt;p&gt;Functions can take almost as many input arguments as we wish. Consider the following that takes two arguments,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function result = mypower(base,exponent)
    result = base^exponent;
    return
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; mypower(10,2)
ans =
   100
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;variable-number-of-input-arguments&quot;&gt;Variable number of input arguments&lt;/h4&gt;

&lt;p&gt;The functions that we have written thus far have contained a fixed number of input arguments and a fixed number of output arguments. But you can also define a MATLAB function that accepts a &lt;strong&gt;variable number of inputs&lt;/strong&gt;. In this case you use MATLAB’s builtin input argument cell &lt;code&gt;varargin&lt;/code&gt; in place of the arbitrary number of input arguments. The function nargin returns the number of input arguments that were passed to the function. For example, consider the following function that displays the values of each input to the function,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function varlist(year,varargin)
   fprintf('Number of arguments: %d\n',nargin)
   celldisp(varargin)
   fprintf('The year is %d\n',year)
   fprintf('type of varargin is %s\n',class(varargin))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; varlist(2017,'what','a ','nice', 'weather')
Number of arguments: 5
varargin{1} =
what 
varargin{2} =
a 
varargin{3} =
nice 
varargin{4} =
weather 
The year is 2017
type of varargin is cell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can find more information about input/ouput function arguments &lt;a href=&quot;https://www.mathworks.com/help/matlab/input-and-output-arguments.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;optional-arguments-using-inputparser&quot;&gt;Optional arguments using &lt;code&gt;inputParser&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Unlike other languages such as Python, Fortran and C++, there is no simple direct way of having optional arguments in MATLAB functions, other than the one described above, using &lt;code&gt;varargin&lt;/code&gt;. However, MATLAB has a powerful set of built-in capabilities known as &lt;code&gt;inputParser&lt;/code&gt; for parsing the input arguments of a given function. The usage and details of this method goes beyond the scope of this class. However, you can learn more about it &lt;a href=&quot;http://www.mathworks.com/help/matlab/ref/inputparser-class.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;functions-with-multiple-output-return-values&quot;&gt;Functions with multiple output (return values)&lt;/h3&gt;

&lt;p&gt;MATLAB functions can also return more than one output value. The output could be of any type: vector, matrix, cell, structure, etc. For example, consider a function that takes an input vector of double and calculates its mean and standard deviation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [m,s] = stat(x)  % a function that returns the result as vector of length two
    n = length(x);
    m = sum(x)/n;
    s = sqrt(sum((x-m).^2/n));
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = [12.7, 45.4, 98.9, 26.6, 53.1];
&amp;gt;&amp;gt; stat(values)
ans =
   47.3400
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Notice that if you don’t provide two output arguments, then basically only one is reported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; valuesMean = stat(values)
valuesMean =
   47.3400
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [valuesMean, valuesStd] = stat(values)
valuesMean =
   47.3400
valuesStd =
   29.4124
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [valuesMean, valuesStd, dummy] = stat(values)   % too many output arguments is meaningless
Error using stat
Too many output arguments. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x,result] = stat(x) % the same function as above, but now returning the result as a structure, together with input x
    result = struct();
    result.n = length(x);
    result.mean = sum(x) / result.n;
    result.std = sqrt( sum( (x-result.mean).^2 / result.n ) );
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; values = [12.7, 45.4, 98.9, 26.6, 53.1];
&amp;gt;&amp;gt; stat(values)
ans =
   12.7000   45.4000   98.9000   26.6000   53.1000
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [input,ouput] = stat(values)
input =
   12.7000   45.4000   98.9000   26.6000   53.1000
ouput = 
       n: 5
    mean: 47.3400
     std: 29.4124
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;br /&gt;
Write a function that takes in three coefficients $(a,b,c)$ of a quadratic equation $ax^2+bx+c$ and finds the roots of this equation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [x1,x2] = quadform(a,b,c)
    d = sqrt(b^2 - 4*a*c);
    x1 = (-b + d) / (2*a);
    x2 = (-b - d) / (2*a);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [r1,r2] = quadform(1,1,1)
r1 =
  -0.5000 + 0.8660i
r2 =
  -0.5000 - 0.8660i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;variable-number-of-output-arguments&quot;&gt;Variable number of output arguments&lt;/h4&gt;

&lt;p&gt;A variable number of output arguments can also be specified. For example, consider the following function &lt;code&gt;typesize()&lt;/code&gt; which takes one input argument &lt;code&gt;inputval&lt;/code&gt;. The function will always return a character specifying whether the input argument was a scalar (‘s’), vector (‘v’), or matrix (‘m’). This character is returned through the output argument &lt;code&gt;arrtype&lt;/code&gt;. Additionally, if the input argument was a vector, the function also returns the length of the vector, and if the input argument was a matrix, the function returns the number of rows and the number of columns of the matrix. The &lt;strong&gt;MATLAB’s builtin&lt;/strong&gt; output argument &lt;code&gt;varargout&lt;/code&gt; is used, which is a cell array. So, for a vector the length is returned through varargout, and for a matrix both the number of rows and columns are returned through &lt;code&gt;varargout&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;function [arrtype, varargout] = typesize(inputval)
    % typesize returns a character 'scalar' for scalar, 'vector'
    % for vector, or 'matrix' for matrix input argument
    % also returns length of a vector or dimensions of matrix
    % Format: typesize(inputArgument)
    [nrow, ncol ] = size(inputval);
    if nrow==1 &amp;amp;&amp;amp; ncol==1
    arrtype = 'scalar';
    elseif nrow==1 || ncol==1
    arrtype = 'vector';
    varargout{1} = length(inputval);
    else
    arrtype = 'matrix';
    varargout{1} = nrow;
    varargout{2} = ncol;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; typesize(10)
ans =
scalar
&amp;gt;&amp;gt; typesize(10:12)
ans =
vector
&amp;gt;&amp;gt; [inputType,inputLength] = typesize(10:12)
inputType =
vector
inputLength =
     3
&amp;gt;&amp;gt; [inputType,nrow,ncol] = typesize([10:12;13:15])
inputType =
matrix
nrow =
     2
ncol =
     3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/7-matlab-functions-I&quot;&gt;Lecture 7: MATLAB - functions I&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 11, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 6: MATLAB - operators, branching, and control statements]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/6-matlab-operators-branching"/>
  <id>http:/ICP2017F/lecture/6-matlab-operators-branching</id>
  <published>2017-10-09T00:00:00-05:00</published>
  <updated>2017-10-09T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture explains some of the most widely used operators, as well as branching statements in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/EnuaR-NGedQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Q6t2SDX9mRc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/eB4PH7qtEus&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;matlab-operators&quot;&gt;MATLAB operators&lt;/h2&gt;

&lt;p&gt;A complete list of MALTAB operators can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Corresponding to each operator, there is also MATLAB function that does the exact same thing for you.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Arithmetic operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Addition                                      &lt;/td&gt;&lt;td&gt;&lt;code&gt;plus()      &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; +  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary plus                                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;uplus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Subtraction                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;minus()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; -  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Unary minus                                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;uminus()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .* &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise multiplication                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;times()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; *  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix multiplication                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mtimes()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ./ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise right division                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;rdivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; /  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix right division                         &lt;/td&gt;&lt;td&gt;&lt;code&gt;mrdivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .\ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise left division                    &lt;/td&gt;&lt;td&gt;&lt;code&gt;ldivide()   &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; \  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix left divison (also known as backslash) &lt;/td&gt;&lt;td&gt;&lt;code&gt;mldivide()  &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .^ &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Element-wise power                            &lt;/td&gt;&lt;td&gt;&lt;code&gt;power()     &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ^  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Matrix power                                  &lt;/td&gt;&lt;td&gt;&lt;code&gt;mpower()    &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; .' &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Transpose                                     &lt;/td&gt;&lt;td&gt;&lt;code&gt;transpose() &lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; '  &lt;/code&gt;&lt;/td&gt;&lt;td&gt; Complex conjugate transpose                   &lt;/td&gt;&lt;td&gt;&lt;code&gt;ctranspose()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/arithop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Arithmetic operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Rational operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; == &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;eq()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Not equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ne()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than&lt;/td&gt;&lt;td&gt;&lt;code&gt;gt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;gt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Greater than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;ge()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than&lt;/td&gt;&lt;td&gt;&lt;code&gt;lt()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;lt;= &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Less than or equal to&lt;/td&gt;&lt;td&gt;&lt;code&gt;le()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/rationalop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Rational operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of Logical operators in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Symbol&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Role&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Alternative&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND&lt;/td&gt;&lt;td&gt;&lt;code&gt;and()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; |  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR&lt;/td&gt;&lt;td&gt;&lt;code&gt;or()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; &amp;amp;&amp;amp; &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical AND (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; || &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical OR (with short-circuiting)&lt;/td&gt;&lt;td&gt;--&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt; ~  &lt;/code&gt;&lt;/td&gt;&lt;td&gt;Logical NOT&lt;/td&gt;&lt;td&gt;&lt;code&gt;not()&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--
&lt;figure&gt;
    &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html&quot; target=&quot;_blank&quot;&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/logicop.png&quot; width=&quot;900&quot;&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Logical operators in MATLAB.
    &lt;/figcaption&gt;
&lt;/figure&gt;

### Logical operator short-circuit in MATLAB

Note that there are two types of logical operators, one of which is called [short-circuit](http:/ICP2017F/lecture/6/shortCircuit.mp4){:target=&quot;_blank&quot;}. More information about them and their meanings can be found [here](https://www.mathworks.com/help/matlab/ref/logicaloperatorsshortcircuit.html#bt_0nai-1){:target=&quot;_blank&quot;}.

&lt;!--
&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;video width=&quot;100%&quot; src=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/video&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;
--&gt;

&lt;h3 id=&quot;special-characters-in-matlab&quot;&gt;Special characters in MATLAB&lt;/h3&gt;

&lt;p&gt;There are also a set of characters that have special role in MATLAb, some of which we have already discussed in the past lectures. You can learn about them &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/matlab-operators-and-special-characters.html#bvg3oy_-5&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implicit-type-casting-and-operator-overloading&quot;&gt;Implicit type casting and operator overloading&lt;/h2&gt;

&lt;p&gt;MATLAB is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Strong_and_weak_typing&quot; target=&quot;_blank&quot;&gt;loosely or weakly-typed language&lt;/a&gt;, which has a number of real-world implications. The first, and probably most notable, difference between MATLAB and a strongly-typed language is that you don’t have to explicitly declare the types of the variables you use. For example, the declarations x=5; x=’foo’ immediately following one another are perfectly acceptable; the first declaration causes x to be treated as a number, the second changes its treatment to a string.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;main benefit&lt;/strong&gt; of using a weakly-typed language is the &lt;strong&gt;ability to do rapid prototyping&lt;/strong&gt;. The number of lines of code required to declare and use a dynamically allocated array in C (and properly clean up after its use) are much greater than the number of lines required for the same process in MATLAB. Weak typing is also good for code-reuse. You can code a scalar algorithm in MATLAB and with relatively little effort modify it to work on arrays as well as scalars. The fact that MATLAB is a scripted instead of a compiled language also contributes to rapid prototyping.&lt;/p&gt;

&lt;p&gt;Weak typing is not without its pitfalls, though. For example, weak typing combined with unexpected user input can sometimes lead to erroneous results,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=5;
&amp;gt;&amp;gt; y=4;
&amp;gt;&amp;gt; x/y
ans =
    1.2500
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt; whereas the same code in strongly-typed compiled languages, such as C and Fortran would have given &lt;em&gt;integer&lt;/em&gt; value &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Weak typing, combined with intrinsic MATLAB &lt;a href=&quot;https://www.google.com/search?q=operator+overloading&amp;amp;spell=1&amp;amp;sa=X&amp;amp;ved=0ahUKEwix2e-x1-vVAhUF-lQKHXZxCZYQvwUIIygA&amp;amp;biw=1344&amp;amp;bih=744&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;operator overloading&lt;/strong&gt;&lt;/a&gt; can also can lead to unexpected results when operations between mixed types are done. Consider what happens when you add &lt;code&gt;1+'1'&lt;/code&gt;, that is, the scalar 1 and the character ‘1’. The surprising result is 50. MATLAB automatically converts the character &lt;code&gt;'1'&lt;/code&gt; to its ASCII representation value, which is 49 (You can get the ASCII code for any character using the &lt;code&gt;abs()&lt;/code&gt; function). After this implicit conversion, MATLAB adds the scalar value of &lt;code&gt;1&lt;/code&gt; to return &lt;code&gt;50&lt;/code&gt;. (Note: While this example is somewhat contrived it can easily arise, especially when passing a function argument where the type is undetermined. To write completely safe weakly-typed code, user input should always be checked before performing operations on it.)&lt;/p&gt;

&lt;p&gt;The situation can be more complicated when you deal with strings rather than single characters. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x=10;
&amp;gt;&amp;gt; y='10';
&amp;gt;&amp;gt; x+y
ans =
    59    58
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Basically, what happened above is that &lt;code&gt;'10'&lt;/code&gt; is considered as a vector of characters, therefore, when you add it to &lt;code&gt;10&lt;/code&gt;, Matlab automatically converts this string to a vector of corresponding ASCII values and adds the value &lt;code&gt;10&lt;/code&gt; to each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 'Hello' + 'World'
ans =
    159 212 222 216 211
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explicit-type-conversion&quot;&gt;Explicit type conversion&lt;/h2&gt;

&lt;p&gt;Unlike implicit type casting which is done by MATLAB under the hood as described above, which can also be dangerous, you can also explicitly request MATLAB to convert the type of a variable to some other type, using MATLAB’s built-in functions like &lt;code&gt;cast&lt;/code&gt;, or one of the &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-type-conversion.html&quot; target=&quot;_blank&quot;&gt;many other functions&lt;/a&gt; that MATLAB has for this purpose.&lt;/p&gt;

&lt;h3 id=&quot;array-vs-matrix-operations&quot;&gt;Array vs. Matrix Operations&lt;/h3&gt;

&lt;p&gt;We have already learned that arrays and matrices are not the same in MATLAB. As a result, the operators that can act on them are also not identical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matrix operations&lt;/strong&gt; follow the rules of linear algebra and are not compatible with multidimensional arrays. The required size and shape of the inputs in relation to one another depends on the operation. For non-scalar inputs, the matrix operators generally calculate different answers than their array operator counterparts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array operations&lt;/strong&gt; execute element by element operations on corresponding elements of vectors, matrices, and multidimensional arrays. If the operands have the same size, then each element in the first operand gets matched up with the element in the same location in the second operand. If the operands have compatible sizes, then each input is implicitly expanded as needed to match the size of the other.&lt;/p&gt;

&lt;p&gt;You can learn more about them in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/array-vs-matrix-operations.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;operator-precedence-in-matlab&quot;&gt;Operator precedence in MATLAB&lt;/h3&gt;

&lt;p&gt;You can build expressions that use any combination of arithmetic, relational, and logical operators. Precedence levels determine the order in which MATLAB® evaluates an expression. Within each precedence level, operators have equal precedence and are evaluated from left to right. The precedence rules for MATLAB operators are shown in this list, ordered from highest precedence level to lowest precedence level:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Parentheses &lt;code&gt;()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Transpose &lt;code&gt;.'&lt;/code&gt;, power &lt;code&gt;.^&lt;/code&gt;, complex conjugate transpose &lt;code&gt;'&lt;/code&gt;, matrix power &lt;code&gt;^&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Power with unary minus &lt;code&gt;.^-&lt;/code&gt;, unary plus &lt;code&gt;.^+&lt;/code&gt;, or logical negation &lt;code&gt;.^~&lt;/code&gt; as well as matrix power with unary minus &lt;code&gt;^-&lt;/code&gt;, unary plus &lt;code&gt;^+&lt;/code&gt;, or logical negation &lt;code&gt;^~&lt;/code&gt;. (Note:   Although most operators work from left to right, the operators &lt;code&gt;^-&lt;/code&gt;, &lt;code&gt;.^-&lt;/code&gt;, &lt;code&gt;^+&lt;/code&gt;, &lt;code&gt;.^+&lt;/code&gt;, &lt;code&gt;^~&lt;/code&gt;, and &lt;code&gt;.^~&lt;/code&gt; work from second from the right to left. It is recommended that you use parentheses to explicitly specify the intended precedence of statements containing these operator combinations.)&lt;/li&gt;
  &lt;li&gt;Unary plus &lt;code&gt;+&lt;/code&gt;, unary minus &lt;code&gt;-&lt;/code&gt;, logical negation &lt;code&gt;~&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Multiplication &lt;code&gt;.*&lt;/code&gt;, right division &lt;code&gt;./&lt;/code&gt;, left division &lt;code&gt;.\&lt;/code&gt;, matrix multiplication &lt;code&gt;*&lt;/code&gt;, matrix right division &lt;code&gt;/&lt;/code&gt;, matrix left division &lt;code&gt;\&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Colon operator &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Less than &lt;code&gt;&amp;lt;&lt;/code&gt;, less than or equal to &lt;code&gt;&amp;lt;=&lt;/code&gt;, greater than &lt;code&gt;&amp;gt;&lt;/code&gt;, greater than or equal to &lt;code&gt;&amp;gt;=&lt;/code&gt;, equal to &lt;code&gt;==&lt;/code&gt;, not equal to &lt;code&gt;~=&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise AND &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Element-wise OR &lt;code&gt;|&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6/shortCircuit.mp4&quot; target=&quot;_blank&quot;&gt;Short-circuit&lt;/a&gt; OR &lt;code&gt;||&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can learn more about operator precedence in &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/operator-precedence.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;branching-in-matlab&quot;&gt;Branching in MATLAB&lt;/h2&gt;

&lt;p&gt;The normal flow of control in procedural programming paradigm is in general, &lt;em&gt;sequential&lt;/em&gt;. So is the flow of control in MATLAB.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/normalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Normal sequential control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/6/conditionalFlow.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conditional control flow in imperative/procedural programming paradigms.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In MATLAB, you can achieve conditional flow control, using either &lt;strong&gt;if-block&lt;/strong&gt; or &lt;strong&gt;switch-case&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-if-blocks&quot;&gt;MATLAB if-blocks&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;a = input('Enter a number:');
if isnumeric(a) &amp;amp;&amp;amp; (a &amp;gt;= 0)
    root = sqrt(a);
    disp(['Square root(',num2str(a),') = ', num2str(root)]);
elseif isnumeric(a) &amp;amp;&amp;amp; (a &amp;lt; 0)
    disp(['The input number is negative, there is no square root.']);
else
    disp(['Please enter a real number!']);
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a number:13
Square root = 3.6056

Enter a number:-11
The input number is negative, there is no square root

Enter a number:i
Square root = 0.70711+0.70711i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note in the above example, how MATLAB treats complex variables. More information on operators that can be used to construct or combine logical conditions for if-statements can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/logical-operations.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;exercise&quot;&gt;Exercise&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; write a MATLAB script that takes two predefined matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; as input and determines whether they have equal size. If so, then it concatenates the two matrices in a column-wise manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if isequal(size(A),size(B))
   C = [A; B];
else
   disp('A and B are not the same size.')
   C = [];
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write a script that checks if it (the script itself) exists!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if exist('myScript.m','file')
    disp('Your file exists! Did you expect otherwise?')
else
    disp('Your file does not exist! Then perhaps you don''t exist either??')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Write a script that takes an input predefined number $x$ and calculates the following function,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation*}
y =
\begin{cases}
    x &amp; \text{for}~~~-1&lt;=x&lt;=1 \\
    x^2 &amp; \text{otherwise} \\
\end{cases}
\end{equation*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;answer&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;x = input('input the value of x: ')
if x &amp;gt;= -1 &amp;amp;&amp;amp; x &amp;lt;= 1
    y = x
else
    y = x^2
end
disp(['y(x=',num2str(x),') = ',num2str(y)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;matlab-switch-case&quot;&gt;MATLAB switch-case&lt;/h3&gt;

&lt;p&gt;Sometimes we may have many if statements which all use conditions based on the same variable. It is not incorrect to use if statements in such cases, but it can lead to a large number of consecutive if statements in our code, making it harder to read and more prone to errors. In this case, it is preferable to use a switch statement. The switch statement offers an easy way of writing code where the same variable needs to be checked against a number of different values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case 1
        day_name = 'Monday';
    case 2
        day_name = 'Tuesday';
    case 3
        day_name = 'Wednesday';
    case 4
        day_name = 'Thursday';
    case 5
        day_name = 'Friday';
    case 6
        day_name = 'Saturday';
    case 7
        day_name = 'Sunday';
    otherwise
        day_name = 'Unknown';
end
disp(['The corresponding weekday is ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:4
The corresponding weekday is Thursday.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MATLAB will compare the switch expression (in this case, &lt;code&gt;day&lt;/code&gt;) with each case expression in turn (the numbers 1–7). When a comparison evaluates to &lt;code&gt;true&lt;/code&gt;, MATLAB executes the corresponding statements and then exits the switch statement, i.e. control flow passes to after the &lt;code&gt;end&lt;/code&gt; statement. The &lt;code&gt;otherwise&lt;/code&gt; block is optional and executes only when no comparison evaluates to    &lt;code&gt;true&lt;/code&gt;. Note that the &lt;code&gt;switch&lt;/code&gt; statement is used only for equality tests – we cannot use it for other types of comparison (e.g. &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, etc.).&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement may also take a cell array as one of its cases,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;day = input('Enter a day number:');
switch day
    case {1,2,3,4,5}
        day_name = 'Weekday';
    case {6,7}
        day_name = 'Weekend';
    otherwise
        day_name = 'Unknown';
end
disp(['The input day number corresponds to ',day_name,'.'])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Enter a day number:6
The input day number corresponds to Weekend.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;non-boolean-conditions-in-if-statements&quot;&gt;Non-boolean conditions in if-statements&lt;/h3&gt;

&lt;p&gt;There is a rather interesting feature of conditions for if-statements in MATLAB (also in Python language), that allows the programmer to use a non-boolean variable or non-boolean value type directly in place of the condition in if-statement. What really happens here is that, MATLAB interpreter converts the non-boolean type to a boolean value, when it occurs in place of an if-statement condition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 5.6
    disp('The condition in this if statement is automatically converted from float to boolean')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The condition in this if statement is automatically converted from float to boolean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A float value of zero is converted to false
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.0
    disp('A float value of zero is converted to false')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 0.000000000000000000000000000000000000000000000000000000000000000000001
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-323
    disp('Any non-zero float value of any precision is converted to true')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value of any precision is converted to true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ~1.e-324 % make sure you don't go beyond computer precision
    disp('Any non-zero float value smaller than the computer precision will be set to 0')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Any non-zero float value smaller than the computer precision will be set to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if 12
    disp('The same rules also hold for integers.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The same rules also hold for integers.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ''
else
    disp('An empty string is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty string is always converted to boolean false, because it is considered an empty logical vector.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if []
else
    disp('An empty vector is always converted to boolean false, because it is considered an empty logical vector.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;An empty vector is always converted to boolean false, because it is considered an empty logical vector.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But note that conversion from cell to logical is not possible in MATLAB:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if {}
    disp('An empty cell cannot be converted to boolean value, because MATLAB wants it that way!')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Conversion to logical from cell is not possible. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ['amir']
    disp('A non-empty vector is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty vector is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;if ' '
    disp('A non-empty string is converted to boolean true.')
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A non-empty string is converted to boolean true.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;matlabs-built-in-is-functions&quot;&gt;MATLAB’s built-in &lt;strong&gt;is&lt;/strong&gt; functions&lt;/h3&gt;

&lt;p&gt;MATLAB has a wide range of functions whose names begins with &lt;code&gt;is&lt;/code&gt;, and their output is a logical value type, which can be used in if-blocks. These functions are extremely useful in MATLAB coding, and you will encounter them frequently in your computational life. Here is a rather comprehensive list of them,&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table of MATLAB's &lt;i&gt;is-functions&lt;/i&gt; and description of their functionality.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isa()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect object of given MATLAB class or Java® class&lt;/td&gt;&lt;/tr&gt;  
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isappdata()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if object has specific application-defined data&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isbetween()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Array elements occurring within date and time interval&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscalendarduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategorical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscategory()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Test for categorical array categories&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscell()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscellstr()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is cell array of strings&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ischar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is character array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscolumn()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is column vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iscom()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdatetime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is datetime array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdir()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is folder&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isdst()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during daylight saving time&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isduration()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is duration array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isempty()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is empty array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isequaln()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if arrays are numerically equal, treating NaNs as equal&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isevent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) object event&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfield()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array field&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfinite()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect finite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isfloat()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is floating-point array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishandle()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect valid graphics object handles&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ishold()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if graphics hold state is on&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinf()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect infinite elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinteger()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is integer array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isinterface()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Component Object Model (COM) interface&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isjava()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is Java object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;iskeyword()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB keyword&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isletter()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements that are alphabetic letters&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;islogical()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is logical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismac()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for Macintosh OS X platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismatrix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is matrix&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismember()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect members of specific set&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismethod()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object method&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ismissing()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find table elements with missing values&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnan()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect elements of array that are not a number (NaN)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isnumeric()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is numeric array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isobject()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB object&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isordinal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is ordinal categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;ispc()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for PC (Windows®) platform&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprime()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect prime elements of array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is object property&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isprotected()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether categories of categorical array are protected&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isreal()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if all array elements are real numbers&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isrow()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is row vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isscalar()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is scalar&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issorted()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if set elements are in sorted order&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isspace()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Detect space characters in array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;issparse()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is sparse array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstrprop()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if string is of specified category&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstruct()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is MATLAB structure array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isstudent()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if Student Version of MATLAB&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;istable()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine whether input is table&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isundefined()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find undefined elements in categorical array&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isunix()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if running MATLAB for UNIX®[a] platform.&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvarname()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is valid variable name&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isvector()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Determine if input is vector&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;&lt;code&gt;isweekend()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Datetime values occurring during weekend&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For more information on each individual function, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/ref/is.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s use manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/6-matlab-operators-branching&quot;&gt;Lecture 6: MATLAB - operators, branching, and control statements&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 09, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Problems - structures, branching and functions in MATLAB]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions"/>
  <id>http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions</id>
  <published>2017-10-09T00:00:00-05:00</published>
  <updated>2017-10-09T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 30, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with structure types in MATLAB as well as branching and function concepts and their usage syntax. Write your MATLAB scripts with the corresponding &lt;code&gt;*.m&lt;/code&gt; file names, and add a readme.md file in HW 3 folder of your ICP2017F repository if you need to add any additional explanation (Don’t forget to use markdown syntax highlight in your readme file, if needed).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; The bell-shaped &lt;a href=&quot;https://en.wikipedia.org/wiki/Normal_distribution&quot; target=&quot;_blank&quot;&gt;Gaussian probability density function&lt;/a&gt;,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x)=\frac{1}{\sqrt{2\pi}\sigma}\exp\bigg[ -\frac{1}{2}\bigg( \frac{x-\mu}{\sigma} \bigg)^2 \bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
is one of the most widely used functions in science and technology. The parameters of the function ($\mu\in[-\infty,+\infty]$, $\sigma&amp;gt;0$) are prescribed real numbers. Write a MATLAB script for evaluating this function when $\mu=0$, $\sigma=2$, $x = 1$.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Verify your answer by getting the same result from &lt;a href=&quot;https://www.wolframalpha.com/&quot; target=&quot;_blank&quot;&gt;Wolfram Alpha&lt;/a&gt; mathematical search engine, also by using MATLAB’s builtin function &lt;a href=&quot;https://www.mathworks.com/help/stats/normpdf.html&quot; target=&quot;_blank&quot;&gt;normpdf($x$,$\mu$,$\sigma$)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; As an egg cooks, the protein molecules in the egg first denature and then coagulate. When the temperature exceeds a critical point, reactions begin and proceed faster as the temperature increases. In the egg white, the proteins start to coagulate for temperatures above $63^\circ\rm{C}$, while in the yolk the proteins start to coagulate for temperatures above $70^\circ\rm{C}$. For a soft boiled egg, the white needs to have been heated long enough to coagulate at a temperature above $63^\circ\rm{C}$, but the yolk should not be heated above $70^\circ\rm{C}$. For a hard boiled egg, the center of the yolk should be allowed to reach $70^\circ\rm{C}$.&lt;/p&gt;

&lt;p&gt;The following formula expresses the time $t$ it takes (in seconds) for the center of the yolk to reach the temperature Ty (in Celsius degrees):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;t = \frac
{ M^{2/3} ~ c ~ \rho^{1/3} }
{ K\pi^2 ~ (4\pi/3)^{2/3} }
~\ln
\bigg[
0.76 \frac{T_0 - T_w}{T_y-T_w}
\bigg]&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
where $M$ is the mass of egg, $\rho$ is the density, $c$ is the specific heat capacity, and $K$ is thermal conductivity. Relevant values are $M=47~[g]$ for a small egg and $M=67~[g]$ for a large egg, $\rho=1.038 ~[g~cm^{-3}]$, $c = 3.7 ~[J~g^{-1}~K^{-1}]$, and $K = 5.4\times10^{-3} ~[Wcm^{-1}K^{-1}]$. Furthermore, $T_w$ is the temperature
(in C degrees) of the boiling water, and $T_0$ is the original temperature (in C degrees) of the egg before being put in the water. Implement the formula in a MATLAB program, set $T_w = 100^\circ C$ and $T_y = 70^\circ C$, and compute $t$ for a large egg taken from the fridge ($T_0 = 4^\circ C$) and from room temperature ($T_0 = 20^\circ C$). (&lt;strong&gt;Hint&lt;/strong&gt;: Note that for this problem you will need to use MATLAB’s builtin function &lt;code&gt;log()&lt;/code&gt;, and the predefined variable &lt;code&gt;pi&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; &lt;strong&gt;Converting polar and Cartesian vector representations using functions and structures.&lt;/strong&gt; A vector is a mathematical quantity that has both magnitude and direction. A 2-dimensional vector can be represented as a displacement along $x$ and $y$ axes in rectangular (Cartesian) coordinates or, by a distance $r$ and an angle $\phi$ in polar coordinates,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/3-problems/vector.png&quot; height=&quot;400&quot; width=&quot;400&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The conversion rule between the Cartesian and Polar representations of a vector.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The relationships between the Cartesian $(x,y)$ and polar $(r,\phi)$ coordinates are given by the following equations,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    x &amp;= r\cos(\phi) \\
    y &amp;= r\sin(\phi) \\
    r &amp;= \sqrt{x^2 + y^2} \\
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt; that takes a structure &lt;code&gt;inputCartesianStruct&lt;/code&gt; as input, that has two components &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Then on output, it returns another structure that has to components &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. Write another function &lt;code&gt;getCart(inputPolarStruct)&lt;/code&gt; that does the inverse of &lt;code&gt;getPolar(inputCartesianStruct)&lt;/code&gt;. Make sure that both functions are robust to wrong input structures by checking whether the input structures have the required fields: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, or &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;phi&lt;/code&gt;. You can do so by using MATLAB’s builtin function &lt;code&gt;isfield()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; &lt;strong&gt;Calculating the size of a directory&lt;/strong&gt; The MATLAB function &lt;code&gt;dir&lt;/code&gt; returns the contents of a specified directory. It returns the result in the form of an structure array with four fields, for example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = dir
s = 
123x1 struct array with fields:
    name
    date
    bytes
    isdir
    datenum
&amp;gt;&amp;gt; size(s)
ans =
   123     1
&amp;gt;&amp;gt; fieldnames(s)
ans = 
    'name'
    'date'
    'bytes'
    'isdir'
    'datenum'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
where here, the directory contains 123 objects. Write a MATLAB function that takes the path to a directory and outputs the total size of all files in the directory in units of bytes.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; In mathematics, the Fibonacci numbers are the numbers in the following integer sequence, called the Fibonacci sequence, that are characterized by the fact that every number after the first two is the sum of the two preceding ones:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0,~1,~1,~2,~3,~5,~8,~13,~21,~34,~55,~89,~144,~\dots&lt;/script&gt;

&lt;p&gt;with the following sequence equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
     Fib(n) &amp;=&amp; Fib(n-1) + Fib(n-2) ~, \\
     Fib(0) &amp;=&amp; 0 ~, \\
     Fib(1) &amp;=&amp; 1 ~.
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Write a MATLAB function named &lt;code&gt;fib&lt;/code&gt; that takes in an input argument which should be integer number &lt;code&gt;n&lt;/code&gt;, and then calculates the $n$th number in the Fibonacci sequence and outputs it on the screen. Also, if the input argument is not a non-negative integer, it prints an error message on the screen and asks the user to re-enter a non-negative integer number. Also, when it is done with finding the requested Fibonacci number, it asks again the user to either input a new non-negative integer, or enter ‘stop’ to end the function, like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; fib
Please enter a non-negative integer or type stop: -123
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: a
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: amir
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: -12.3
The input argument is not a non-negative integer!
Please enter a non-negative integer or type stop: 0
fib(0) = 0
Please enter a non-negative integer or type stop: 1
fib(1) = 1
Please enter a non-negative integer or type stop: 2
fib(2) = 1
Please enter a non-negative integer or type stop: 3
fib(3) = 2
Please enter a non-negative integer or type stop: 4
fib(4) = 3
Please enter a non-negative integer or type stop: 5
fib(5) = 5
Please enter a non-negative integer or type stop: 6
fib(6) = 8
Please enter a non-negative integer or type stop: 7
fib(7) = 13
Please enter a non-negative integer or type stop: 8
fib(8) = 21
Please enter a non-negative integer or type stop: 9
fib(9) = 34
Please enter a non-negative integer or type stop: 10
fib(10) = 55
Please enter a non-negative integer or type stop: 11
fib(11) = 89
Please enter a non-negative integer or type stop: 12
fib(12) = 144
Please enter a non-negative integer or type stop: 22
fib(22) = 17711
Please enter a non-negative integer or type stop: 32
fib(32) = 2178309
Please enter a non-negative integer or type stop: stop
&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First write a function &lt;code&gt;getFib(n_int)&lt;/code&gt; that finds the requested Fibonacci number for you, given a &lt;em&gt;strictly&lt;/em&gt; non-negative integer input (for example, name it &lt;code&gt;n_int&lt;/code&gt;).&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Then put this function &lt;strong&gt;inside another MATLAB function &lt;code&gt;fib()&lt;/code&gt;&lt;/strong&gt; that asks the user to input a number (which could be potentially anything: a string, a real number, a complex number, or an integer). You can do this using MATLAB’s builtin function &lt;code&gt;input()&lt;/code&gt;. Read the input value as a &lt;code&gt;string&lt;/code&gt; using this MATLAB function. Then check if the user’s input string is equivalent to &lt;strong&gt;‘stop’&lt;/strong&gt; or not. If it is ‘stop’, then the program must return, otherwise, use &lt;code&gt;str2double()&lt;/code&gt; to convert this string to MATLAB numeric type. Then check is the numeric-converted input value is real number (as opposed to complex number) via MATLAB’s function &lt;code&gt;isreal()&lt;/code&gt;. If the value is real, then check if it is a non-negative real number. Also check if it is an &lt;strong&gt;integer&lt;/strong&gt; by comparing the value with its rounded value using MATLAB’s function &lt;code&gt;round()&lt;/code&gt;. Thus is the user-input number is really a non-negative integer, then your code should display the result message as given in the above output (by calling your nested function &lt;code&gt;getFib(n_int)&lt;/code&gt;), and then call this function &lt;code&gt;fib&lt;/code&gt; to ask the user to input another number again, to repeat this procedure. If the user-input number is not a non-negative integer, then your code should display the requested message above, and call the function &lt;code&gt;fib&lt;/code&gt; again to ask the user for another input.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; 
An arbitrary triangle can be described by the coordinates of its three vertices: $(x1,y1),(x2,y2),(x3,y3)$, numbered in a counterclockwise direction. The area of the triangle is given by the formula,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \frac{1}{2} \bigg| x2y3 - x3y2 - x1y3 + x3y1 + x1y2 - x2y1 \bigg|&lt;/script&gt;

&lt;p&gt;Write a function &lt;code&gt;getTriangleArea(vertices)&lt;/code&gt; that returns the area of a triangle whose vertices are specified by the argument vertices, which is a nested list of the vertex coordinates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Write a logical (boolean) function named &lt;code&gt;isPrime(n)&lt;/code&gt; that takes in an integer number &lt;code&gt;n&lt;/code&gt;, and finds whether it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prime_number&quot; target=&quot;_blank&quot;&gt;Prime number&lt;/a&gt; or not. Example output is the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(23)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;isPrime(12)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you do not need and don’t have to use a &lt;code&gt;for-loop&lt;/code&gt; for this problem (we have not yet discussed loops in our class!). All of it can be done using &lt;strong&gt;recursive function&lt;/strong&gt; concept. You can verify the accuracy of your MATLAB script via by checking its output against MATLAB’s builtin function &lt;code&gt;isprime()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; &lt;strong&gt;Function generators.&lt;/strong&gt; Write a nested function that evaluates a polynomial of the form $y = ax^2+bx+c$. The host function &lt;code&gt;genFunc()&lt;/code&gt; should be able to take varying number of arguments using &lt;code&gt;varargin&lt;/code&gt; with maximum of 3 arguments (&lt;code&gt;a,b,c&lt;/code&gt;) to initialize the coefficients of the polynomial. If there is only one argument, then &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; must be set to zero. If there are two input arguments, then &lt;code&gt;c&lt;/code&gt; is set to zero. If none are given on input, then the returned function should be zero. If more than 3 arguments exist, then the function should display an error and stop. Also, if the input arguments are not real numbers, then the function should return and error and stop.&lt;/p&gt;

&lt;p&gt;On output, the host function should create and return a function handle for the nested function &lt;code&gt;evalFunc()&lt;/code&gt;. The nested function should calculate a value of $y$ for a given value of $x$, using the values of $a$, $b$, and $c$ stored in the host function. This is called a &lt;strong&gt;function generator&lt;/strong&gt;, since the host function generates and outputs another function that can be called and used later on in the program. Once you create your function generator, test it in the following way: Call &lt;code&gt;genFunc(1,2,0)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h1&lt;/code&gt;. Call &lt;code&gt;genFunc(1,2)&lt;/code&gt; and save the output function handle in a variable, say &lt;code&gt;h2&lt;/code&gt;. Then these two function handles, should give the same result, given the same input &lt;code&gt;x&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/3-problems-matlab-structures-branching-functions&quot;&gt;Homework 3: Problems - structures, branching and functions in MATLAB&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 09, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Solutions - Programming history, MATLAB variables]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables"/>
  <id>http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables</id>
  <published>2017-10-04T00:00:00-05:00</published>
  <updated>2017-10-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;2-problems-programming-history-matlab-variables.html&quot; target=&quot;_blank&quot;&gt;Quiz 2: Problems - Programming history, MATLAB variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz2.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily usage.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is accetasble answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly  &lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB were created, respectively?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB.&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Initialized a cell array variable &lt;code&gt;C&lt;/code&gt; of size $2\times2$, then fill its elements like the following figure.&lt;br /&gt;
&lt;br /&gt;
    &lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/quiz/2/cellArray.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C = cell(2,2)
&amp;gt;&amp;gt; C{1,1} = [1,3,-7;2,0,6;0,5,1];
&amp;gt;&amp;gt; C{1,2} = 'This is a text string.';
&amp;gt;&amp;gt; C{2,1} = [];
&amp;gt;&amp;gt; C{2,2} = [3+4i,-5;-10i,3-4i];
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C
C = 
[3x3 double]    'This is a text string.'
          []                [2x2 double]
&amp;gt;&amp;gt; C{1,1}
ans =
    1     3    -7
    2     0     6
    0     5     1
&amp;gt;&amp;gt; C{2,2}
ans =
    3.0000 + 4.0000i  -5.0000 + 0.0000i
    0.0000 -10.0000i   3.0000 - 4.0000i
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, if you type &lt;code&gt;C{2}&lt;/code&gt; on the MATLAB command line, what do you get? Why do get this value?&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
You will get the value for the cell element $(2,1)$. This is happens, because as we discussed in class, MATLAB is column-wise language.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Does MATLAB follow column-wise data storage, or row-wise? Explain what it means? Why does it follow this storage method? (if you recall, we discussed this in class) &lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
MATLAB stores data in a column-major (columnwise) numbering scheme, which is how Fortran stores matrices. MATLAB uses this convention because it was originally written in Fortran. MATLAB internally stores data elements from the first column first, then data elements from the second column second, and so on, through the last column.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How many bytes is a MATLAB integer of type &lt;code&gt;int64&lt;/code&gt;? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
8 bytes.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;What would happen if you tried to covert a huge integer number that requires MATLAB &lt;code&gt;int64&lt;/code&gt; data type to the MATLAB &lt;code&gt;int32&lt;/code&gt; data type? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The huge number is converted to the maximum number that can be represented by &lt;code&gt;int32&lt;/code&gt; data type.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; intmax('int32')
ans =
    2147483647
&amp;gt;&amp;gt; intmax('int64')
ans =
    9223372036854775807
&amp;gt;&amp;gt; int32(intmax('int64'))
ans =
    2147483647
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This is a language-specific rule. In other programming languages, the number may be converted to infinity, if it is bigger than the maximum number that can be represented by the requested integer type.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/2-solutions-programming-history-matlab-variables&quot;&gt;Quiz 2: Solutions - Programming history, MATLAB variables&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 04, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Problems - Programming history, MATLAB variables]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables"/>
  <id>http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables</id>
  <published>2017-10-04T00:00:00-05:00</published>
  <updated>2017-10-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your general knowledge of programming history and MATLAB arrays. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;br /&gt;
(B) Does it need interpretation in order to become machine-comprehensible?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name the oldest high-level programming language that is still in active daily usage.&lt;br /&gt;
(B) Approximately how many decades is it old? ($\pm15$ years is accetasble answer. the decade it was created is also an acceptable answer)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;(A) Name a second-generation programming language.&lt;br /&gt;
(B) Which language-generation are Fortran, C, C++, MATLAB?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;In what decades C, C++, and MATLAB were created, respectively?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name an ancestor programming language of C.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of C++.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Name a programming language ancestor of MATLAB.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Initialized a cell array variable &lt;code&gt;C&lt;/code&gt; of size $2\times2$, then fill its elements like the following figure.&lt;br /&gt;
&lt;br /&gt;
    &lt;figure&gt;
    &lt;img src=&quot;http:/ICP2017F/quiz/2/cellArray.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, if you type &lt;code&gt;C{2}&lt;/code&gt; on the MATLAB command line, what do you get? Why do get this value?&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Does MATLAB follow column-wise data storage, or row-wise? Explain what it means? Why does it follow this storage method? (if you recall, we discussed this in class) &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;How many bytes is a MATLAB integer of type &lt;code&gt;int64&lt;/code&gt;? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;What would happen if you tried to covert a huge integer number that requires MATLAB &lt;code&gt;int64&lt;/code&gt; data type to the MATLAB &lt;code&gt;int32&lt;/code&gt; data type? (if you recall, we discussed this in class)&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/2-problems-programming-history-matlab-variables&quot;&gt;Quiz 2: Problems - Programming history, MATLAB variables&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 04, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Solutions - Variables, Values, and Types]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/2-solutions-variables-values-types"/>
  <id>http:/ICP2017F/homework/2-solutions-variables-values-types</id>
  <published>2017-10-02T00:00:00-05:00</published>
  <updated>2017-10-02T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;2-problems-variables-values-types.html&quot; target=&quot;_blank&quot;&gt;Homework 2: Problems - Variables, Values, and Types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this homework.&lt;/p&gt;

&lt;!--
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus question, is 100.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 2, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB variables.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Type the following in the command window and submit the results. Briefy explain what each assignment does.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt; b = 'x'
&amp;gt;&amp;gt; c = true
&amp;gt;&amp;gt; whos a b c
&amp;gt;&amp;gt; a == c
&amp;gt;&amp;gt; a + c
&amp;gt;&amp;gt; d = [1 2 3 4]
&amp;gt;&amp;gt; e = ['a' 'b' 'c' 'd']
&amp;gt;&amp;gt; f = ['abcd']
&amp;gt;&amp;gt; g = {‘a’ ‘b’ ‘c’ ‘d’}
&amp;gt;&amp;gt; h = { a b c d}
&amp;gt;&amp;gt; whos d e f g h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1
a =
     1
&amp;gt;&amp;gt; b = 'x'
b =
x
&amp;gt;&amp;gt; c = true
c =
  logical
   1
&amp;gt;&amp;gt; whos abc
&amp;gt;&amp;gt; whos a b c
  Name      Size            Bytes  Class      Attributes

  a         1x1                 8  double               
  b         1x1                 2  char                 
  c         1x1                 1  logical
&amp;gt;&amp;gt; a == c
ans =
  logical
   1
&amp;gt;&amp;gt; a + c
ans =
     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a == c&lt;/code&gt; because, although they are different types, &lt;code&gt;a&lt;/code&gt; logical type of true is also represented by the integer 1, so &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; are equivalent, and can be added together.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = [1 2 3 4]
d =
     1     2     3     4
&amp;gt;&amp;gt; e = ['a' 'b' 'c' 'd']
e =
abcd
&amp;gt;&amp;gt; f = ['abcd']
f =
abcd
&amp;gt;&amp;gt; g = {'a' 'b' 'c' 'd'}
g =
  1×4 cell array
    'a'    'b'    'c'    'd'
&amp;gt;&amp;gt; h = { a b c d}
h =
  1×4 cell array
    [1]    'x'    [1]    [1×4 double]
&amp;gt;&amp;gt; whos d e f g h
  Name      Size            Bytes  Class     Attributes

  d         1x4                32  double              
  e         1x4                 8  char                
  f         1x4                 8  char                
  g         1x4               456  cell                
  h         1x4               491  cell    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; are equivalent, because they are both just character arrays, &lt;code&gt;e&lt;/code&gt; just concatenated all the individual single characters into one array, while &lt;code&gt;f&lt;/code&gt; was already concatenated together. g is a cell array of characters ‘a’, ‘b’, ‘c’, and ‘d’, and h is a cell array of the variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; What would happen if you go beyond the range for a particular type? For example, the largest integer that can be stored in &lt;strong&gt;int8&lt;/strong&gt; is 127, and the smallest integer is -128, so what would happen if we type cast a larger integer to the type &lt;strong&gt;int8&lt;/strong&gt;? Smaller integer? Use the built-in functions &lt;code&gt;intmin&lt;/code&gt; and &lt;code&gt;intmax&lt;/code&gt; to find the largest and smallest integers that can be stored in &lt;strong&gt;int16&lt;/strong&gt; and &lt;strong&gt;int32&lt;/strong&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int8(200)
ans =
  int8
   127
&amp;gt;&amp;gt; int8(-150)
ans =
  int8
   -128
&amp;gt;&amp;gt; intmax('int16')
ans =
  int16
   32767
&amp;gt;&amp;gt; intmin('int16')
ans =
  int16
   -32768
&amp;gt;&amp;gt; intmax('int32')
ans =
  int32
   2147483647
&amp;gt;&amp;gt; intmin('int32')
ans =
  int32
   -2147483648
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Think about what the results would be for the following expressions, and then type them in to the terminal to verify your answers. Briefly explain the results for each one.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2 
&amp;gt;&amp;gt; 1/2
&amp;gt;&amp;gt; int8(1/2)
&amp;gt;&amp;gt; int8(1/3)
&amp;gt;&amp;gt; -5^2 
&amp;gt;&amp;gt; (-5) ^ 2 
&amp;gt;&amp;gt; 10-6/2 
&amp;gt;&amp;gt; 5*4/2*3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;  :
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2
ans =
     2
&amp;gt;&amp;gt; 1/2
ans =
    0.5000
&amp;gt;&amp;gt; int8(1/2)
ans =
  int8
   1
&amp;gt;&amp;gt; int8(1/3)
ans =
  int8
   0
&amp;gt;&amp;gt; -5^2
ans =
   -25
&amp;gt;&amp;gt; (-5)^2
ans =
    25
&amp;gt;&amp;gt; 10-6/2
ans =
     7
&amp;gt;&amp;gt; 5*4/2*3
ans =
    30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(a) &lt;/strong&gt; Define the following variables:
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     1     0
     2     1
&amp;gt;&amp;gt; b
b =
    -1     2
     0     1
&amp;gt;&amp;gt; c
c =
     3
     2
&amp;gt;&amp;gt; d
d =
     5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = [1 0; 2 1]
a =
     1     0
     2     1
&amp;gt;&amp;gt; b = [-1 2; 0 1]
b =
    -1     2
     0     1
&amp;gt;&amp;gt; c = [3; 2]
c =
     3
     2
&amp;gt;&amp;gt; d = 5
d =
     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(b) &lt;/strong&gt; What is the result of each of the following expressions? Briefly explain what MATLAB is doing for each operation.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * d&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a + b
ans =
     0     2
     2     2
&amp;gt;&amp;gt; a .* b
ans =
    -1     0
     0     1
&amp;gt;&amp;gt; a * b
ans =
    -1     2
    -2     5
&amp;gt;&amp;gt; a * c
ans =
     3
     8
&amp;gt;&amp;gt; a + c
ans =
     4     3
     4     3
&amp;gt;&amp;gt; a + d
ans =
     6     5
     7     6
&amp;gt;&amp;gt; a .* d
ans =
     5     0
    10     5
&amp;gt;&amp;gt; a * d
ans =
     5     0
    10     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Provide three different methods of generating the matrix &lt;strong&gt;a&lt;/strong&gt;, one method should use the &lt;code&gt;diag()&lt;/code&gt; function, one should use the &lt;strong&gt;eye&lt;/strong&gt; function, and one should use the &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = eye(3,3) * 2
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; d = [2 2 2]
d =
     2     2     2
&amp;gt;&amp;gt; a = diag(d)
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = zeros(3,3);
&amp;gt;&amp;gt; a(1,1) = 2;
&amp;gt;&amp;gt; a(2,2) = 2;
&amp;gt;&amp;gt; a(3,3) = 2;
&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Download this &lt;a href=&quot;../2-problems/script_full_of_errors.m&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_fixed.m&lt;/code&gt; in your folder for this HW. Explain in front of each corrected MATLAB statement, why the error occurred. Modify the last two variables so that they display,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Persian
Persian =
Persian is a human language
&amp;gt;&amp;gt; Spanish
Spanish = 
    'Spanish '    'is '    ' another'    'language'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Modify the last line such that for the last line the code displays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Persian is not the same as Spanish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain these results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
The corrected script can be found &lt;a href=&quot;../2-solutions/script_full_of_errors_fixed.m&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Use MATLAB help to find out how you can create a new directory named &lt;code&gt;mynewdir&lt;/code&gt; from MATLAB command line. Then change the working directory the newly created directory. Then create a MATLAB script in this directory named &lt;code&gt;myscript.m&lt;/code&gt; with the following code in it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% First create an array from -2*pi to 2:pi
x = -2*pi:pi/20:2*pi;

% Calculate |sin(x)|
y = abs(sin(x));

plot(x,y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now on MATLAB command line, run the script by calling its name. What do you get? Save the output as a figure and submit it with your homework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create a new directory and switch the current directory to it using the following commands,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; mkdir mynewdir
&amp;gt;&amp;gt; cd mynewdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The script &lt;code&gt;myscript&lt;/code&gt; generates a plot of $y$ versus $x$ where $y = |sin(x)|$. In doing so, MATLAB opens a new window called &lt;strong&gt;plot window&lt;/strong&gt; that contains the plot of y as a function of x. Here is the resulting figure:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/2-solutions/plot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Now change your working directory to the original directory before you created &lt;code&gt;mynewdir&lt;/code&gt; directory. Try to run the script &lt;code&gt;myscript&lt;/code&gt; you had created again, from MATLAB command line. What do you get? and why?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You get an error message like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; cd mynewdir\
&amp;gt;&amp;gt; myscript
&amp;gt;&amp;gt; cd ..
&amp;gt;&amp;gt; myscript
Undefined function or variable 'myscript'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
And this happens because the script we are trying to run is neither in MATLAB’s working directory, nor in any of MATLAB’s search paths. Therefore, MATLAB gives an error, as it cannot find the requested file.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/2-solutions-variables-values-types&quot;&gt;Homework 2: Solutions - Variables, Values, and Types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on October 02, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 5: MATLAB - values, variables, types - II]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/5-matlab-values-variables-types-II"/>
  <id>http:/ICP2017F/lecture/5-matlab-values-variables-types-II</id>
  <published>2017-09-27T00:00:00-05:00</published>
  <updated>2017-09-27T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture further explains values and variables in MATLAB, as well as common MATLAB operators.&lt;/p&gt;

&lt;p&gt;For general information on MATLAB Data Types, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-types_data-types.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/3rsSGaYnSzc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/tapy40Nk8Ec&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;variables-in-matlab&quot;&gt;Variables in MATLAB&lt;/h2&gt;

&lt;p&gt;A variable is simply a name that we assign to a specific value, in order to avoid repeating the same value frequently in the code, thus writing a cleaner, less error-prone script/code. We discussed in previous lecture, the main values types (classes) in MATLAB. The same also holds for variables, because they are simply names assigned to each value or a set of values. In order to define a variable, the varable name must always appear on the left of an equality, like the following,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; a = 1 % assign value 1 to a
a =
     1
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; 1 = b % this is wrong
 1 = b
   ↑
Error: The expression to the left of the equals sign is not a valid target for an assignment.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get to each of these below. But before that, here are some official and unofficial tips on the variable naming conventions in MATLAB.&lt;/p&gt;

&lt;h3 id=&quot;variable-naming-convention-in-matlab&quot;&gt;Variable naming convention in MATLAB&lt;/h3&gt;

&lt;p&gt;A MATLAB variable can only begin with letter followed by underscore &lt;code&gt;_&lt;/code&gt; and numbers inside or at the end of the variable name. MATLAB is case sensitive, so &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are not the same variable. Other symbols are syntactically invalid anywhere in a variable name. Examples of valid names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;x6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lastValue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n_factorial&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Invalid names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;6x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;n!&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;end&lt;/code&gt; (see below for the reason)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; new_var$
 new_var$
        ↑
Error: The input character is not valid in MATLAB statements or expressions.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; amir = 'teacher';
disp(['Amir is a', amir])
Amir is ateacher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; life_expectancy = 120; disp( ['The life expectancy for the millennials is projected to be ',life_expectancy,' years! (But don''t believe it...)'] )
The life expectancy for the millennials is projected to be x years! (But don't believe it...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;matlab-reserved-names-keywords&quot;&gt;MATLAB reserved names (keywords)&lt;/h4&gt;
&lt;p&gt;There are some limitation as to what names you can choose for your variables, even if they completely obey MATLAB syntax standard. Variable names in MATLAB cannot be the same as &lt;strong&gt;MATLAB keywords&lt;/strong&gt;, which are simply names that reserved for a specific purpose in MATLAB programming.  They are used to define the syntax and structure of the MATLAB language. Note that &lt;strong&gt;MATLAB keywords are case-sensitive&lt;/strong&gt;.  You &lt;strong&gt;cannot&lt;/strong&gt; define variables with the exact same names as &lt;strong&gt;MATLAB keywords&lt;/strong&gt;, such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt;. For a complete list of MATLAB keyword, run the &lt;code&gt;iskeyword&lt;/code&gt; command,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; iskeyword
ans = 
    'break'
    'case'
    'catch'
    'classdef'
    'continue'
    'else'
    'elseif'
    'end'
    'for'
    'function'
    'global'
    'if'
    'otherwise'
    'parfor'
    'persistent'
    'return'
    'spmd'
    'switch'
    'try'
    'while'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;predefined-variables-in-matlab&quot;&gt;Predefined variables in MATLAB&lt;/h4&gt;

&lt;p&gt;Note that there are some predefined variables in MATLAB, that are not considered as keywords. Therefore you can change their values and use them for your own purposes. But, &lt;strong&gt;be very careful with predefined variables and in general&lt;/strong&gt;, it is better to not mess with them, as they can lead to confusion and catastrophe. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true % true is a predefined MATLAB logical variable
ans =
     1
&amp;gt;&amp;gt; class(true)
ans =
logical
&amp;gt;&amp;gt; true = 0 % but I have redefined it as double
true =
     0
&amp;gt;&amp;gt; class(true)
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; class(nan)
ans =
double
&amp;gt;&amp;gt; nan = true
nan =
     0
&amp;gt;&amp;gt; nan = false % redefine nan
nan =
     0
&amp;gt;&amp;gt; class(nan)
ans =
logical
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  nan              true             

&amp;gt;&amp;gt; whos
  Name                 Size            Bytes  Class      Attributes

  life_expectancy      1x1                 8  double               
  nan                  1x1                 1  logical              
  true                 1x1                 8  double               

&amp;gt;&amp;gt; clear nan
&amp;gt;&amp;gt; who

Your variables are:

life_expectancy  true             

&amp;gt;&amp;gt; clear all
&amp;gt;&amp;gt; whos
&amp;gt;&amp;gt; who
&amp;gt;&amp;gt; pi
ans =
    3.1416
&amp;gt;&amp;gt; nan
ans =
   NaN
&amp;gt;&amp;gt; inf
ans =
   Inf
&amp;gt;&amp;gt; i
ans =
   0.0000 + 1.0000i
&amp;gt;&amp;gt; j
ans =
   0.0000 + 1.0000i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Here is a list of som eof the most important predefined variables in MATLAB.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. A list of predefined values and variables in MATLAB.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;pi   &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The number $\pi$ up to 15 significant digits.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;i, j &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;The complex number $\sqrt{-1}$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;inf  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Represents the mathematical Infinity concept, for example, a result of division by zero.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;NaN  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for Not-A-Number. Represents the result of a meaningless mathematical function, like $0/0$.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;clock&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains the current date and time in the form of a 6-element row vector: year,month,day,hour,minute,second.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;date &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Contains a string representing today's date.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;eps  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Stands for &lt;b&gt;epsilon&lt;/b&gt;. It represents the smallest number that can be represented by your MATLAB software.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;ans  &lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;A special variable that MATLAB uses to store the result of MATLAB's command line.&lt;/td&gt;&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;numeric-variables&quot;&gt;Numeric variables&lt;/h3&gt;

&lt;p&gt;We have already extensively discussed number values in the previous lecture. Basically, everything that we have said about number values, holds also for variables of type number.&lt;/p&gt;

&lt;h3 id=&quot;vector-and-matrix-variables&quot;&gt;Vector and matrix variables&lt;/h3&gt;

&lt;p&gt;Again, similar to vector and matrix values, everything holds for the same type variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = [1,2,3,4]
a =
     1     2     3     4
&amp;gt;&amp;gt; class(a)
ans =
double
&amp;gt;&amp;gt; a = [1;2;3;4]
a =
     1
     2
     3
     4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-colon-operator-&quot;&gt;The colon operator &lt;code&gt;:&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;MATLAB has a special character shortcut notation for occasions when you want to create a numeric vector of a specific range with predefined fixed spacing between the values of the vector. This shortcut has the following form,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;begin:increment:end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = 0:10:100
x =
     0    10    20    30    40    50    60    70    80    90   100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-transpose-operator-&quot;&gt;The transpose operator &lt;code&gt;'&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Now as you may have noticed, MATLAB by default creates row-wise vectors, just as &lt;code&gt;x&lt;/code&gt; was generated above. If you want to initialize &lt;code&gt;x&lt;/code&gt; as a column-wise vector, all you need to do is to add the transpose operator &lt;code&gt;'&lt;/code&gt; at the end of the vector or the variable name (but now, you would also need the vector constructor &lt;code&gt;[]&lt;/code&gt;),&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; x = [0:10:100]'
x =
     0
    10
    20
    30
    40
    50
    60
    70
    80
    90
   100
&amp;gt;&amp;gt; whos x
  Name       Size            Bytes  Class     Attributes

  x         11x1                88  double
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, pay attention to the size of the vector &lt;code&gt;x&lt;/code&gt;. What does it mean when it says &lt;code&gt;88 Bytes&lt;/code&gt;?&lt;/p&gt;

&lt;h4 id=&quot;creating-matrices&quot;&gt;Creating matrices&lt;/h4&gt;

&lt;p&gt;There are a number of functions in MATLAB that can help you build predefined matrices or vectors.&lt;/p&gt;

&lt;h5 id=&quot;zeros&quot;&gt;zeros&lt;/h5&gt;

&lt;p&gt;Creates array of all zeros (with optionally given &lt;a href=&quot;https://en.wikipedia.org/wiki/Fixed-point_arithmetic&quot; target=&quot;_blank&quot;&gt;fixed-point&lt;/a&gt; properties. For more information, see &lt;a href=&quot;https://www.mathworks.com/help/fixedpoint/ref/zeros.html#inputarg_p&quot; target=&quot;_blank&quot;&gt;MATLAB’s manual&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; zeros(2,2)
ans =
     0     0
     0     0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = zeros(1,3)
a =
     0     0     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;ones&quot;&gt;ones&lt;/h5&gt;

&lt;p&gt;Creates array of all ones with fixed-point properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = ones(1,3)
a =
     1     1     1
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;eye&quot;&gt;eye&lt;/h5&gt;

&lt;p&gt;Creates identity matrix with fixed-point properties&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; I = eye(3,3)
I =
     1     0     0
     0     1     0
     0     0     1
&amp;gt;&amp;gt; I = eye(3,4)
I =
     1     0     0     0
     0     1     0     0
     0     0     1     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;diag&quot;&gt;diag&lt;/h5&gt;

&lt;p&gt;Creates a diagonal matrix from a given input vector,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;v = [2 1 -1 -2 -5];
&amp;gt;&amp;gt; D = diag(v)
D =
     2     0     0     0     0
     0     1     0     0     0
     0     0    -1     0     0
     0     0     0    -2     0
     0     0     0     0    -5
&amp;gt;&amp;gt; D = diag(v,2)
D =
     0     0     2     0     0     0     0
     0     0     0     1     0     0     0
     0     0     0     0    -1     0     0
     0     0     0     0     0    -2     0
     0     0     0     0     0     0    -5
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
&amp;gt;&amp;gt; D = diag(v,-2)
D =
     0     0     0     0     0     0     0
     0     0     0     0     0     0     0
     2     0     0     0     0     0     0
     0     1     0     0     0     0     0
     0     0    -1     0     0     0     0
     0     0     0    -2     0     0     0
     0     0     0     0    -5     0     0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;code&gt;diag&lt;/code&gt; can also get diagonal elements of an input matrix, if it already exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = eye(3,5)
a =
     1     0     0     0     0
     0     1     0     0     0
     0     0     1     0     0
&amp;gt;&amp;gt; diag(a)
ans =
     1
     1
     1
&amp;gt;&amp;gt; diag(a,-1)
ans =
     0
     0
&amp;gt;&amp;gt; diag(a,1)
ans =
     0
     0
     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;ndgrid&quot;&gt;ndgrid&lt;/h5&gt;

&lt;p&gt;Creates rectangular grid in N-D space.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [X,Y] = ndgrid(1:2:19,2:2:12)
X =
     1     1     1     1     1     1
     3     3     3     3     3     3
     5     5     5     5     5     5
     7     7     7     7     7     7
     9     9     9     9     9     9
    11    11    11    11    11    11
    13    13    13    13    13    13
    15    15    15    15    15    15
    17    17    17    17    17    17
    19    19    19    19    19    19
Y =
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
     2     4     6     8    10    12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Later on, we will see how this function can be used to generate fancy looking graphs like the following,&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/5/2dgrid.png&quot; width=&quot;700&quot; /&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;matrix-concatenation-functions&quot;&gt;Matrix concatenation functions&lt;/h4&gt;

&lt;p&gt;The following functions combine existing matrices to form a new matrix.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;: Concatenate matrices along the specified dimension&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;horzcat&lt;/strong&gt;: Horizontally concatenate matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;vertcat&lt;/strong&gt;: Vertically concatenate matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repmat&lt;/strong&gt;: Create a new matrix by replicating and tiling existing matrices&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;blkdiag&lt;/strong&gt;: Create a block diagonal matrix from existing matrices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cell-variables&quot;&gt;Cell variables&lt;/h3&gt;

&lt;p&gt;When we want to define a variable whose elements are not all of the same type, we need an entity that goes beyond the capabilities of matrices, which can only contain numeric values. Just as with cell values in the previous lecture, a cell array is a data type with indexed data containers called cells. Each cell can contain any type of data. Cell arrays commonly contain &lt;strong&gt;pieces of text (string)&lt;/strong&gt;, &lt;strong&gt;combinations of text and numbers&lt;/strong&gt; from spreadsheets or text files, or they can contain arrays of numeric arrays of different sizes.&lt;/p&gt;

&lt;p&gt;There are two ways to refer to the elements of a cell array. Enclose indices in smooth parentheses, (), to refer to sets of cells — for example, to define a subset of the array. Enclose indices in curly braces, {}, to refer to the text, numbers, or other data within individual cells.&lt;/p&gt;

&lt;h4 id=&quot;creating-cell-arrays&quot;&gt;Creating cell arrays&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; C = {} % empty cell array
C = 
     {}
&amp;gt;&amp;gt; class(C)
ans =
cell
&amp;gt;&amp;gt; size(C)
ans =
     0     0
&amp;gt;&amp;gt; length(C)
ans =
     0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; emptyCell = cell(3,4)
emptyCell = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
&amp;gt;&amp;gt; emptyCell = cell(3,4,2)
emptyCell(:,:,1) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
emptyCell(:,:,2) = 
    []    []    []    []
    []    []    []    []
    []    []    []    []
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = {'Hi', ' ', 'World!'} % a cell array of strings
a = 
    'Hi'    ' '    'World!'
&amp;gt;&amp;gt; class(a)
ans =
cell
&amp;gt;&amp;gt; size(a) % the length of a, in all directions (dimension)
ans =
     1     3
&amp;gt;&amp;gt; length(a) % the length of a, along the longest dimension
ans =
     3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To call a specific element, use &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; names = {'Bloggs', 'San', 'Andersen'};
&amp;gt;&amp;gt; first_cell = names(1);
&amp;gt;&amp;gt; rest_of_cells = names(2:3);
&amp;gt;&amp;gt; third_string = names{3};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can see what the type of each element is by using &lt;code&gt;who&lt;/code&gt; and &lt;code&gt;whos&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; whos
  Name               Size            Bytes  Class     Attributes

  a                  1x3               354  cell                
  ans                1x1                 8  double              
  chr                1x12               24  char                
  first_cell         1x1               124  cell                
  names              1x3               370  cell                
  rest_of_cells      1x2               246  cell                
  third_string       1x8                16  char     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that &lt;code&gt;who&lt;/code&gt; only gives you the names of the variables,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; who

Your variables are:

a              ans            chr            first_cell     names          rest_of_cells  third_string  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cell-array-concatenation-functions&quot;&gt;Cell array concatenation functions&lt;/h4&gt;

&lt;p&gt;There are a wide range of MATLAB functions that act on cells, which can be found &lt;a href=&quot;https://www.mathworks.com/help/matlab/cell-arrays.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;string-char-variables&quot;&gt;String (char) variables&lt;/h3&gt;

&lt;p&gt;Just as explained in the last lecture,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; class(newChr)
ans =
char
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;creating-string-arrays&quot;&gt;Creating string arrays&lt;/h4&gt;

&lt;p&gt;Creating string arrays is rather complex and confusing in MATLAB. Here is &lt;a href=&quot;https://www.mathworks.com/help/matlab/matlab_prog/creating-character-arrays.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s own manual for creating string arrays&lt;/a&gt;. Note that a string is a vector by itself. So you can fetch its characters as elements,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; newChr = 'You''re right'
newChr =
You're right
&amp;gt;&amp;gt; newChr(1)
ans =
Y
&amp;gt;&amp;gt; newChr(1:4)
ans =
You'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;structure-variables&quot;&gt;Structure variables&lt;/h3&gt;

&lt;p&gt;Let’s first review the meanings of Arrays and Cells:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;array&lt;/strong&gt; is a MATLAB data type in which there is a name for the whole data object, and the individual elements in the array can be accessed only through their indices, which are integer numbers. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; arr = [1,2,3,4]
arr =
   1     2     3     4
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
But, notice that &lt;strong&gt;all the elements in a MATLAB array must be of the same data type&lt;/strong&gt;. For example, you cannot combine numeric and string data types,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; arr = [1,'Amir',3,4]
arr =
Amir
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;By contrast, a &lt;strong&gt;cell array&lt;/strong&gt; is a MATLAB data type in which again, there is a name for the whole data object, and the individual elements in the array can be accessed only via their indices, but unlike regular arrays &lt;strong&gt;cell elements do not need to be all of the same type&lt;/strong&gt;,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; arr = {1,'Amir',3,4}
arr = 
  [1]    'Amir'    [3]    [4]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;There is yet another data type in MATLAB called &lt;strong&gt;structure&lt;/strong&gt;, which has also counterparts in most other programming lansuages such as Fortra, C, C++. This is the topic of this section below.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;structure&lt;/strong&gt; is MATLAB data type in which the whole object has a name, just like regular and cell arrays. However, unlike cells and regular arrays, the elements of a structure object can be accessed by their assigned &lt;strong&gt;field names&lt;/strong&gt; instead of a numarical index, as in numeric arrays and cells.&lt;/p&gt;

&lt;p&gt;Like cell arrays, structures can contain data of varying types and sizes. A structure object is a MATLAB data type that groups related data using data containers called &lt;strong&gt;fields&lt;/strong&gt; (instead of cells as in cell arrays). &lt;strong&gt;Each field can contain any type of data&lt;/strong&gt;. You can access data in a structure using &lt;strong&gt;dot notation&lt;/strong&gt; of the form &lt;code&gt;structName.fieldName&lt;/code&gt;. Here is &lt;a href=&quot;https://www.mathworks.com/videos/introducing-structures-and-cell-arrays-101508.html&quot; target=&quot;_blank&quot;&gt;MATLAB video&lt;/a&gt; about cell and structure arrays.&lt;/p&gt;

&lt;h4 id=&quot;creating-structures&quot;&gt;Creating structures&lt;/h4&gt;

&lt;p&gt;To create a structure, you can use function &lt;code&gt;struct&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; field = 'f';
value = {'some text';
         [10, 20, 30];
         magic(5)};
s = struct(field,value)
s = 
3x1 struct array with fields:
    f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create empty structure (which can be manipulated later),&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; s = struct()
s = 
struct with no fields.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
One can also create structure objects by simply using the dot notation,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; amir.univ = 'UT Austin'
amir = 
    univ: 'UT Austin'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Structure objects described above are examples of &lt;strong&gt;scalar objects&lt;/strong&gt; meaning that there is only one single structure object with a set of fields. However, MATLAB also provides ways of creating &lt;strong&gt;structure arrays&lt;/strong&gt;. You might think of structure array, as a cell array, whose columns are indexed by character names (field names) instead of integer indices, and whose rows represent the elements of the structure array. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; student.name = 'Marshall'
student = 
    name: 'Marshall'
&amp;gt;&amp;gt; student.grade = 4.0
student = 
     name: 'Marshall'
    grade: 4
&amp;gt;&amp;gt; student
student = 
     name: 'Marshall'
    grade: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
would create a scalar structure &lt;code&gt;student&lt;/code&gt; with two fields. However, as soon as you add another name to this structure, using array notation like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; student(2).name = 'vivek'
student = 
1x2 struct array with fields:
    name
    grade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
the scalar structure &lt;code&gt;student&lt;/code&gt; is automatically converted to a &lt;strong&gt;structure array&lt;/strong&gt;, that has two rows indexed by integer numbers, and each row has two fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;grade&lt;/code&gt;. Note that, even though we added only the &lt;code&gt;name&lt;/code&gt; field for the second structure element, the other field name is also automatically created for the second structure element, although with no content (the content of the field &lt;code&gt;grade&lt;/code&gt; for the second structure element is empty). There is even no need to add the elements in increasing order. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; student(4).name = 'travis'
student = 
1x4 struct array with fields:
    name
    grade
&amp;gt;&amp;gt; whos student
  Name         Size            Bytes  Class     Attributes

  student      1x4               654  struct          
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
will automatically add (initialize) the third structure element, even though we did not ask for it.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/5/structure.png&quot; width=&quot;600&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        The content of the structure array &lt;code&gt;student&lt;/code&gt; in MATLAB workspace. Note that the rows correspond to the structure elements, and the columns correspond to the structure fields, which are the same for all structure elements. 
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So, if there is so much similarity between MATLAB &lt;strong&gt;cell arrays&lt;/strong&gt; and &lt;strong&gt;structure arrays&lt;/strong&gt;, then what the advantage of defining or using structure arrays instead of cell arrays? The main advantage is that, in the case of structures, the content of the structure element is identified by set of tags (labels) called &lt;strong&gt;field names&lt;/strong&gt;. This becomes very helpful in understanding the content of complex data, when they are written as structures instead of cell arrays.&lt;/p&gt;

&lt;p&gt;There is a along list of functions that can manipulate structures. A list of them is available on MATLAB website &lt;a href=&quot;https://www.mathworks.com/help/matlab/structures.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;matlab-tables&quot;&gt;MATLAB tables&lt;/h3&gt;

&lt;p&gt;Tables are arrays in tabular form whose named columns can have different types. A table is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size &lt;strong&gt;with the one restriction&lt;/strong&gt; that &lt;strong&gt;each variable must have the same number of rows&lt;/strong&gt;. For more information, see &lt;a href=&quot;http://www.mathworks.com/videos/tables-and-categorical-arrays-in-release-2013b-101607.html&quot; target=&quot;_blank&quot;&gt;MATLAB’s educational video on Tables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a table, you can use the function &lt;code&gt;table&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; LastName = {'Smith';'Johnson';'Williams';'Jones';'Brown'};
&amp;gt;&amp;gt; Age = [38;43;38;40;49];
&amp;gt;&amp;gt; Height = [71;69;64;67;64];
&amp;gt;&amp;gt; Weight = [176;163;131;133;119];
&amp;gt;&amp;gt; BloodPressure = [124 93; 109 77; 125 83; 117 75; 122 80];
&amp;gt;&amp;gt; T = table(Age,Height,Weight,BloodPressure,'RowNames',LastName)
T = 
                Age    Height    Weight    BloodPressure
                ___    ______    ______    _____________
    Smith       38     71        176       124     93   
    Johnson     43     69        163       109     77   
    Williams    38     64        131       125     83   
    Jones       40     67        133       117     75   
    Brown       49     64        119       122     80   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a long list of functions that act on tables, a summary of which is available &lt;a href=&quot;https://www.mathworks.com/help/matlab/tables.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-different-kinds-of-brackets-recap&quot;&gt;The Different Kinds of Brackets: Recap&lt;/h2&gt;

&lt;p&gt;To recap, perhaps the two most two basic operations relating to arrays are,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating the array.&lt;/li&gt;
  &lt;li&gt;Accessing elements in the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on whether we have a cell array or a standard array of a basic data type (e.g. char), we can distinguish the different behavior of each of the types of brackets: &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-an-array&quot;&gt;Creating an Array&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Square brackets &lt;code&gt;[ ]&lt;/code&gt;&lt;/strong&gt;: Creates an array where all entries have the same type, e.g. double or char. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;numArray = [5, 62.7, 3];
charArray = ['a', 'b', 'c'];
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Curly brackets &lt;code&gt;{ }&lt;/code&gt;&lt;/strong&gt;: Creates a cell array. Its cells can contain any type. They can contain items of the same type or a mixture of types. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;sameTypeCells = {'Once', 'upon', 'a', 'time'}
diffTypeCells = {'Number', 17}
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that in order to create a vector, you don’t necessarily need ‘,’ between the elements. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1 4]
  ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              

&amp;gt;&amp;gt; [1,4]
ans =
     1     4
&amp;gt;&amp;gt; whos ans
  Name      Size            Bytes  Class     Attributes

  ans       1x2                16  double              
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The same is also true for cell arrays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; sameTypeCells = {'Once'  'upon'  'a'  'time'}
sameTypeCells = 
    'Once'    'upon'    'a'    'time'
&amp;gt;&amp;gt; whos sameTypeCells
  Name               Size            Bytes  Class    Attributes

  sameTypeCells      1x4               474  cell               
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;accessing-elements&quot;&gt;Accessing Elements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Round brackets &lt;code&gt;( )&lt;/code&gt;&lt;/strong&gt;: These can be used to access one or more elements from any type of array. The elements returned always have the same type as the array, i.e. for an array of doubles the round bracket will return doubles, for an array of cells they will return cells. For example, using the arrays created above:
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; numArray(2:3) % Second and third elements.
  ans =
 62.7000    3.0000
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; y = sameTypeCells([1, 3]) % first and third
  y = 
  'Once'    'a'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Curly brackets &lt;code&gt;{ }&lt;/code&gt;&lt;/strong&gt;: When used for accessing elements, curly brackets are specific to cell arrays. They can be used to obtain the content of a cell in its native data type, i.e. not in the form of a cell. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;  &amp;gt;&amp;gt; sameTypeCells{2}
  ans =
  upon
  &amp;gt;&amp;gt; class(sameTypeCells{2})
  ans =
  char
  &amp;gt;&amp;gt; sameTypeCells(2)
  ans = 
  'upon'
  &amp;gt;&amp;gt; class(sameTypeCells(2))
  ans =
  cell
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;array-slicing-indexing&quot;&gt;Array slicing (indexing)&lt;/h3&gt;

&lt;p&gt;Like Fortran and R, MATLAB has powerful built-in array manipulation capabilities. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test = [ 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 ]
test =
     1     2     3     4
     1     2     4     5
     3     5     6     7
&amp;gt;&amp;gt; test(:,:)
ans =
     1     2     3     4
     1     2     4     5
     3     5     6     7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The symbol &lt;code&gt;:&lt;/code&gt; means all the elements. But, you could also specify a range to only get a slice of the array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(1:2,2:3)
ans =
     2     3
     2     4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, suppose you only wanted to get the first and the last column of the array, and the rows two and three. You could do,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(2:3,[1 4])
ans =
     1     5
     3     7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Amazing, isn’t it? You can also slice cell arrays in a similar way. However, note that you can only slice the elements of a cell array in this way, &lt;strong&gt;not the contents of the elements of a cell array&lt;/strong&gt;. To explain this further, consider the following cell array,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test = { 1,2,3,4 ; 1,2,4,5 ; 3,5,6,7 }
test = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now, note that slicing this cell, would give you a cell slice, not a matrix of the values, and note that to do this, you have to access the elements using &lt;code&gt;()&lt;/code&gt; instead of &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test(:,:)
ans = 
    [1]    [2]    [3]    [4]
    [1]    [2]    [4]    [5]
    [3]    [5]    [6]    [7]
&amp;gt;&amp;gt; test(2:3,[1 4])
ans = 
    [1]    [5]
    [3]    [7]
&amp;gt;&amp;gt; class(test(2:3,[1 4]))
ans =
cell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you try slicing the cell  array using &lt;code&gt;{}&lt;/code&gt;, you won’t get a slice anymore, but a MATLAB &lt;a href=&quot;http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&quot; target=&quot;_blank&quot;&gt;comma-separated list&lt;/a&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; test{2:3,[1 4]}
ans =
     1
ans =
     3
ans =
     5
ans =
     7
&amp;gt;&amp;gt; class(test{2:3,[1 4]})
Error using class
The CLASS function must be called from a class constructor. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Since slicing the cell array by &lt;code&gt;{}&lt;/code&gt; returns a comma-separated list, MATLAB’s &lt;code&gt;class()&lt;/code&gt; function gives an error, since it cannot take as input, a list of values.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/5-matlab-values-variables-types-II&quot;&gt;Lecture 5: MATLAB - values, variables, types - II&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 27, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 4: MATLAB - values, variables, types - I]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/4-matlab-values-variables-types-I"/>
  <id>http:/ICP2017F/lecture/4-matlab-values-variables-types-I</id>
  <published>2017-09-22T00:00:00-05:00</published>
  <updated>2017-09-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at teaching you the how to of programming, difference between programming languages and the natural languages, the type of programming errors and the meaning code debugging how to perform simple arithmetic operations on the MATLAB command line.&lt;/p&gt;

&lt;p&gt;For general information on MATLAB Data Types, see &lt;a href=&quot;https://www.mathworks.com/help/matlab/data-types_data-types.html&quot; target=&quot;_blank&quot;&gt;MATLAB manual&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful. For this lecture, video 4.0 was currupt, and could not be uploaded here.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/1KQrVbFvP4c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/M1EClHcfBn8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h2&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;the-content-of-a-computer-program&quot;&gt;The content of a computer program&lt;/h2&gt;

&lt;p&gt;Although different programming languages look different in their syntax standards, virtually all programming languages are comprised of the following major components (instructions):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br /&gt;
  Virtually every program starts with some input data by the user, or the input data that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_coding&quot; target=&quot;_blank&quot;&gt;hard-coded&lt;/a&gt; in the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mathematical/logical operations&lt;/strong&gt;&lt;br /&gt;
  Virtually all programs involve some sort of mathematical or logical operations on the input data to the program.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br /&gt;
  In order to perform the above operations on data, most often (but not always) there is a need to chack if some conditions are met in the program, and then perform specific programming instructions corresponding to each of the conditions.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;repetition / looping&lt;/strong&gt;&lt;br /&gt;
  Frequently it is needed to perform a specific set of operations repeatedly in the program to achieve the program’s goal.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br /&gt;
  At the end of the program, it is always needed to output the program result, either to computer screen, or to a file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;debugging-a-program&quot;&gt;Debugging a program&lt;/h2&gt;

&lt;p&gt;As it is obvious from its name, a &lt;strong&gt;bug&lt;/strong&gt; in a computer program is annoying programming error that needs fixing in order for the program to become executable &lt;strong&gt;or&lt;/strong&gt; to give out the correct answer. The process of removing program bugs is called debugging. There are basically three types of programming bugs (errors):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;syntax error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
A program, weather interpreted or compiled, can be successfully run only if it is &lt;em&gt;syntactically correct&lt;/em&gt;. Syntax errors are related to the structure and standard of the language, and the order by which the language &lt;strong&gt;tokens&lt;/strong&gt; are allowed to appear in the code. For example, when you write your first MATLAB &lt;strong&gt;Hello World&lt;/strong&gt; script, you would write,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp('Hello World!')
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp 'Hello World!';
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
However, if you type a wrong statement, MATLAB will give you a syntax error, like the following,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; disp(*Hello World!*)
 disp(*Hello World!*)
   ↑
Error: Unexpected MATLAB operator.
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;runtime error&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
Runtime errors or sometimes also named &lt;strong&gt;exceptions&lt;/strong&gt; are a class of programming errors that can be detected only at the time of running the code, that is, they are not syntax errors. Examples include:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;memory leaks (very common error in beginner C and C++ codes)&lt;/li&gt;
      &lt;li&gt;uninitialized memory&lt;/li&gt;
      &lt;li&gt;access request to illegal memory address of the computer&lt;/li&gt;
      &lt;li&gt;security attack vulnerabilities&lt;/li&gt;
      &lt;li&gt;buffer overflow
&lt;br /&gt;
These errors can be sometimes tricky to identify.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;semantic error&lt;/strong&gt;
&lt;br /&gt;
Unlike syntax errors that comprise of something the compiler/interpreter does not understand, semantic errors do not cause any compiler/interpreter error messages. However, the resulting compiled/interpreted code will NOT do what it is intended to do. Semantic errors are the most dangerous types of programming errors, as they do not raise any error flag by the compiler/interpreter, yet the program will not do what it is intended to do, although the code may look perfectly fine on its face. Semantic error is almost synonymous with &lt;strong&gt;logical error&lt;/strong&gt;. Dividing two integers using the regular division operator &lt;code&gt;/&lt;/code&gt; in MATLAB while expecting the result to be integer, would be a semantic error. This is because in MATLAB (unlike Fortran, for example), the regular division operator always outputs the result as real (float).&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/7

ans =

    0.2857

&amp;gt;&amp;gt; class(ans)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;methods-of-running-a-matlab-program&quot;&gt;Methods of running a MATLAB program&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Writing MATLAB script on the MATLAB interpreter’s command prompt:&lt;/strong&gt;&lt;br /&gt;
Now, as you may have noticed, in the above example, I used MATLAB command line to code my first simple MATLAB script. This is one of the simplest and quickest method of MATLAB scripting and is actually very useful for testing small simple MATLAB ideas and code snippets on-the-fly.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code written in a MATLAB &lt;code&gt;.m&lt;/code&gt; file from MATLAB command prompt:&lt;/strong&gt;&lt;br /&gt;
As the program size grows, it wiser to put all of your MATLAB script into a single &lt;code&gt;.m&lt;/code&gt; file, and then let the MATLAB interpreter run (i.e., interpret) your entire file all at once. To save the above simple “Hello World” MATLAB code in a file and run it, open a new m-file in MATLAB editor, then paste the code in the file and save it in MATLAB’s current working directory as &lt;code&gt;hello.m&lt;/code&gt;. Then you can either call your program on the command line as the following,
&lt;br /&gt;
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;
or, simply press &lt;code&gt;F5&lt;/code&gt; button on your keyboard to run it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running your MATLAB script file from the Bash/cmd command line&lt;/strong&gt;: You can also run your codes directly from the Windows cmd or Linux Bash command lines by simply calling MATLAB, followed by a list of optional flags, followed by the name and path to your MATLAB script. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;matlab -nodisplay -nodesktop -r &quot;run /home/amir/matlab/hello.m&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Running MATLAB code as an standalone application by compiling it&lt;/strong&gt;: You can also compile your MATLAB script into a binary file (machine language), which is then standalone and executable independently of MATLAB. This is however out of the scope of our course, but you can read more about it &lt;a href=&quot;https://www.mathworks.com/videos/getting-started-standalone-applications-using-matlab-compiler-100088.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;matlab-interpreter-as-a-simple-calculator&quot;&gt;MATLAB interpreter as a simple calculator&lt;/h2&gt;

&lt;p&gt;One of the greatest advantages of MATLAB is that it can be used as a simple calculator and program interpreter on-the-fly, just like Python, Mathematica, R, and other scripting languages. In the following, you will see why and how.&lt;/p&gt;

&lt;h3 id=&quot;values-and-their-types-in-matlab&quot;&gt;Values and their types in MATLAB&lt;/h3&gt;

&lt;p&gt;Values are one of the most fundamental entities in programming. Like any other language, a value in MATLAB can be of  different types, most importantly &lt;strong&gt;Numeric&lt;/strong&gt; (plain integer, long integer, float (real number), complex), &lt;strong&gt;Boolean&lt;/strong&gt; (logical) which is a subtype of Numeric, or &lt;strong&gt;char&lt;/strong&gt; (string), and many more. Each value type in MATLAB is a class. We will get to what classes are, at the end of the semester. For now, all you need to know is that there 6 main data types (in addition to &lt;a href=&quot;https://www.mathworks.com/help/matlab/function-handles.html&quot; target=&quot;_blank&quot;&gt;function handles&lt;/a&gt;).&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/4/fundamental_classes.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Main MATLAB value types (classes).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;numeric-and-logical-values-in-matlab&quot;&gt;Numeric and logical values in MATLAB&lt;/h4&gt;

&lt;p&gt;The following are a few example arithmetic operations with values in MATLAB. You can perform very simple arithmetic on the MATLAB command line, and the result immediately by pressing &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 + 5 % Just typing some comment on the MATLAB command line. Anything after % is a comment and will be ignored.

ans =

     7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 - 7 % difference

ans =

    -5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2 * 7 % product

ans =

    14
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true % logical true value

ans =

     1

&amp;gt;&amp;gt; false % logical false value

ans =

     0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;obtaining-the-type-ie-class-of-a-value&quot;&gt;Obtaining the type (i.e. class) of a value&lt;/h4&gt;

&lt;p&gt;You can use the MATLAB’s built-in function &lt;code&gt;class&lt;/code&gt; to get the type of a value in MATLAB (Of course, this is somewhat obvious and redundant for a value as we already readily know the type of a value).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(2*7) % class function gives you the type of the input object to function &quot;class&quot;

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class('This is a MATLAB string (char)') % a char value in MATLAB

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
 class(&quot;This is a MATLAB string&quot;) % Note that you cannot use quotation marks for representing string values.
       ↑
Error: The input character is not valid in MATLAB statements or expressions.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(class(1))

ans =

char
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(true)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(false)

ans =

logical
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vector-and-matrix-values&quot;&gt;vector and matrix values&lt;/h4&gt;

&lt;p&gt;Vectors and matrices are used to represent sets of values, all of which have the same type. A matrix can be visualized as a table of values. The dimensions of a matrix are $rows \times cols$, where $rows$ is the number of rows and $cols$ is the number of columns of the matrix. A &lt;strong&gt;vector&lt;/strong&gt; in MATLAB is equivalent to a one-dimensional array or matrix.&lt;/p&gt;

&lt;h5 id=&quot;creating-row-wise-and-column-wise-vectors&quot;&gt;Creating row-wise and column-wise vectors&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;,&lt;/code&gt; or space to separate the elements of a row-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1 2 3 4] % a space-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1 2 3 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1, 2, 3, 4] % a comma-separated row vector

ans =

     1     2     3     4

&amp;gt;&amp;gt; class([1, 2, 3, 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate the elements of a column-wise vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1; 2; 3; 4] % a column vector

ans =

     1
     2
     3
     4

&amp;gt;&amp;gt; class([1; 2; 3; 4])

ans =

double
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;creating-matrix-values&quot;&gt;Creating matrix values&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;;&lt;/code&gt; to separate a row of matrix from the next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; [1,2,3,4;5,6,7,8;9,10,11,12] % a 3 by 4 matrix

ans =

     1     2     3     4
     5     6     7     8
     9    10    11    12
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cells-and-tables&quot;&gt;Cells and tables&lt;/h4&gt;

&lt;p&gt;Matrices and vectors can only store numbers in MATLAB. If one needs a more general array representation for a list of strings for example, then one has to use cells or tables.&lt;/p&gt;

&lt;h5 id=&quot;cell-array-values&quot;&gt;Cell array values&lt;/h5&gt;

&lt;p&gt;Cell arrays, are array entities that can contain data of varying types and sizes. A &lt;strong&gt;cell array&lt;/strong&gt; is a data type with indexed data containers called &lt;strong&gt;cells&lt;/strong&gt;, where each cell can contain any type of data. Cell arrays commonly contain either lists of text strings, combinations of text and numbers, or numeric arrays of different sizes. Refer to sets of cells by enclosing indices in smooth parentheses, &lt;code&gt;()&lt;/code&gt;. Access the contents of cells by indexing with curly braces, &lt;code&gt;{}&lt;/code&gt;. Also, to define a cell, use &lt;code&gt;{}&lt;/code&gt; like the following notation,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', ' ', 'World!'} % a cell array of strings

ans = 

    'Hi'    ' '    'World!'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class({'Hi', ' ', 'World!'})

ans =

cell
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; {'Hi', 1, true, 'World!'}

ans = 

    'Hi'    [1]    [1]    'World!'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;table-values&quot;&gt;Table values&lt;/h5&gt;

&lt;p&gt;MATLAB tables are arrays in tabular form whose named columns can have different types. Table is a data type suitable for column-oriented or tabular data that is often stored as columns in a text file or in a spreadsheet. Tables consist of rows and column-oriented variables. Each variable in a table can have a different data type and a different size with the one restriction that each variable must have the same number of rows.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/4/table.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example MATLAB table.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Later on, we learn more about Tables and Cells in MATLAB, once we introduce MATLAB variables.&lt;/p&gt;

&lt;h4 id=&quot;value-coercion-in-matlab&quot;&gt;Value coercion in MATLAB&lt;/h4&gt;

&lt;p&gt;Value coercion is the &lt;strong&gt;implicit&lt;/strong&gt; process by which the MATLAB interpreter/compiler automatically converts a value of one type into a value of another type when that second type is required by the surrounding context. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; class(int32(1.0)) % int32 gives a 32-bit (4-byte) integer.
ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(2.0) * int32(1.0) % Note that the product of two integers, is integer.

ans =

           2

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) * 2.5 % Note that the product of float and integer, is coerced into an integer!

ans =

           3

&amp;gt;&amp;gt; class(ans)

ans =

int32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; int32(1.0) / 2.5 % Note that the division of float and integer, is coerced into an integer.

ans =

           0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2.0 / 7 % floating point division with float result

ans =

    0.2857
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + 1 % logical and double are coerced into double

ans =

     2

&amp;gt;&amp;gt; class(true + 1)

ans =

double
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;But note that,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + int32(1) % you cannot combine logical with integer
Error using  + 
Integers can only be combined with integers of the same class, or scalar doubles.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; true + false

ans =

     1

&amp;gt;&amp;gt; true * false

ans =

     0

&amp;gt;&amp;gt; true / false
Undefined operator '/' for input arguments of type 'logical'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    As you saw above, unlike other languages, such as Python, integer value has precedence over float, that is, the result of the calculation is coerced into an integer.
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;b&gt;ATTENTION&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    I recommend you to always explicitly write the type of each value in your calculations or your MATLAB scripts. For example, denote all floats by adding a decimal point &lt;code&gt;.&lt;/code&gt; to each float (real) value.
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;some-further-useful-matlab-commands&quot;&gt;Some further useful MATLAB commands&lt;/h4&gt;

&lt;p&gt;MATLAB has a built-in function called &lt;code&gt;format&lt;/code&gt; that can modify the output style of MATLAB on the command line. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 2/5

ans =

    0.4000

&amp;gt;&amp;gt; format long
&amp;gt;&amp;gt; 2/5

ans =

   0.400000000000000

&amp;gt;&amp;gt; format short
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; format compact
&amp;gt;&amp;gt; 2/5
ans =
    0.4000
&amp;gt;&amp;gt; format loose
&amp;gt;&amp;gt; 2/5

ans =

    0.4000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here is a complete list of options that format can take,&lt;/p&gt;
&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 2. A list of MATLAB &lt;code&gt;format&lt;/code&gt; options.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Style&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Result&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Example&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;

&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;short (default)&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;long&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short scientific notation with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longE&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long scientific notation with 15 digits after the decimal point for double values, and 7 digits after the decimal point for single values.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short, fixed-decimal format or scientific notation, whichever is more compact, with a total of 5 digits.&lt;/td&gt;&lt;td&gt;3.1416&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longG&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long, fixed-decimal format or scientific notation, whichever is more compact, with a total of 15 digits for double values, and 7 digits for singlevalues.&lt;/td&gt;&lt;td&gt;3.141592654&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;shortEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Short engineering notation (exponent is a multiple of 3) with 4 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;longEng&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Long engineering notation (exponent is a multiple of 3) with 15 significant digits.&lt;/td&gt;&lt;td&gt;3.14E+00&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;+&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Positive/Negative format with +, -, and blank characters displayed for positive, negative, and zero elements.&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;bank&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Currency format with 2 digits after the decimal point.&lt;/td&gt;&lt;td&gt;3.14&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Hexadecimal representation of a binary double-precision number.&lt;/td&gt;&lt;td&gt;400921fb54442d18&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;code&gt;rat&lt;/code&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Ratio of small integers.&lt;/td&gt;&lt;td&gt;355/113&lt;/td&gt;&lt;/tr&gt;


&lt;br /&gt;&lt;br /&gt;

    
&lt;/tbody&gt;&lt;/table&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/4-matlab-values-variables-types-I&quot;&gt;Lecture 4: MATLAB - values, variables, types - I&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 22, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 3: MATLAB for beginners]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/3-matlab-for-beginners"/>
  <id>http:/ICP2017F/lecture/3-matlab-for-beginners</id>
  <published>2017-09-20T00:00:00-05:00</published>
  <updated>2017-09-20T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;Goals: This lecture aims at providing an introduction to MATLAB programming for beginners, how to install it, different components of the Graphical Unit Interface of MATLAB, as well as how to perform simple arithmetic operations in MATLAB.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/IrEdypnsCyY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;matlab-a-brief-history&quot;&gt;MATLAB: a brief history&lt;/h2&gt;

&lt;p&gt;MATLAB was developed in the mid 1980’, by the collaborative works of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cleve_Moler&quot; target=&quot;_blank&quot;&gt;Cleve Moler&lt;/a&gt;, a PhD graduate of Stanford University, and &lt;a href=&quot;https://en.wikipedia.org/wiki/John_N._Little&quot; target=&quot;_blank&quot;&gt;John Little&lt;/a&gt;, a graudate of MIT. Together they co-founded a private company named &lt;a href=&quot;https://en.wikipedia.org/wiki/MathWorks&quot; target=&quot;_blank&quot;&gt;MathWorks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The name of the language and software they developed, &lt;a href=&quot;https://en.wikipedia.org/wiki/MATLAB&quot; target=&quot;_blank&quot;&gt;MATLAB&lt;/a&gt; is an attribution to the original purpose of the software, that is, to serve as a &lt;strong&gt;mat&lt;/strong&gt;rix &lt;strong&gt;lab&lt;/strong&gt;oratory. Cleve Moler was among the developers of the popular Fortran libraries &lt;a href=&quot;https://en.wikipedia.org/wiki/EISPACK&quot; target=&quot;_blank&quot;&gt;EISPACK&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/LINPACK&quot; target=&quot;_blank&quot;&gt;LINPACK&lt;/a&gt;. He wanted to provide his students with a higher-level environment, so that they could use these high-performance Fortran libraries without the need to learn Fortran.&lt;/p&gt;

&lt;p&gt;Since MATLAB was developed by a scientist for scientists, its structure and syntax has more resemblance to the popular programming language of scientists, Fortran, than to any other language. You will soon notice this similarity when we get to learn modern Fortran later on in this course.&lt;/p&gt;

&lt;p&gt;An informative historical review of MATLAB by its own inventor is &lt;a href=&quot;https://www.mathworks.com/videos/evolution-of-matlab-93125.html&quot; target=&quot;_blank&quot;&gt;available to watch on MathWork website&lt;/a&gt;. A lower quality of the same video can be accessed on youtube, which I embed here for you:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fa-sUaKv56A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;matlab-why-do-you-need-to-learn-it&quot;&gt;MATLAB: Why do you need to learn it?&lt;/h2&gt;

&lt;p&gt;For the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It targets engineers as well as natural and medical scientists as its main audience, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has excellent &lt;em&gt;native&lt;/em&gt; array/matrix representation and manipulation tools, just like Fortran.&lt;/li&gt;
  &lt;li&gt;It has extensive sets of high-level commands for numerical computing, like Fortran.&lt;/li&gt;
  &lt;li&gt;It is an interpreted language that makes it really easy to use anytime, unlike C, C++, Fortran which are compiled languages.&lt;/li&gt;
  &lt;li&gt;It has excellent set of graphical tools for 2D and 3D plotting (in fact other languages like Python have tried to copy from and reverse-engineer the graphical tools and commands available in MATLAB).&lt;/li&gt;
  &lt;li&gt;It has one of the largest user-base (over 2,000,000 users) in all scientific communities.&lt;/li&gt;
  &lt;li&gt;There is an extensive list of numerical libraries written in MATLAB over the past decades by all those science/engineering -oriented users.&lt;/li&gt;
  &lt;li&gt;It has excellent manual, and user guide, with extensive illustrative examples. Basically, you might not even need to take a MATLAB class, if you could closely and carefully follow MATLAB’s user guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-caveats&quot;&gt;MATLAB caveats&lt;/h2&gt;

&lt;p&gt;Here is a personal list of MATLAB caveats that I can think of, at the moment:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is not free.&lt;/li&gt;
  &lt;li&gt;It is slow compared to compiled programming languages. See for example, the following performance comparisons and tests in &lt;a href=&quot;https://modelingguru.nasa.gov/docs/DOC-1762&quot; target=&quot;_blank&quot;&gt;NASA modeling guru web page&lt;/a&gt;. As you can see there, the &lt;strong&gt;performance of MATLAB script can be significantly lower than compiled languages such as Fortran and C&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you have already coded in a fully object-oriented programming (OOP) language, in particular Python, you will find some oddities in MATLAB’s OOP implementation. You may feel this when, for example, you are working with &lt;a href=&quot;xx&quot; target=&quot;_blank&quot;&gt;cell arrays&lt;/a&gt; in MATLAB. We will see later on, what cell arrays are.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-features&quot;&gt;MATLAB features&lt;/h2&gt;

&lt;p&gt;MATLAB has the following features and attributes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a fourth-generation, high-level programming language.&lt;/strong&gt; Remember from our &lt;a href=&quot;http:/ICP2017F/lecture/2-programming-history&quot; target=&quot;_blank&quot;&gt;second lecture&lt;/a&gt;, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C++, and C are considered high, medium, and low -level programming languages respectively.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an array-based programming language&lt;/strong&gt;, meaning that it is designed to be with the goal of facilitating array manipulation for scientists and engineers.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is a multi-paradigm programming language&lt;/strong&gt;. MATLAB allows the programmer to use the following major programming paradigms in their codes:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;   Later on, we will get to each of these programming paradigms in MATLAB.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MATLAB is an interpreted language&lt;/strong&gt;. A programming language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:&lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Compilation&lt;/strong&gt;: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.&lt;br /&gt;
&lt;br /&gt;MATLAB is an interpreted language, meaning that, as soon as you type a MATLAB command on the MATLAB’s command-line and press enter, the MATLAB interpreter executes the statement.  MATLAB programs can also be compiled using &lt;a href=&quot;https://www.mathworks.com/products/compiler.html&quot; target=&quot;_blank&quot;&gt;MATLAB Compiler&lt;/a&gt;, to create standalone applications to be executed later when desired.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The extension for human-readable MATLAB source code file is &lt;code&gt;.m&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-useful-resources-for-matlab&quot;&gt;Some useful resources for MATLAB&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/matlabcentral/&quot; target=&quot;_blank&quot;&gt;MATLAB Central&lt;/a&gt;: A repository of many codes, libraries written in MATLAB, as well as many MATLAB related questions with answers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mathworks.com/matlabcentral/newsreader/&quot; target=&quot;_blank&quot;&gt;comp.soft-sys.matlab&lt;/a&gt;: MATLAB’s newsletter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mathworks.com/moler&quot; target=&quot;_blank&quot;&gt;http://www.mathworks.com/moler&lt;/a&gt;: The original MATLAB developer’s page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathworks.com/videos/search.html?q=&amp;amp;page=1&quot; target=&quot;_blank&quot;&gt;MATLAB educational videos&lt;/a&gt;: A long search-able list of educational MATLAB videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matlab-installation&quot;&gt;MATLAB installation&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, you can download and install a specific version of MATLAB for your personal computer. MATLAB is available to all students enrolled at UT Austin for free. It can be downloaded from &lt;a href=&quot;http://www.engr.utexas.edu/itg/products/8017-matlab&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-replicas-of-matlab&quot;&gt;Alternative replicas of MATLAB&lt;/h3&gt;

&lt;p&gt;Since MATLAB is not free, the GNU organization has started a project called &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Octave&quot; target=&quot;_blank&quot;&gt;GNU Octave&lt;/a&gt; which is a reverse-engineering of MATLAB language and environment, hence mostly compatible with it, but &lt;strong&gt;at no cost&lt;/strong&gt;!. You can download it from &lt;a href=&quot;https://www.gnu.org/software/octave/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. GNU Octave is a free open source software (FOSS) package which is &lt;em&gt;mostly compatible&lt;/em&gt; with MATLAB. It provides a very similar command line interpreter interface, and implements most of the functionality as the commercial MATLAB product. Nevertheless, there are subtle differences which anyone attempting to switch to GNU Octave or to write MATLAB/GNU Octave-compatible scripts must appreciate. Octave was conceived in 1988 and has been under development since 1992, and over the years has made a great deal of progress, especially in the area of graphics and plotting.&lt;/p&gt;

&lt;h3 id=&quot;matlab-script-editors&quot;&gt;MATLAB script editors&lt;/h3&gt;

&lt;p&gt;I highly recommend you to use MATLAB’s own IDE for MATLAB scripting since it has fantastic features such as automatic debugging, indentation and syntax highlight. However, once you become proficient in MATLAB scripting, you may realize that the text-editing capabilities of MATLAB IDE are not that great compared to highly popular general-purpose text editors. In that case, I recommend you to use,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot;&gt;Sublime&lt;/a&gt;  (available Windows, OS X, Linux)&lt;br /&gt;
Sublime is a sophisticated text editor for codes in many different languages, including MATLAB, C, C++, Fortran, etc. It has many advanced tools for code editing and syntax highlighting.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://notepad-plus-plus.org/&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt;  (available only on Windows)&lt;br /&gt;
Notepad++ is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code syntax accordingly. However, you should keep in mind that it is not specifically designed for MATLAB. If you are professional multi-language programmer, you will soon find the hidden gems in Notepad++, that are not available in any other editor, including MATLAB’s own editor.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;which-matlab-version-should-i-use&quot;&gt;Which MATLAB version should I use?&lt;/h3&gt;

&lt;p&gt;Always try to use the latest version if possible, since new features are added to MATLAB every year.&lt;/p&gt;

&lt;h3 id=&quot;using-matlab-online-in-your-web-browser&quot;&gt;Using MATLAB online, in your web browser&lt;/h3&gt;

&lt;p&gt;Since as a UT student, you have a campus-wide MATLAB licence, you can login to your account to use MATLAB in your browser, on a remote server. For instructions on how to use MATLAB on-line, click &lt;a href=&quot;https://www.mathworks.com/products/matlab-online.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;matlab-environment&quot;&gt;MATLAB environment&lt;/h2&gt;

&lt;p&gt;As soon as you open MATLAB, you will likely encounter a environment like the following figure.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/3/matlab.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A snapshot of MATLAB environment.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The main compartments in MATLAB environment are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;command window&lt;/strong&gt;: where you can type single or multiple line commands.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;script editor&lt;/strong&gt;: which is where you can create new or open/edit existing MATLAB files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;address bar&lt;/strong&gt;: indicating the &lt;strong&gt;current working directory&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;folder tree window&lt;/strong&gt;: showing all files in the current working directory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;workspace window&lt;/strong&gt;: which shows all the global variables currently defined in MATLAB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;useful-matlab-commands&quot;&gt;Useful MATLAB commands&lt;/h2&gt;

&lt;p&gt;The following are some useful MATLAB commands  that allow you to get help on the command-line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;demo&lt;/code&gt; will load MATLAB examples in the Help Browser, illustrating some features of MATLAB.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help &amp;lt;keyword&amp;gt;&lt;/code&gt; will explain any function. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help sin
sin    Sine of argument in radians.
 sin(X) is the sine of the elements of X.

 See also asin, sind.

 Reference page for sin
 Other functions named sin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;help help&lt;/code&gt;  will explain how MATLAB help works.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lookfor &amp;lt;keyword&amp;gt;&lt;/code&gt; searches through MATLAB help for a specific word or phrase. For example,
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; lookfor gaussian
hwv                            - Create a Hull-White/Vasicek mean-reverting Gaussian diffusion model
xreggpr                        - xreggpm Gaussian Process model constructor
gmdistribution                 - Gaussian mixture distribution class.
awgn                           - Add white Gaussian noise to a signal.
bigaussianir                   - Bi-Gaussian Doppler filter impulse response.
gaussianir                     - Gaussian Doppler filter impulse response.
intfiltgaussian_intfactor      - Support function used by @channel package for
wgn                            - Generate white Gaussian noise.
commblkgaussfilt               - Gaussian filter block helper function.
commblkgaussiansrc2            - Mask function for Gaussian Noise Generator block
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;doc &amp;lt;keyword&amp;gt;&lt;/code&gt; will bring up a documentation page in the Help Browser for the given keyword.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dir &amp;lt;path&amp;gt;&lt;/code&gt; lists the contents of the given path.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; dir
.                lcdata.xml       m3iregistry      mcc.bat          mexext.bat       mw_mpiexec.bat   win64            
..               lcdata.xsd       matlab.exe       mex.bat          mexsetup.pm      registry         worker.bat       
deploytool.bat   lcdata_utf8.xml  mbuild.bat       mex.pl           mexutils.pm      util             
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pwd&lt;/code&gt; outputs the current working directory.
    &lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; pwd
ans =
C:\Program Files\MATLAB\R2016a\bin
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;quit&lt;/code&gt; quits MATLAB by closing the application.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;diary('filename')&lt;/code&gt; (or &lt;code&gt;diary filename&lt;/code&gt;) saves  all subsequent keyboard interactions with MATLAB Command Window to the file &lt;code&gt;filename&lt;/code&gt;. &lt;code&gt;diary off&lt;/code&gt; suspends the diary. &lt;code&gt;diary on&lt;/code&gt; resumes diary mode using the current filename, or the default filename diary if none has yet been specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments-in-matlab-scripts&quot;&gt;Comments in MATLAB scripts&lt;/h2&gt;

&lt;p&gt;Comment lines in MATLAB begin with percent character &lt;code&gt;%&lt;/code&gt;. Anything after &lt;code&gt;%&lt;/code&gt; is ignored by MATLAB interpreter. The &lt;code&gt;%&lt;/code&gt; character itself only tells the interpreter to ignore the remainder of the same line. In the MATLAB Editor, &lt;font color=&quot;#00e600&quot;&gt;commented areas are printed in green by default&lt;/font&gt;. There are two useful keyboard shortcuts for adding and removing chunks of comments. Select the code you wish to comment or uncomment, and then press &lt;code&gt;Ctrl-R&lt;/code&gt; to place one &lt;code&gt;%&lt;/code&gt; symbol at the beginning of each line and `Ctrl-T to do the opposite.&lt;/p&gt;

&lt;p&gt;MATLAB also supports multi-line comments, akin to &lt;code&gt;/* ... */&lt;/code&gt; in languages like C or C++, via the &lt;code&gt;%{ %}&lt;/code&gt; delimiters. But there is a small and important difference. In MATLAB, the &lt;strong&gt;lines containing &lt;code&gt;%{&lt;/code&gt; or &lt;code&gt;%}&lt;/code&gt; should not contain any other text (except white spaces)&lt;/strong&gt;. Otherwise the multi-line comment would not work as you wish. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{ x = 1;
y=2;%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You notice that in the above, &lt;code&gt;y=2;&lt;/code&gt; is not commented. The correct syntax is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;%{
x = 1;
y=2;
%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Comments are useful for explaining what function a certain piece of code performs especially if the code relies on implicit or subtle assumptions or otherwise perform subtle actions. Doing this is a good idea both for yourself and for others who try to read your code. It is highly recommended to include a block of comments at the beginning of your codes explaining what the your MATLAB script or function does does and how to use it. MATLAB will output the leading comments that appear at the beginning of an &lt;code&gt;.m&lt;/code&gt; file, when you type,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; help &amp;lt;my function name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
All of MATLAB’s built-in functions written in MATLAB are documented this way.&lt;/p&gt;

&lt;h2 id=&quot;matlabs-search-path&quot;&gt;MATLAB’s search path&lt;/h2&gt;

&lt;p&gt;MATLAB has a search path and strategy that is used to find variables, and MATLAB scripts. MATLAB’s current &lt;strong&gt;working directory&lt;/strong&gt; is always displayed in the MATLAB address bar. When you enter a name in MATLAB’s command prompt, the MATLAB interpreter attemps to find an entity with that name in the following order:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First, it looks for a variable of the same name in MATLAB’s workspace and if it exists, MATLAB displays the value of the variable.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB, looks for a M-file (a MATLAB script) in the working directory of MATLAB.&lt;/li&gt;
  &lt;li&gt;If not, then MATLAB looks for an M-file in MATLAB’s list of directories (the search path) to find the file. If no entity exists with the given name, then MATLAB gives an error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/3-matlab-for-beginners&quot;&gt;Lecture 3: MATLAB for beginners&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 20, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Solutions - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/1-solutions-version-control-system"/>
  <id>http:/ICP2017F/quiz/1-solutions-version-control-system</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-version-control-system.html&quot; target=&quot;_blank&quot;&gt;Quiz 1: Problems - Version control system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this quiz.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer: B, C&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Answer:&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help -a
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/1-solutions-version-control-system&quot;&gt;Quiz 1: Solutions - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Problems - Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/quiz/1-problems-version-control-system"/>
  <id>http:/ICP2017F/quiz/1-problems-version-control-system</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims at testing your basic knowledge of Git version control system. Don’t forget to push your answers to your remote repository by the end of quiz time.&lt;br /&gt;
Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add --u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all Git commands for you.&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/quiz/1-problems-version-control-system&quot;&gt;Quiz 1: Problems - Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 2: Programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/2-programming-history"/>
  <id>http:/ICP2017F/lecture/2-programming-history</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief history of the development of computers and computer programming languages and their mutual interaction with rapid developments in natural sciences in the 20th century.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/oA0VoFGBlwU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-glossary&quot;&gt;Programming glossary&lt;/h3&gt;

&lt;p&gt;The following table contains some technical programming phrases that are often used and heard in the field of computer science and programming, that you need to be familiar as well.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px;text-align:center;&quot;&gt;
Table 1. Some programming phrases that are discussed in this lecture. The boldface words in the description column indicate items that are expressions with their own description in this table.
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Expression&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;4rm&quot; color=&quot;red&quot;&gt;Description&lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;algorithm&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A general method for solving a class of problems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;bug&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error in &lt;b&gt;program&lt;/b&gt; that has to be resolved for successful execution of the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiled language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose programs need to be compiled by a &lt;b&gt;compiler&lt;/b&gt; in order to run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;compiler&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A software that translates an entire high-level program into a lower-level language to make it &lt;b&gt;executable&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;debugging&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of finding and removing any type of error in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;exception&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An alternative name for &lt;b&gt;runtime error&lt;/b&gt; in the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;executable&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An &lt;b&gt;object code&lt;/b&gt;, ready to be executed. Generally has the file extension &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.out&lt;/code&gt; or no extension at all.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;formal language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that is intentionally designed for specific purposes, which, unlike &lt;b&gt;natural languages&lt;/b&gt;, follows a strict standard.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;high-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language (e.g., MATLAB, Python, Fortran, Java, etc) that has high level of abstraction from the underlying hardware.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;interpreted language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language whose statements are interpreted line-by-line by an &lt;b&gt;interpreter&lt;/b&gt; and immediately executed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;low-level language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A programming language that has a low-level of abstraction from computer hardware and architecture, such as Assembly. Very close to machine code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;natural language&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A language that evolves naturally, and has looser &lt;b&gt;syntax&lt;/b&gt; rules and standard compared to &lt;b&gt;formal languages&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;object code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The output of a compiler after translating a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;parsing&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;Reading and examining a file/program and analyzing the syntactic structure of the file/program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;portability&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program's ability to be executable on more than one kind of computer architecture, without changing the code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;problem solving&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The process of formulating a problem and finding and expressing a solution to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;program&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A set of instructions in a that together specify an algorithm a computation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;runtime error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;An error that does not arise and cause the program to stop, until the program has started to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;script&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in an &lt;b&gt;interpreted language&lt;/b&gt; stored in a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantic error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in a program that makes the program do something other than what was intended. Catching these errors can be very tricky.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;semantics&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The meaning of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;source code&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A program in a high-level compiled language, before being compiled by the &lt;b&gt;compiler&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax error&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;A type of error in program that violates the standard &lt;b&gt;syntax&lt;/b&gt; of the programming language, and hence, the program cannot be interpreted or compiled until the syntax error is resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;syntax&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;The structure of a program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;b&gt;token&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;One of the basic elements of the syntactic structure of a program, in analogy with &lt;i&gt;word&lt;/i&gt; in a &lt;b&gt;natural language&lt;/b&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-rise-of-the-machines&quot;&gt;The rise of the machines&lt;/h3&gt;

&lt;p&gt;Immediately after the first world-war and during the second world-war, many fields of science and engineering witnessed rapid growth. In particular, two fields of mathematical and physical sciences, &lt;strong&gt;mathematical programming&lt;/strong&gt; (a terminology used commonly in place of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematical_optimization&quot; target=&quot;_blank&quot;&gt;mathematical optimization&lt;/a&gt;) (not to be confused with computer programming!) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot; target=&quot;_blank&quot;&gt;Monte Carlo methods&lt;/a&gt; witnessed rapid exponential growth in both theory and practical applications. Parallel to progresses in natural sciences, a new field of science and technology, &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_computer_science&quot; target=&quot;_blank&quot;&gt;computer science&lt;/a&gt;, began to rise during the years of world-war-II, partly in response to the needs of war, but mostly in response to the exponential growth of natural sciences and engineering in the post-world-war-II era.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/wordFreq.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A word-usage relative frequency plot, illustrating the exponential growth of computer technology in the mid 20th century, as well as developments in the fields of deterministic and stochastic optimization techniques, which ultimately led to the emergence of &lt;a href=&quot;https://www.nibib.nih.gov/science-education/science-topics/computational-modeling&quot; target=&quot;_blank&quot;&gt;computational modeling&lt;/a&gt; as the third pillar of science. Advances in the computational methods and technology also led to the gradual popularity of Bayesian techniques in mathematical modeling toward the end of the 20th century, and the emergence of an important of subfield of computational modeling, now known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Uncertainty_quantification&quot; target=&quot;_blank&quot;&gt;Uncertainty Quantification&lt;/a&gt;. Note that the positive-slope linear behavior on this semi-logarithmic plot indicates a exponential growth. (Data is adopted from &lt;a href=&quot;https://books.google.com/ngrams&quot; target=&quot;_blank&quot;&gt;Google Ngrams&lt;/a&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The history of computer programming probably begins with the development of the first computer, &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt; (&lt;em&gt;Electronic Numerical Integrator And Computer&lt;/em&gt;), one of the earliest electronic general-purpose computers made.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/computer.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A diagram representing the basic underlying structure of every digital device, most importantly, desktop computers.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;how-to-express-algorithms-in-machine-language&quot;&gt;How to express algorithms in machine language?&lt;/h3&gt;

&lt;p&gt;To answer this question, we have to first understand that all human knowledge can be divided into two classes: declarative and imperative (procedural). As implicitly described by their names, &lt;strong&gt;declarative knowledge&lt;/strong&gt; involves statements of fact. For example,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J is the tenth letter of the alphabet, or,&lt;/li&gt;
  &lt;li&gt;Washington is the capital of USA, or,&lt;/li&gt;
  &lt;li&gt;$x$ is square-root of $y$ only and only if $x*x=y$,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;are all declarative statements. By contrast, &lt;strong&gt;imperative knowledge&lt;/strong&gt; is about how to accomplish something, or basically, is a recipe on how to do something, known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithm&quot; target=&quot;_blank&quot;&gt;algorithm&lt;/a&gt; in scientific terminology. In order for a computer to achieve a specific computational goal, it needs to be given a set of tasks, collectively called algorithm. For example, most calculators contain a rather complex &lt;a href=&quot;https://www.sistenix.com/sqrt.html&quot; target=&quot;_blank&quot;&gt;algorithm for calculating the square root of a given input number&lt;/a&gt;, like the following,&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/sqrt.png&quot; width=&quot;500&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As seen, the algorithm has a &lt;strong&gt;start&lt;/strong&gt;, a &lt;strong&gt;flow control&lt;/strong&gt;, and a &lt;strong&gt;stop&lt;/strong&gt;. These are the basic elements of any algorithm. In the early 20th century, the algorithms had to be physically and mechanically implemented in computers. Therefore, the earliest computing machines were often called &lt;strong&gt;fixed-program computers&lt;/strong&gt;. This means that they could only perform the algorithms for which they had been physically wired and built. An example of such machines is &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot; target=&quot;_blank&quot;&gt;ENIAC&lt;/a&gt;. &lt;strong&gt;Reprogramming&lt;/strong&gt; such computers, when possible at all, is a laborious process, starting with flowcharts and paper notes, followed by detailed engineering designs, and then the often-arduous process of physically rewiring and rebuilding the machine. For example, it could take almost a month to set up a program on ENIAC and get it working.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/2/eniac.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        Portraits of The three giants behind the first US-made computer ENIAC and first computer simulations in history.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Even nowadays, some very simple computers still use this design, either for simplicity or training purposes. For example, a desk calculator (in principle) is a fixed program computer. It can do basic mathematics, but it cannot be used as a word processor or a gaming console. Changing the program of a fixed-program machine requires rewiring, restructuring, or redesigning the machine. The earliest computers were not so much “programmed” as they were “designed”.&lt;/p&gt;

&lt;p&gt;It took a while, until the early computer scientists noticed that they could design computers in such a way that the algorithm itself could be treated as part of the input data to the computer. In other words, one could build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_machine&quot; target=&quot;_blank&quot;&gt;general-purpose machine&lt;/a&gt;, that could take any computer algorithm as input and given its own basic set of operations (basically, if-conditional, goto, and memory access) could perform the algorithm. Such machines, which are nowadays in everyday use, are called &lt;strong&gt;stored-program computers&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;programming-language-generations&quot;&gt;Programming language generations&lt;/h3&gt;

&lt;p&gt;Initially computers had to be programmed by what is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine language&lt;/a&gt;, a set of instructions for the Central Processing Unit (CPU)  of the computer, comprising a long sequence of binary digital zeros and ones. Any interaction with computer hardware, even nowadays, has to be first converted to machine code in order to become comprehensible by the computer hardware. The coding in this language is however, very tedious and time consuming, and non-portable. As a result, immediately after the development of the first generation of computers, the first generation of programming languages also came to exist, most notably, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly language&lt;/a&gt; in the late 1940s. Many more programming languages have been since developed that provide higher and higher levels of &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction_(software_engineering)&quot; target=&quot;_blank&quot;&gt;programming abstraction&lt;/a&gt; by hiding more complexities of the machine code interaction with machine hardware from the front-end computer software and users.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/proglang.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/proglang.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;&lt;!--
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A flowchart illustrating .
    &lt;/figcaption&gt;--&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Depending on their levels of abstraction, programming languages are classified into different generations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/First-generation_programming_language&quot; target=&quot;_blank&quot;&gt;First generation&lt;/a&gt; languages, or machine languages, are the lowest-level computer programming languages, which provide no abstraction in their interactions with computer hardware. These languages directly interact with computer hardware, and so there is no need for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret these languages for the hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-generation_programming_language&quot; target=&quot;_blank&quot;&gt;second generation&lt;/a&gt; languages, are at a higher level of abstraction from the machine hardware, meaning that they require an &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language#Assembler&quot; target=&quot;_blank&quot;&gt;assembler&lt;/a&gt; to interpret the code for the computer hardware. The most prominent and, to my understanding, the sole language of this generation is &lt;a href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot; target=&quot;_blank&quot;&gt;Assembly&lt;/a&gt;, which is the closest-possible compiled programming language to computer hardware.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Third generation:&lt;/strong&gt; The &lt;a href=&quot;https://en.wikipedia.org/wiki/Third-generation_programming_language&quot; target=&quot;_blank&quot;&gt;third generation&lt;/a&gt; languages, or &lt;a href=&quot;https://en.wikipedia.org/wiki/High-level_programming_language&quot; target=&quot;_blank&quot;&gt;high-level&lt;/a&gt; programming languages provide an even higher abstraction level than the second-generation languages. Third-generation languages make programming almost platform-independent, meaning that the content of the code does not depend directly on the current hardware being used. This helps the programmer to focus more on the problem of interest, rather than spending time to understand details of the specific computer and hardware being currently used. Examples of third-generation programming languages are: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/ALGOL&quot; target=&quot;_blank&quot;&gt;ALGOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/BASIC&quot; target=&quot;_blank&quot;&gt;BASIC&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot; target=&quot;_blank&quot;&gt;C#&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal_(programming_language)&quot; target=&quot;_blank&quot;&gt;Pascal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fourth generation:&lt;/strong&gt; The definition for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourth-generation_programming_language&quot; target=&quot;_blank&quot;&gt;fourth generation&lt;/a&gt; and beyond is not very clear, however, it is generally as the set of languages that provide an even higher level of abstraction from the hardware and proximity to the user (programmer). Some prominent examples of this category include &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; target=&quot;_blank&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Perl&quot; target=&quot;_blank&quot;&gt;Perl&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)&quot; target=&quot;_blank&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/IDL_(programming_language)&quot; target=&quot;_blank&quot;&gt;IDL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/R_programming_language&quot; target=&quot;_blank&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_(programming_language)&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/PLchart.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/PLchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A diagram tracing the history of computer languages throughout the history of computer science.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-paradigms&quot;&gt;Programming language paradigms&lt;/h3&gt;

&lt;p&gt;Programming paradigms are a way to classify programming languages based on their features. There are several programming paradigms such as,
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Structured_programming&quot; target=&quot;_blank&quot;&gt;structured programming&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot; target=&quot;_blank&quot;&gt;imperative programming&lt;/a&gt; (allows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;functional programming&lt;/a&gt; (disallows side effects),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procedural_programming&quot; target=&quot;_blank&quot;&gt;procedural programming&lt;/a&gt; (groups code into functions and subroutines),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; target=&quot;_blank&quot;&gt;object-oriented programming (OOP)&lt;/a&gt; (groups code together with the data on which the code works).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/progEvol.png&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/progEvol.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the evolution of programming techniques.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Among all however, the last two programming paradigms are the most important and more widely used than the others. Historically all programming languages were &lt;strong&gt;imperative (or, procedural)&lt;/strong&gt; since this paradigm is more intuitive to human mind, and indeed, what the computer hardware does. These languages are basically human-readable abstractions of the machine code.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;http:/ICP2017F/lecture/2/imperative.gif&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/imperative.gif&quot; width=&quot;500&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A schematic representation of the structure of imperative (procedural) programming.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Imperative programs have a structure like the figure above, with the following components and rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a main procedure that determines the control flow for the program,&lt;/li&gt;
  &lt;li&gt;a set of functions that are called to perform certain tasks during program execution,&lt;/li&gt;
  &lt;li&gt;the main and sub-main procedures as a hierarchical structure,&lt;/li&gt;
  &lt;li&gt;the source code for each procedure is compiled and linked with compilation of other source codes to produce a complete executable program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few decades after the first imperative programming languages were developed, computer scientists came up with an alternative programming paradigm that resulted in higher levels of abstraction from the machine code, however, could also significantly reduce the cost of code development and increase the amount of code re-usability, from one program to the next. This programming paradigm is called &lt;strong&gt;object-oriented programming (OOP)&lt;/strong&gt;, since it looks at everything in the code, as an &lt;strong&gt;object&lt;/strong&gt;. Each object then, has a &lt;strong&gt;type&lt;/strong&gt;, or, &lt;strong&gt;class&lt;/strong&gt;, to which it belongs. For example, one can define a class describing a car in general, which has some &lt;strong&gt;attributes&lt;/strong&gt; that specify its model, make, year, owner, … , as well as some &lt;em&gt;*methods&lt;/em&gt; that can act on these attributes and make the car do something,&lt;/p&gt;

&lt;figure&gt;
	&lt;!--
    &lt;a href=&quot;http:/ICP2017F/lecture/2/oop_car.png&quot; target=&quot;_blank&quot;&gt;
    &lt;/a&gt;
    --&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/oop_car.png&quot; width=&quot;500&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        A example of a OOP class describing a car, with its attributes and methods.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;programming-language-purpose&quot;&gt;Programming language purpose&lt;/h3&gt;

&lt;p&gt;Some programming languages have been designed to target a specific market. For example, in the mid 20th century, there were two prominent languages &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortran&quot; target=&quot;_blank&quot;&gt;Fortran&lt;/a&gt; for numerical and scientific computation, and &lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL&quot; target=&quot;_blank&quot;&gt;COBOL&lt;/a&gt; for business problems. In the field of scientific computation, Fortran (FORmula TRANslation), first released in 1956, is undoubtedly the most influential programming language of all human history and the oldest high-level programming language that is still in active everyday use. Among all programming languages, Fortran is the only one that specifically targets scientists and engineers as its audience. Here is a history of Fortran by its original developers:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/KohboWwrsXg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And there is of course, not doubt about the importance of general-purpose programming language &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt; and its descendant &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/a&gt;. Specifically, C++ grew out of interest is developing a language that is universal, that is, can be used for any purpose (business, OS development, scientific computation), that could also reduce the cost of code maintenance and software development. In the beginning, C++ codes were rather slow and inefficient, but more recently the language has significantly caught up with the two high-performance computing (HPC) languages C and Fortran. Here is a short video describing the origin of C++ by its own inventor:&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JBjjnqG0BP8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Both C and C++, as well as Fortran are still widely used everyday. These three languages (even Fortran) are anonymously present in the lives of virtually all humans every day. For example, all climate and weather prediction software as of today, rely on HPC kernels that have been written and are still written in Fortran. Similarly, almost every operating system that you use on your electronic devices, has some connection to C or C++.&lt;/p&gt;

&lt;h3 id=&quot;a-final-personal-remark&quot;&gt;A final, personal remark&lt;/h3&gt;

&lt;p&gt;Sometimes science acts like humans: it finds a matching partner (a programming language), then they flourish together, make a love story and occasionally decline together as well, with the only difference that polygamy is allowed in science, like Fortran’s marriage with Aerospace and &lt;a href=&quot;https://en.wikipedia.org/wiki/Plasma_(physics)&quot; target=&quot;_blank&quot;&gt;Plasma physics&lt;/a&gt;:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=fortran%2Cplasma%2Caerospace&amp;amp;case_insensitive=on&amp;amp;year_start=1920&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cfortran%3B%2Cc0%3B%2Cs0%3B%3BFORTRAN%3B%2Cc0%3B%3BFortran%3B%2Cc0%3B.t4%3B%2Cplasma%3B%2Cc0%3B%2Cs0%3B%3Bplasma%3B%2Cc0%3B%3BPlasma%3B%2Cc0%3B%3BPLASMA%3B%2Cc0%3B.t4%3B%2Caerospace%3B%2Cc0%3B%2Cs0%3B%3BAerospace%3B%2Cc0%3B%3Baerospace%3B%2Cc0%3B%3BAEROSPACE%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/plasma-aerospace-fortran.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution of two of the most challenging computationally-intensive fields of science (Aerospace and Plasma Physics) with the most popular high-performance scientific programming language in human history as of today. The vertical axis represents the relative word-usage frequency of the three keywords (Plasma, Aerospace, and Fortran) in all digital corpus, and the horizontal axis represents the year. Note that the downward slope of the curves in later times does NOT imply the decline of these fields of science or the decline of Fortran. It merely means that they have reached their exponential peak growth in the mid-1980s, and are now expanding steadily (linearly), whereas other newer fields (such as bioinformatics) are being more and more frequently referenced than the above three keywords every year in all digital corpus.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Many times throughout the recent history, some specific fields of science have boosted and popularized some computer programming languages and vice versa, in a positive feedback loop. A younger just-married couple seems to be Bioinformatics-Python, both of which, as of today seem to be thriving:&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/bioinformatics-python.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the co-evolution and thriving of the field of bioinformatics with the popular programming language, Python. The vertical axis represents the relative word-usage frequency of the two keywords (Bioinformatics and Python) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes, a programming language couples with a specific field of science and thrives for a few years, only to be soon replaced with a younger, more attractive, programming language. This is probably what happened to the co-evolution of Perl with bioinformatics, a language which was gradually replaced with Python in the beginning of the new millennium, at least in the field of bioinformatics.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://books.google.com/ngrams/graph?content=python%2Cbioinformatics%2Cperl&amp;amp;case_insensitive=on&amp;amp;year_start=1980&amp;amp;year_end=2008&amp;amp;corpus=15&amp;amp;smoothing=3&amp;amp;share=&amp;amp;direct_url=t4%3B%2Cpython%3B%2Cc0%3B%2Cs0%3B%3BPython%3B%2Cc0%3B%3Bpython%3B%2Cc0%3B%3BPYTHON%3B%2Cc0%3B.t4%3B%2Cbioinformatics%3B%2Cc0%3B%2Cs0%3B%3BBioinformatics%3B%2Cc0%3B%3Bbioinformatics%3B%2Cc0%3B%3BBIOINFORMATICS%3B%2Cc0%3B.t4%3B%2Cperl%3B%2Cc0%3B%2Cs0%3B%3BPerl%3B%2Cc0%3B%3Bperl%3B%2Cc0%3B%3BPERL%3B%2Cc0&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;http:/ICP2017F/lecture/2/bioinformatics-python-perl.png&quot; width=&quot;900&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption style=&quot;text-align:justify&quot;&gt;
        A plot illustrating the evolution and steady expansion of the Perl programming language and its gradual replacement with Python, in the field of bioinformatics. The vertical axis represents the relative word-usage frequency of the three keywords (Bioinformatics, Python, and Perl) in all digital corpus, and the horizontal axis represents the year.
    &lt;/figcaption&gt;
&lt;/figure&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/2-programming-history&quot;&gt;Lecture 2: Programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Problems - Variables, Values, and Types]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/2-problems-variables-values-types"/>
  <id>http:/ICP2017F/homework/2-problems-variables-values-types</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Oct 2, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience with MATLAB variables.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; Type the following in the command window and submit the results. Briefy explain what each assignment does.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt; b = 'x'
&amp;gt;&amp;gt; c = true
&amp;gt;&amp;gt; whos a b c
&amp;gt;&amp;gt; a == c
&amp;gt;&amp;gt; a + c
&amp;gt;&amp;gt; d = [1 2 3 4]
&amp;gt;&amp;gt; e = ['a' 'b' 'c' 'd']
&amp;gt;&amp;gt; f = ['abcd']
&amp;gt;&amp;gt; g = {‘a’ ‘b’ ‘c’ ‘d’}
&amp;gt;&amp;gt; h = { a b c d}
&amp;gt;&amp;gt; whos d e f g h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; What would happen if you go beyond the range for a particular type? For example, the largest integer that can be stored in &lt;strong&gt;int8&lt;/strong&gt; is 127, and the smallest integer is -128, so what would happen if we type cast a larger integer to the type &lt;strong&gt;int8&lt;/strong&gt;? Smaller integer? Use the built-in functions &lt;code&gt;intmin&lt;/code&gt; and &lt;code&gt;intmax&lt;/code&gt; to find the largest and smallest integers that can be stored in &lt;strong&gt;int16&lt;/strong&gt; and &lt;strong&gt;int32&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Think about what the results would be for the following expressions, and then type them in to the terminal to verify your answers. Briefly explain the results for each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; 1\2 
&amp;gt;&amp;gt; 1/2
&amp;gt;&amp;gt; int8(1/2)
&amp;gt;&amp;gt; int8(1/3)
&amp;gt;&amp;gt; -5^2 
&amp;gt;&amp;gt; (-5) ^ 2 
&amp;gt;&amp;gt; 10-6/2 
&amp;gt;&amp;gt; 5*4/2*3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(a) &lt;/strong&gt; Define the following variables:
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     1     0
     2     1
&amp;gt;&amp;gt; b
b =
    -1     2
     0     1
&amp;gt;&amp;gt; c
c =
     3
     2
&amp;gt;&amp;gt; d
d =
     5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.(b) &lt;/strong&gt; What is the result of each of the following expressions? Briefly explain what MATLAB is doing for each operation.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * b&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a + d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a .* d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a * d&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt; Provide three different methods of generating the matrix &lt;strong&gt;a&lt;/strong&gt;, one method should use the &lt;code&gt;diag()&lt;/code&gt; function, one should use the &lt;strong&gt;eye&lt;/strong&gt; function, and one should use the &lt;strong&gt;zeros&lt;/strong&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; a
a =
     2     0     0
     0     2     0
     0     0     2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;/strong&gt; Download this &lt;a href=&quot;../homework/2-problems/script_full_of_errors.m&quot; target=&quot;_blank&quot;&gt;code&lt;/a&gt;. This code is full syntax errors. Fix the errors and submit the corrected code with name &lt;code&gt;script_full_of_errors_fixed.m&lt;/code&gt; in your folder for this HW. Explain in front of each corrected MATLAB statement, why the error occurred. Modify the last two variables so that they display,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;&amp;gt;&amp;gt; Persian
Persian =
Persian is a human language
&amp;gt;&amp;gt; Spanish
Spanish = 
    'Spanish '    'is '    ' another'    'language'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Modify the last line such that for the last line the code displays,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;Persian is not the same as Spanish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Explain these results.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;/strong&gt; Use MATLAB help to find out how you can create a new directory named &lt;code&gt;mynewdir&lt;/code&gt; from MATLAB command line. Then change the working directory the newly created directory. Then create a MATLAB script in this directory named &lt;code&gt;myscript.m&lt;/code&gt; with the following code in it,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-matlab&quot;&gt;% First create an array from -2*pi to 2:pi
x = -2*pi:pi/20:2*pi;

% Calculate |sin(x)|
y = abs(sin(x));

plot(x,y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now on MATLAB command line, run the script by calling its name. What do you get? Save the output as a figure and submit it with your homework.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;/strong&gt; Now change your working directory to the original directory before you created &lt;code&gt;mynewdir&lt;/code&gt; directory. Try to run the script &lt;code&gt;myscript&lt;/code&gt; you had created again, from MATLAB command line. What do you get? and why?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/2-problems-variables-values-types&quot;&gt;Homework 2: Problems - Variables, Values, and Types&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Solutions - Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/homework/1-solutions-version-control-using-git-github"/>
  <id>http:/ICP2017F/homework/1-solutions-version-control-using-git-github</id>
  <published>2017-09-18T00:00:00-05:00</published>
  <updated>2017-09-18T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is the solution to &lt;a href=&quot;1-problems-version-control-using-git-github.html&quot; target=&quot;_blank&quot;&gt;Homework 1: Problems - Version Control Using Git and Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following figure illustrates the grade distribution for this homework.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/homework/gradeDist/gradeHistHomework1.png&quot; width=&quot;700&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points, excluding bonus questions, is 1.&lt;br /&gt;
        Maximum possible points, including bonus questions, is 1.5.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Sep 13, 2017 9:00 AM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/ICP2017F/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Include the following information with the following format and information in your main directory &lt;code&gt;readme.md&lt;/code&gt; file:&lt;/p&gt;

&lt;h2 id=&quot;beginning-of-the-readme-files-content&quot;&gt;&lt;em&gt;Beginning of the README file’s content&lt;/em&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;icp2017f---introduction-to-computer-programming-fall-2017&quot;&gt;ICP2017F - Introduction to Computer Programming (Fall 2017)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Name:&lt;/strong&gt; &amp;lt;first name&amp;gt; &amp;lt;last name&amp;gt;&lt;br /&gt;
&lt;strong&gt;UT EID:&lt;/strong&gt; &amp;lt;your UT EID&amp;gt;&lt;br /&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &amp;lt;your email&amp;gt;&lt;br /&gt;
&lt;strong&gt;Department:&lt;/strong&gt; &lt;a href=&quot;http://www.ae.utexas.edu/&quot;&gt;Department of Aerospace Engineering and Engineering Mechanics&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;University:&lt;/strong&gt; &lt;a href=&quot;http://www.utexas.edu/&quot;&gt;The University of Texas at Austin&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Level:&lt;/strong&gt; Undergraduate - &amp;lt;Freshman(1st year) / Sophomore(2nd year) / Junior(3rd year) / Senior(4th year)&amp;gt;&lt;br /&gt;
&lt;strong&gt;ICP Class Position:&lt;/strong&gt; Student&lt;br /&gt;
&lt;strong&gt;Course Webpage:&lt;/strong&gt; &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;http://www.shahmoradi.orghttp:/ICP2017F/&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Photo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http:/ICP2017F/images/amir.png&quot; alt=&quot;Amir Shahmoradi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-of-the-projects-content&quot;&gt;Description of the project’s content&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt; This repository contains my homework, quizzes, and virtually every effort that I have made for &lt;a href=&quot;http://www.shahmoradi.orghttp:/ICP2017F/&quot;&gt;ICP2017F class&lt;/a&gt;. The structure of the project is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#homework&quot;&gt;homework&lt;/a&gt;:&lt;/strong&gt; (the homework hyperlink should take the reader to the homework folder)&lt;br /&gt;
  This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#quiz&quot;&gt;quiz&lt;/a&gt;:&lt;/strong&gt; (the quiz hyperlink should take the reader to the quizzes folder)&lt;br /&gt;
  This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;#exam&quot;&gt;exam&lt;/a&gt;:&lt;/strong&gt; (the exam hyperlink should take the reader to the exams folder)&lt;br /&gt;
  This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.&lt;br /&gt;
  &lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For questions and troubleshooting, please contact:&lt;/p&gt;

&lt;p&gt;&amp;lt;your name&amp;gt;&lt;br /&gt;
&amp;lt;your email&amp;gt;&lt;br /&gt;
&amp;lt;any other contact or signature information that you would like to add&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work.&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Thomas_Edison&quot; target=&quot;_blank&quot;&gt;Thomas A. Edison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;end-of-the-readme-files-content&quot;&gt;&lt;em&gt;End of the README file’s content&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Use the following Markdown code in your &lt;code&gt;readme.md&lt;/code&gt; file to get the exact same behavior as requested above:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;#### ICP2017F - Introduction to Computer Programming (Fall 2017)
&amp;lt;br&amp;gt;
**Name:** \&amp;lt;first name&amp;gt; \&amp;lt;last name&amp;gt;  
**UT EID:** \&amp;lt;your UT EID&amp;gt;  
**Email:** \&amp;lt;your email&amp;gt;  
**Department:** [Department of Aerospace Engineering and Engineering Mechanics](http://www.ae.utexas.edu/)  
**University:** [The University of Texas at Austin](http://www.utexas.edu/)  
**Level:** Undergraduate - \&amp;lt;Freshman(1st year) / Sophomore(2nd year) / Junior(3rd year) / Senior(4th year)&amp;gt;  
**ICP Class Position:** Student  
**Course Webpage:** &amp;lt;http://www.shahmoradi.orghttp:/ICP2017F/&amp;gt;  
**Photo:**  

![Amir Shahmoradi](../../images/amir.png)  

#### Description of the project's content
&amp;lt;br&amp;gt; This repository contains my homework, quizzes, and virtually every effort that I have made for [ICP2017F class](http://www.shahmoradi.orghttp:/ICP2017F/). The structure of the project is the following:

* **[homework](#homework):** (the homework hyperlink should take the reader to the homework folder)  
    This directory contains all my homework submissions, each of which is a folder properly named with homework number, containing the homework submission.  
    &amp;lt;br&amp;gt;
* **[quiz](#quiz):** (the quiz hyperlink should take the reader to the quizzes folder)  
    This directory contains all my quiz submissions, each of which is a folder properly named with quiz number, containing the quiz submission.  
    &amp;lt;br&amp;gt;
* **[exam](#exam):** (the exam hyperlink should take the reader to the exams folder)  
    This directory contains all my exam submissions, each of which is a folder properly named with exam name or number, containing the exam submission.  
    &amp;lt;br&amp;gt;

For questions and troubleshooting, please contact:  

\&amp;lt;your name&amp;gt;  
\&amp;lt;your email&amp;gt;  
\&amp;lt;any other contact or signature information that you would like to add&amp;gt;

&amp;gt;I have not failed. I've just found 10,000 ways that won't work.  
&amp;gt;[Thomas A. Edison](https://en.wikipedia.org/wiki/Thomas_Edison){:target=&quot;_blank&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Note that you will have to change the relevant information and hyper-references in the above Mardown code to those that match your own information in your own repository (including your own photo).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Create two additional test branches in your project, each of which is branched directly from &lt;em&gt;master&lt;/em&gt;. &lt;strong&gt;For each of the following cases, write the command and the corresponding output message of Git, in Markdown language in a &lt;code&gt;readme.md&lt;/code&gt; file inside your &lt;code&gt;homework/1/&lt;/code&gt; folder in your master branch&lt;/strong&gt;. If you don’t have this folder in your project, then create the folder and then place your initial &lt;code&gt;readme.md&lt;/code&gt; file in this folder with your signature as the content of the file. Then stage and commit this file together with homework-1 folder to your local repository. Throughout the rest of this homework, you will fill this &lt;code&gt;readme.md&lt;/code&gt; file with your answers.&lt;/p&gt;

&lt;p&gt;(A) Create two branches, &lt;strong&gt;both from your &lt;em&gt;master&lt;/em&gt; branch&lt;/strong&gt;, with names &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master

$ git branch test1

$ git branch test2

$ git branch
* master
  test1
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(B) Now checkout the &lt;em&gt;test1&lt;/em&gt; branch and create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
Switched to branch 'test1'

$ git status
On branch test1
nothing to commit, working tree clean

$ ls
readme.md

$ touch test.txt

$ ls
readme.md  test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(C) Inside &lt;code&gt;test.txt&lt;/code&gt; in &lt;em&gt;test1&lt;/em&gt; branch write this message: &lt;em&gt;This is some example text for branch test1&lt;/em&gt;, and save it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;vim test.txt&lt;/code&gt; to open &lt;em&gt;vim&lt;/em&gt; editor. Press &lt;code&gt;shift + I&lt;/code&gt; to switch to &lt;em&gt;vim insert mode&lt;/em&gt;. write &lt;em&gt;This is some example text for branch test1&lt;/em&gt; in &lt;code&gt;test.txt&lt;/code&gt; file. Now, Press &lt;code&gt;ESC&lt;/code&gt; key and write &lt;code&gt;:wq&lt;/code&gt; on the &lt;em&gt;vim&lt;/em&gt; command line to save the file and quit &lt;em&gt;vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(D) Now stage and commit &lt;code&gt;test.txt&lt;/code&gt; file to branch &lt;em&gt;test1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test1
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commiting the test.txt file in test1 branch&quot;
[test1 715ca59] commiting the test.txt file in test1 branch
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test1
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(E) Checkout the branch &lt;em&gt;test2&lt;/em&gt;. Do you still see &lt;code&gt;test.txt&lt;/code&gt; that you just created in your &lt;code&gt;homework/1/&lt;/code&gt; directory? You can search for it by the &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;ls&lt;/code&gt;. Explain why you see/don’t see the file in your working directory anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ ls
readme.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;code&gt;test.txt&lt;/code&gt; files is not in the project’s working directory, since I just chaecked out a new branch &lt;em&gt;test2&lt;/em&gt; that does not contain any files that were generated and committed in &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(F) Create a new text file named &lt;code&gt;test.txt&lt;/code&gt; in the &lt;code&gt;homework/1/&lt;/code&gt; directory of this branch as well, and add &lt;em&gt;This is some example text for branch test2&lt;/em&gt; to its content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch test.txt

$ vim test.txt

$ git status
On branch test2
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

        test.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The procedure for adding content to the file is very similar to that in part (C) of the problem, explained above.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(G) Now try to checkout &lt;em&gt;test1&lt;/em&gt;. What error/warning message do you get? Fix the source of error and then checkout &lt;em&gt;test1&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test1
error: The following untracked working tree files would be overwritten by checkout:
        test.txt
Please move or remove them before you switch branches.
Aborting

$ git add --all
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory.

$ git commit -m&quot;commtting the test2 branch changes&quot;
[test2 fce6a94] commtting the test2 branch changes
1 file changed, 1 insertion(+)
create mode 100644 test.txt

$ git status
On branch test2
nothing to commit, working tree clean

$ git checkout test1
Switched to branch 'test1'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(H) Now merge the content of &lt;em&gt;test1&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. (Hint: Note from which branch you doing this merge!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ ls
readme.md

$ git status
On branch master
nothing to commit, working tree clean

$ git merge test1
Updating a661e87..715ca59
Fast-forward
 test.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(I) Now what do you see as the content of &lt;em&gt;master&lt;/em&gt; branch? (Hint: Use &lt;code&gt;ls&lt;/code&gt; &lt;em&gt;bash&lt;/em&gt; command, to list the files in the working directory.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls
readme.md  test.txt

$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(J) Now merge the content of &lt;em&gt;test2&lt;/em&gt; with &lt;em&gt;master&lt;/em&gt; branch. What error/warning message do you get? Why does this error arise?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge test2
Auto-merging test.txt
CONFLICT (add/add): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(K) Now checkout &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
test.txt: needs merge
error: you need to resolve your current index first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(L) Run the Git command &lt;code&gt;git status&lt;/code&gt;. Why does such a conflict exist, as mentioned in &lt;code&gt;git status&lt;/code&gt; output?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Basically, by running &lt;code&gt;git merge test2&lt;/code&gt; command, we attempted to merge test.txt file of &lt;em&gt;test2&lt;/em&gt; branch with the existing &lt;code&gt;test.txt&lt;/code&gt; file of &lt;em&gt;master&lt;/em&gt; branch. But the content of the two is different.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(M) At this stage, you have two options: Either 1. stage and commit the combined conlifting &lt;code&gt;test.txt&lt;/code&gt; file to Git repository (but this is not recommended), or, 2. open the file &lt;code&gt;test.txt&lt;/code&gt; using &lt;em&gt;vim&lt;/em&gt; editor on the command line and reslve the conflict by editing the content of the file to only this sentence: &lt;em&gt;. Then save and quit *vim&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ vim test.txt

$ cat test.txt
This is some example text from both test1 and test2 branches combined.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;em&gt;bash&lt;/em&gt; command &lt;code&gt;cat&lt;/code&gt; shows the content of &lt;code&gt;text.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(N) Now, run &lt;code&gt;git status&lt;/code&gt;, then stage and commit your conflict-resolved file. Then checkout &lt;em&gt;test2&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both added:      test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add test.txt

$ git commit -m&quot;adding the test.txt resolution file&quot;
[master 4c74098] adding the test.txt resolution file

$ git status
On branch master
nothing to commit, working tree clean

$ git checkout test2
Switched to branch 'test2'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(O) Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on branch &lt;em&gt;test2&lt;/em&gt;. What error/warning message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test1
error: The branch 'test1' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test1'.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(P) Now, switch back to &lt;em&gt;master&lt;/em&gt; branch. Now, try deleting branch &lt;em&gt;test1&lt;/em&gt;, while on &lt;em&gt;master&lt;/em&gt; branch. What message do you get from Git? List all the existing branches using &lt;code&gt;git branch&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch
* master
  test2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(Q) Why is there such a difference in Git messages between when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;test2&lt;/em&gt; branch, and when you tried deleting &lt;em&gt;test1&lt;/em&gt; branch from &lt;em&gt;master&lt;/em&gt; branch?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The difference arises, because whichever branch you are in, Git assumes that the content of any other branch should be first merged for the current branch before deteting the other branch. Therefore, in the first case, Git warns that there is unmerged data between &lt;em&gt;test1&lt;/em&gt; and &lt;em&gt;test2&lt;/em&gt; branches. But the delete command from &lt;em&gt;master&lt;/em&gt; branch gives no error, since the content of &lt;em&gt;test1&lt;/em&gt; branch has been previously appropriately merged with &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(R) Now checkout &lt;em&gt;test2&lt;/em&gt; branch. While on &lt;em&gt;test2&lt;/em&gt;, try to delete branch &lt;em&gt;test2&lt;/em&gt;. What error/message do you get?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout test2
Switched to branch 'test2'

$ git branch -d test2
error: Cannot delete branch 'test2' checked out at '~/test'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(S) Switch back to &lt;em&gt;master&lt;/em&gt; and delete &lt;em&gt;test2&lt;/em&gt; branch. List all your project branches by the appropriate Git command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Switched to branch 'master'

$ git branch -d test2
Deleted branch test2 (was fce6a94).

$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(T) Stage and commit all the changes (including the file &lt;code&gt;test.txt&lt;/code&gt;) to your project’s &lt;em&gt;master&lt;/em&gt; branch. Now push it all to the remote repository by Wednesday Feb 15 2017, 9:00 a.m. CDT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add --all

$ git commit
On branch master
nothing to commit, working tree clean

$ git push --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; (Bonus, not mandatory) Design a simple Github page for your project, using the main directory’s &lt;code&gt;readme.md&lt;/code&gt; file. Submit the link to the page as your answer. Note that you don’t need to add anything extra to your readme file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class to teach you how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; (Bonus, not mandatory) Create a &lt;em&gt;gh-pages&lt;/em&gt; branch for your project from master branch, such that your project is accessible through its web address based on the content of &lt;em&gt;gh-pages&lt;/em&gt; branch, not based on the content of &lt;em&gt;master&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Ask me in class and I will explain how to do it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/homework/1-solutions-version-control-using-git-github&quot;&gt;Homework 1: Solutions - Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 18, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lecture 1: Advanced Git concepts]]></title>
  <link rel="alternate" type="text/html" href="http:/ICP2017F/lecture/1-advanced-git"/>
  <id>http:/ICP2017F/lecture/1-advanced-git</id>
  <published>2017-09-08T00:00:00-05:00</published>
  <updated>2017-09-08T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/ICP2017F</uri>
    <email>amir@ices.utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This lecture aims at providing a brief review of some advanced topics in Git Version Control System which are essential for effective management of large collaborative projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A useful Git-cheatsheet link for future reference:&lt;/strong&gt;   &lt;a href=&quot;http://ndpsoftware.com/git-cheatsheet.html&quot; target=&quot;_blank&quot;&gt;Advanced Git cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;lecture-videos&quot;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;This video is created solely as reference for the attendants of ICP2017F course at UT Austin. If you did not attend this class, then you may not find this video useful.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/K62e2y-zM24&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;&lt;div class=&quot;video-wrapper&quot;&gt;&lt;div class=&quot;video-container&quot;&gt;
    &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/Mv_C3trCAus&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-help-for-git-commands&quot;&gt;Getting help for Git commands&lt;/h2&gt;

&lt;p&gt;There are basically three ways to request information about Git commands on the Git-bash command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git help &amp;lt;command name&amp;gt;
$ git &amp;lt;command name&amp;gt; --help
$ man git-&amp;lt;command name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the last command &lt;code&gt;man&lt;/code&gt; is not a Git command. All Git commands begin with the word &lt;em&gt;git&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;viewing-the-git-commit-history&quot;&gt;Viewing the Git commit history&lt;/h2&gt;

&lt;p&gt;You can check the history of project commits to the repository using the Git command &lt;code&gt;git log&lt;/code&gt;.
For example, here is a snippet from the output  of &lt;code&gt;git log&lt;/code&gt; on laptop screen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  $ git log
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit

commit b6f4fb69d97a396bde7159c78424100704328634
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:03:28 2017 -0600

    *.txt files removed

commit 961ff2d4ac68081a21864b2f1b067b43424d3342
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 21:02:00 2017 -0600

    update

commit 8fd3c49e90d96f4bcef2302c7b227f06ad7a5250
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:36:45 2017 -0600

    minor

commit cd0ed7def385ba29ea134bcc18a4ad0873d9f5ee
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:32:51 2017 -0600

    minor

commit 8096668868ef64189f788669d5f1838cd944f9b6
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:28:22 2017 -0600

    minor

commit c52ba6adea474625cce1493896ecaac40cb976af
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:24:23 2017 -0600

    minor

commit ab5a17f9e913e55cae0f971fd9b485a0a6e8dec3
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:16:27 2017 -0600

    minor

commit ce5c2421db6e76a338a0e6922acead9100a7c4c4
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:10:19 2017 -0600

    minor

commit 4a7d27d81260c2e2a29b6259e6c97befc065c069
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Thu Jan 12 19:05:14 2017 -0600

:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
There is a long list of options that can be used with &lt;code&gt;git log&lt;/code&gt; command to display exactly what you need on bash screen.
Some of the most useful are discussed below.&lt;br /&gt;
To lists the differences of the files between different commits use &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To lists only a limited number of most recent commits use &lt;code&gt;-&amp;lt;number of commits to display&amp;gt;&lt;/code&gt; flag. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -2
$ git log -2
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To list the statistics of the commits, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --stat -1
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

 README.md                |   1 +
 results/tables/README.md |   8 ++-
 results/tables/tgm.mat   | Bin 0 -&amp;gt; 2550889 bytes
 src/defineProject.m      |   3 +-
 src/main.m               |  82 +++++++++------------------
 src/writeTables.m        |  75 ++++++++++++++++++++++++
 9 files changed, 140 insertions(+), 56 deletions(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The log data can be even represented formatted via the flag &lt;code&gt;--pretty=format:&quot;&amp;lt;the desired format&amp;gt;&quot;&lt;/code&gt;. For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log -3 --pretty=format:&quot;%h - %an, %ar : %s&quot;
264043e - Amir Shahmoradi, 7 days ago : data tables for 1D model added.
b45ddd7 - Amir Shahmoradi, 7 days ago : minor edit
b6f4fb6 - Amir Shahmoradi, 3 weeks ago : *.txt files removed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A list of available format options is provided below.&lt;/p&gt;

&lt;table class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;
Table 1: Some useful options for &lt;code&gt;git log --pretty=format:&quot;&amp;lt;options&amp;gt;&quot;&lt;/code&gt;. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description of Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated commit hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated tree hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Abbreviated parent hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date (format respects the --date=option)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Author date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Committer date, relative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subject&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; is given in the table below.&lt;/p&gt;

&lt;table id=&quot;log_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 2: Common flags for &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot; /&gt;
&lt;col style=&quot;width: 80%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the patch introduced with each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show statistics for files modified in each commit.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display only the changed/insertions/deletions line from the --stat command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files modified after the commit information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the list of files affected with added/modified/deleted information as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the first few characters of the SHA-1 checksum instead of all 40.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display an ASCII graph of the branch and merge history beside the log output.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
A list of useful options for &lt;code&gt;git log&lt;/code&gt; commands that can change the format of the output, is given in the table below.&lt;/p&gt;

&lt;table id=&quot;limit_options&quot; class=&quot;center&quot;&gt;
&lt;caption class=&quot;title&quot; style=&quot;padding-bottom:10px&quot;&gt;Table 3. Flags limiting the output of &lt;code&gt;git log&lt;/code&gt; command. &lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot; /&gt;
&lt;col style=&quot;width: 66.6667%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show only the last n commits  (e.g., -2, -3, ...). &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made after the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt;, &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Limit the commits to those made before the specified date.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the author entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits in which the committer entry matches the specified string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits with a commit message containing the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only show commits adding or removing code matching the string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
For example, to list the commit history since a specific time in the past, use &lt;code&gt;--since&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=2.weeks
commit 264043e0d49006b7f59e57639961c333b5d5f124
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 17:48:33 2017 -0600

    data tables for 1D model added.

commit b45ddd780c18736bac42ff27aade301a6b0f09cb
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 24 10:08:53 2017 -0600

    minor edit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
or, with the following date format:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git log --since=&quot;2017-01-15&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;undoing-amending-and-tagging&quot;&gt;Undoing, amending, and tagging&lt;/h2&gt;

&lt;p&gt;Suppose you want to undo the latest addition of files to the stage area. The command to use in order to clean the stage area is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This command is basically the opposite of &lt;code&gt;git add&lt;/code&gt;. There are a lot of options that can accompany this Git command, details of which can be found in &lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
However, &lt;strong&gt;be careful when using this command&lt;/strong&gt;, especially with flag &lt;code&gt;--hard&lt;/code&gt;, which can result in changes in your working directory as well, thus leading to involuntary loss of latest uncommitted files.&lt;/p&gt;

&lt;p&gt;Another useful command is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
which is used when you forget to add some files to your latest commit and now, you would like to add the latest content of your project’s staging area to the last commit, by &lt;em&gt;amending&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;The Git command &lt;code&gt;git tag&lt;/code&gt; allows you to tag specific important commits in your commit history, for example a final release of your project/software. If you just type &lt;code&gt;git tag&lt;/code&gt; on Git bash command line, it will list all tags in the project, &lt;strong&gt;in alphabetical order&lt;/strong&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git tag
v1.0
v1.1
v2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can create a tag for the latest commit to your repository by using,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag -a v3.0 -m &quot;new version of project&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
This will add a new tag pointing to the latest commit in the project with name &lt;code&gt;v3.0&lt;/code&gt; and the message &lt;em&gt;new version of project&lt;/em&gt;.
Now if you want to display the information about a specific tag, use &lt;code&gt;git show&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git show v1.0
tag v1.0
Tagger: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Tue Jan 1 18:08:00 2017 -0600

first tag

commit 25129a074aece69d234838764e7df63ed1fb3023
Author: Amir Shahmoradi &amp;lt;a.shahmoradi@gmail.com&amp;gt;
Date:   Fri Dec 27 17:12:08 2016 -0600

    Update README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
You can also create a &lt;strong&gt;lightweight&lt;/strong&gt; tag by avoiding &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-m&lt;/code&gt; flags in you tag command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git tag v4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Annotated tags (created with &lt;code&gt;-a&lt;/code&gt; flag) are meant for very important project versions, such as a software release, while lightweight tags are meant for private or temporary object labels.&lt;br /&gt;
For more information about &lt;code&gt;git tag&lt;/code&gt;, see &lt;a href=&quot;https://git-scm.com/docs/git-tag&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-with-remote-repositories&quot;&gt;Working with remote Repositories&lt;/h2&gt;

&lt;p&gt;In order to see which remote servers you have configured for your project, you can run the following Git command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote
origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In the output above, &lt;code&gt;origin&lt;/code&gt; is the default name that Git gives to the server you cloned your project from. If you also specify &lt;code&gt;-v&lt;/code&gt; flag, Git will show you the URLs that Git has stored for the remote shortname (e.g., origin) to be used when reading and writing to that remote repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote -v
origin  git@github.com:shahmoradi/foo.git (fetch)
origin  git@github.com:shahmoradi/foo.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
In order to see more information about a particular remote repository in your project, you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git remote show origin
* remote origin
  Fetch URL: git@github.com:shahmoradi/foo.git
  Push  URL: git@github.com:shahmoradi/foo.git
  HEAD branch: master
  Remote branches:
    development tracked
    master      tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The above information indicates that the current HEAD branch of the project is on &lt;em&gt;master&lt;/em&gt; branch, and the remote branches on the remote repository are &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about &lt;code&gt;git remote&lt;/code&gt; command in &lt;a href=&quot;https://git-scm.com/docs/git-remote&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-branching&quot;&gt;Git branching&lt;/h2&gt;

&lt;p&gt;Branching is powerful idea in Version Control Systems, which significantly facilitates collaboration or parallel development of a project. Suppose you have already a project which has reached its first release version, meaning that it works all fine. Now, you like to add a new feature to your project. To do this and to avoid further commits to your original project, you can create a new &lt;strong&gt;branch&lt;/strong&gt; of the project which is specifically devoted to adding the new feature. See the following figure, for an example of Git branching.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http:/ICP2017F/lecture/1/branch-flowchart.png&quot; width=&quot;900&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        An example illustration of Git branching for a project with three branches: master, development, topic.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When you create a Git project, the default single branch in your project is &lt;strong&gt;master&lt;/strong&gt;. So, for example if you search for your project branches, you’d see,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
If you already have created other branches in your project, for example &lt;strong&gt;development&lt;/strong&gt;, then you may see a Git message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch
* development
  master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
The &lt;strong&gt;*&lt;/strong&gt; behind the branch name indicates that the project HEAD (i.e., your working directory) points to that branch, that is, all commits will be made to that branch that is highlighted with &lt;strong&gt;*&lt;/strong&gt;. In the example above, the working directory points to &lt;em&gt;development&lt;/em&gt; branch.&lt;/p&gt;

&lt;p&gt;In order to &lt;strong&gt;create a new branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
When you create a new branch, Git creates an exact duplicate of the current branch that you are in, but with the requested name for the new branch. In order to &lt;strong&gt;switch to a specific Git branch&lt;/strong&gt; in your project, use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout development
Switched to branch 'development'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
A shortcut for &lt;strong&gt;both creating a new branch from the current branch, and switching to the new branch automatically&lt;/strong&gt; is to use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b &amp;lt;branch name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout -b test
Switched to a new branch 'test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose, you have made some significant progress on your project &lt;strong&gt;development&lt;/strong&gt; branch, and now you want to add the newly developed feature to your &lt;strong&gt;master&lt;/strong&gt; branch. All you need to do, is,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
$ git merge development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
By doing this, you first switch to master branch, then request Git, to &lt;strong&gt;merge&lt;/strong&gt; all changes made to the project on the &lt;em&gt;development&lt;/em&gt; branch to be copied and transferred to the &lt;em&gt;master&lt;/em&gt; branch. For example, if I have added a single &lt;code&gt;test.txt&lt;/code&gt; file, and committed the change to the development branch, then upon mergin with master, Git will display something like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Updating 25129a0..57ed7c2
Fast-forward
 test.txt | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Now suppose there was no change in the development branch, since branching it from master. Then upon merging, you would get a message like the following,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Already up-to-date.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Occasionally, conflicts may arise between branches upon merging. This happens when a common file between the two branches, has been modified on both branches in parallel. In such cases, you will need to resolve the conflict by choosing one of the file edits in one of the branches and discard the other. The following is an example merge conflict message by Git.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git merge development
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
For example, if you use &lt;code&gt;git status&lt;/code&gt; command, the following is the typical message that will be displayed,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git status
On branch test
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)

Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)

        both modified:   test.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
To resolve the conflict, open the conflicting file. There you will see the segments of the file from both versions which are the cause of the conflict. Edit the file as you wish. and then perform the normal &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; on the file, to resolve the conflict and complete the merge process.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;git merge&lt;/code&gt;, there is another more elegant and powerful Git command, &lt;code&gt;git rebase&lt;/code&gt; for integrating changes in different branches into a single branch. But, the subject goes beyond the goals of this class, and the interested reader is referred to &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for this command and &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot; target=&quot;_blank&quot;&gt;this pedagogical Git page&lt;/a&gt; for &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;deleting-a-branch&quot;&gt;Deleting a branch&lt;/h3&gt;
&lt;p&gt;Normally, when a branch merge is done, the development branch is not needed anymore, so it is always wise and cleaner to delete the unwanted branches, using the command &lt;code&gt;git branch -d &amp;lt;branch name&amp;gt;&lt;/code&gt;. To do this, on the same branch that you just performed &lt;code&gt;git merge&lt;/code&gt; use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)
Switched to branch 'master'
$ git branch -d test
Deleted branch hotfix (3a0874c).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
Note that you cannot delete a branch while you are on it (i.e., while it is checked out). For example, Git will give you the following error message,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;You cannot delete a branch from another branch with which you have not performed the merging either&lt;/strong&gt;. In this case, Git will give the following error,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: The branch 'test' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
    &lt;b&gt;Advice for good project management&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
    Your &lt;i&gt;master&lt;/i&gt; branch should always contain the latest clean version of your project, that is, the complete and working version/release. You should always make your new developments in a separate branch, and once it works and the new feature/development is complete, you merge the new development into the master branch.
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;fn1&quot;&gt;1. See &lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot;&gt;Git documentation&lt;/a&gt; for more details and updates. &lt;a href=&quot;#ref1&quot; title=&quot;Jump back to footnote 1 in the text.&quot;&gt;↩&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/ICP2017F/lecture/1-advanced-git&quot;&gt;Lecture 1: Advanced Git concepts&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/ICP2017F&quot;&gt;COE 301 - Fall 2017 - MWF 9-10 AM - UTC 4.110&lt;/a&gt; on September 08, 2017.&lt;/p&gt;</content>
</entry>

</feed>
